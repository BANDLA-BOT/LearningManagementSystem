{"version":3,"sources":["dashboard.js"],"names":["express","require","multer","Router","fs","adminTokenDecode","verifyToken","instructorTokenVerify","dashboardController","searchController","createCourse","resourceController","uploadVideos","topDiscussions","getProfile","enrollCourse","topRanks","progressController","courseProgress","filter","sorting","markVideoAsComplete","completedCourses","ratingController","askQuestion","editProfile","resetPasswordLink","login","resetPassword","register","editPassword","editInstructorProfile","mentorsController","registerController","loginController","questionsController","answerController","storage","memoryStorage","upload","resourceStorage","Date","diskStorage","destination","req","file","cb","concat","now","originalname","mkdirSync","existsSync","filename","InstructorProfileStorage","InstructorUploads","uploadProfilePic","updateProfilePic","router","get","put","post","single","uploadResources","module","exports"],"mappings":"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","file":"dashboard.min.js","sourcesContent":["const express = require(\"express\");\r\nconst multer = require(\"multer\");\r\nconst router = express.Router();\r\nconst fs = require('fs')\r\n\r\n//JWT DECODED TOKENS\r\n\r\nconst adminTokenDecode = require(\"../../utils/AdminTokenVerify.js\");\r\nconst verifyToken = require(\"../../utils/verifyToken.js\");\r\nconst instructorTokenVerify = require('../../utils/instructorTokenVerify.js')\r\n\r\n//Admin imports\r\n\r\nconst {\r\n  dashboardController,\r\n  searchController,\r\n  createCourse,\r\n  resourceController,\r\n  uploadVideos,\r\n} = require(\"../../controllers/admin/dashboardController.js\");\r\n\r\n//Student imports\r\n\r\nconst {\r\n  getProfile,\r\n  enrollCourse,\r\n  topRanks,\r\n  progressController,\r\n  courseProgress,\r\n  filter,\r\n  sorting,\r\n  markVideoAsComplete,\r\n  completedCourses,\r\n  ratingController,\r\n  topDiscussions,\r\n  askQuestion,\r\n  editProfile,\r\n} = require(\"../../controllers/student/dashboardcontroller.js\");\r\nconst { \r\n  login, \r\n  resetPasswordLink, \r\n  resetPassword, \r\n  register \r\n} = require(\"../../controllers/student/authController.js\");\r\n\r\n\r\n//Instructor Imports\r\n\r\nconst {\r\n  editPassword,\r\n  editInstructorProfile,\r\n  mentorsController,\r\n} = require(\"../../controllers/instructor/dashboardController.js\");\r\nconst { \r\n  registerController,\r\n   loginController\r\n} = require(\"../../controllers/instructor/authController.js\");\r\nconst questionsController = require(\"../../controllers/instructor/questionController.js\");\r\nconst answerController = require(\"../../controllers/instructor/answerController.js\");\r\n\r\n\r\n\r\n\r\n\r\n//Multer for videos upload\r\nconst storage = multer.memoryStorage();\r\nconst upload = multer({ storage: storage });\r\n\r\n\r\n\r\n\r\n//Multer to upload resources\r\nconst resourceStorage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, \"resources\");\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(null, `${Date.now()}-${file.originalname}`);\r\n  },\r\n});\r\nconst uploadResources = multer({\r\n  storage: resourceStorage,\r\n});\r\n\r\n\r\n//Multer for profile photo for Instructor\r\nif(!fs.existsSync('/uploads')){\r\n  fs.mkdirSync('/uploads')\r\n}\r\nconst InstructorProfileStorage = multer.diskStorage({\r\n  destination:(req,file,cb)=>{\r\n      cb(null, '/uploads')\r\n  },\r\n  filename:(req, file, cb)=>{\r\n      cb(null, `${Date.now()}-Instructor-${file.originalname}`)\r\n  }\r\n})\r\nconst InstructorUploads = multer({\r\n  storage:InstructorProfileStorage\r\n})\r\n\r\n//Multer for update profilePicture of instructor\r\n\r\nconst updateProfilePic = multer.diskStorage({\r\n  destination:(req,file,cb)=>{\r\n    cb(null, 'instructorProfilesPics')\r\n  },\r\n  filename:(req,file,cb)=>{\r\n    cb(null,`${Date.now()}-${file.originalname}`)\r\n}\r\n})\r\nconst uploadProfilePic = multer({\r\n  storage:updateProfilePic\r\n})\r\n\r\n\r\n\r\n//admin\r\nrouter.get(\"/\", adminTokenDecode, dashboardController);\r\nrouter.get(\"/search\", adminTokenDecode, searchController);\r\nrouter.post(\"/create/:instructorId\", adminTokenDecode, createCourse);\r\nrouter.post(\"/uploadvideos/:courseId\",upload.single(\"video\"),adminTokenDecode,uploadVideos);\r\nrouter.post(\"/resources/:courseId\",uploadResources.single(\"file\"),adminTokenDecode,resourceController);\r\n\r\n\r\n//student Access\r\nrouter.post('/student/register', upload.single('profile'), adminTokenDecode, register);\r\nrouter.post('/student/request-reset-password',adminTokenDecode, resetPasswordLink)\r\nrouter.post('/student/reset-password/:token', adminTokenDecode,resetPassword)\r\nrouter.post(\"/student/login\", adminTokenDecode, login);\r\nrouter.get(\"/student/profile\", verifyToken, getProfile);\r\nrouter.put(\"/student/editProfile\", verifyToken, editProfile);\r\nrouter.put(\"/stuednt/editpassword\", verifyToken, editPassword);\r\nrouter.post(\"/student/enroll/:courseId\", verifyToken, enrollCourse);\r\nrouter.put(\"/student/markvideoascomplete/:courseId/:videoArrId/:videoId\",verifyToken,markVideoAsComplete);\r\nrouter.get(\"/student/completedCourses\", verifyToken, completedCourses);\r\nrouter.get(\"/student/ranking\", verifyToken, topRanks);\r\nrouter.get(\"/student/progress\", verifyToken, progressController);\r\nrouter.get(\"/student/courseprogress\", verifyToken, courseProgress);\r\nrouter.get(\"/student/filter\", filter);\r\nrouter.get(\"/student/sorting\", sorting);\r\nrouter.post(\"/student/rate/:courseId/rate\", verifyToken, ratingController);\r\nrouter.post(\"/student/ask/:courseId/:videoId\", verifyToken, askQuestion);\r\nrouter.get(\"/student/topDiscuss/:courseId/:videoId\",verifyToken,topDiscussions);\r\n\r\n\r\n\r\n//Instructor Access\r\nrouter.post('/instructor/register', upload.single('profile'), adminTokenDecode, registerController)\r\nrouter.post('/instructor/login', adminTokenDecode, loginController)\r\nrouter.put('/instructor/editprofile', uploadProfilePic.single('updatedProfilePic'),instructorTokenVerify, editInstructorProfile)\r\nrouter.put('/instructor/editpassword', instructorTokenVerify, editPassword)\r\nrouter.get('/instructor/mentors', instructorTokenVerify, mentorsController)\r\nrouter.get('/instructor/discussions', instructorTokenVerify, questionsController)\r\nrouter.post('/instructor/answer/:id/:courseId', instructorTokenVerify, answerController)\r\n\r\nmodule.exports = router;\r\n"]}