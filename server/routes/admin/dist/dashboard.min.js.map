{"version":3,"sources":["dashboard.js"],"names":["express","require","multer","v2","router","Router","verifyToken","instructorTokenVerify","dashboardController","searchController","createCourse","resourceController","uploadVideos","ratingController","getProfile","enrollCourse","topRanks","progressController","courseProgress","filter","sorting","markVideoAsComplete","completedCourses","topDiscussions","askQuestion","editProfile","login","resetPasswordLink","resetPassword","register","mentorsController","editPassword","editInstructorProfile","loginController","registerController","questionsController","storage","upload","cloud_name","api_key","process","api_secret","env","API_SECRET","resourceStorage","diskStorage","filename","req","file","cb","uploadResources","now","originalname","existsSync","destination","Date","InstructorUploads","InstructorProfileStorage","updateProfilePic","uploadProfilePic","concat","post","adminTokenDecode","get","put","module","exports","single","answerController"],"mappings":"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","file":"dashboard.min.js","sourcesContent":["const express = require(\"express\");\r\nconst multer = require(\"multer\");\r\nconst cloudinary = require(\"cloudinary\").v2;\r\nconst router = express.Router();\r\nconst fs = require('fs')\r\n\r\n//JWT DECODED TOKENS\r\n\r\nconst adminTokenDecode = require(\"../../utils/AdminTokenVerify.js\");\r\nconst verifyToken = require(\"../../utils/verifyToken.js\");\r\nconst instructorTokenVerify = require('../../utils/instructorTokenVerify.js')\r\n\r\n//Admin imports\r\n\r\nconst {\r\n  dashboardController,\r\n  searchController,\r\n  createCourse,\r\n  resourceController,\r\n  uploadVideos,\r\n} = require(\"../../controllers/admin/dashboardController.js\");\r\n\r\n//Student imports\r\n\r\nconst {\r\n  getProfile,\r\n  enrollCourse,\r\n  topRanks,\r\n  progressController,\r\n  courseProgress,\r\n  filter,\r\n  sorting,\r\n  markVideoAsComplete,\r\n  completedCourses,\r\n  ratingController,\r\n  topDiscussions,\r\n  askQuestion,\r\n  editProfile,\r\n} = require(\"../../controllers/student/dashboardcontroller.js\");\r\nconst { \r\n  login, \r\n  resetPasswordLink, \r\n  resetPassword, \r\n  register \r\n} = require(\"../../controllers/student/authController.js\");\r\n\r\n\r\n//Instructor Imports\r\n\r\nconst {\r\n  editPassword,\r\n  editInstructorProfile,\r\n  mentorsController,\r\n} = require(\"../../controllers/instructor/dashboardController.js\");\r\nconst { \r\n  registerController,\r\n   loginController\r\n} = require(\"../../controllers/instructor/authController.js\");\r\nconst questionsController = require(\"../../controllers/instructor/questionController.js\");\r\nconst answerController = require(\"../../controllers/instructor/answerController.js\");\r\n\r\n\r\n\r\n\r\n\r\n//Multer for videos upload\r\nconst storage = multer.memoryStorage();\r\nconst upload = multer({ storage: storage });\r\n\r\n//Cloudinary for videos\r\ncloudinary.config({\r\n  cloud_name: \"diqptwlqn\",\r\n  api_key: process.env.API_KEY,\r\n  api_secret: process.env.API_SECRET,\r\n});\r\n\r\n\r\n//Multer to upload resources\r\nconst resourceStorage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, \"resources\");\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(null, `${Date.now()}-${file.originalname}`);\r\n  },\r\n});\r\nconst uploadResources = multer({\r\n  storage: resourceStorage,\r\n});\r\n\r\n\r\n//Multer for profile photo for Instructor\r\nif(!fs.existsSync('/uploads')){\r\n  fs.mkdirSync('/uploads')\r\n}\r\nconst InstructorProfileStorage = multer.diskStorage({\r\n  destination:(req,file,cb)=>{\r\n      cb(null, '/uploads')\r\n  },\r\n  filename:(req, file, cb)=>{\r\n      cb(null, `${Date.now()}-Instructor-${file.originalname}`)\r\n  }\r\n})\r\nconst InstructorUploads = multer({\r\n  storage:InstructorProfileStorage\r\n})\r\n\r\n//Multer for update profilePicture of instructor\r\n\r\nconst updateProfilePic = multer.diskStorage({\r\n  destination:(req,file,cb)=>{\r\n    cb(null, 'instructorProfilesPics')\r\n  },\r\n  filename:(req,file,cb)=>{\r\n    cb(null,`${Date.now()}-${file.originalname}`)\r\n}\r\n})\r\nconst uploadProfilePic = multer({\r\n  storage:updateProfilePic\r\n})\r\n\r\n\r\n\r\n//admin\r\nrouter.get(\"/\", adminTokenDecode, dashboardController);\r\nrouter.get(\"/search\", adminTokenDecode, searchController);\r\nrouter.post(\"/create/:instructorId\", adminTokenDecode, createCourse);\r\nrouter.post(\"/uploadvideos/:courseId\",upload.single(\"video\"),adminTokenDecode,uploadVideos);\r\nrouter.post(\"/resources/:courseId\",uploadResources.single(\"file\"),adminTokenDecode,resourceController);\r\n\r\n\r\n//student Access\r\nrouter.post('/student/register', upload.single('profile'), adminTokenDecode, register);\r\nrouter.post('/student/request-reset-password',adminTokenDecode, resetPasswordLink)\r\nrouter.post('/student/reset-password/:token', adminTokenDecode,resetPassword)\r\nrouter.post(\"/student/login\", adminTokenDecode, login);\r\nrouter.get(\"/student/profile\", verifyToken, getProfile);\r\nrouter.put(\"/student/editProfile\", verifyToken, editProfile);\r\nrouter.put(\"/stuednt/editpassword\", verifyToken, editPassword);\r\nrouter.post(\"/student/enroll/:courseId\", verifyToken, enrollCourse);\r\nrouter.put(\"/student/markvideoascomplete/:courseId/:videoArrId/:videoId\",verifyToken,markVideoAsComplete);\r\nrouter.get(\"/student/completedCourses\", verifyToken, completedCourses);\r\nrouter.get(\"/student/ranking\", verifyToken, topRanks);\r\nrouter.get(\"/student/progress\", verifyToken, progressController);\r\nrouter.get(\"/student/courseprogress\", verifyToken, courseProgress);\r\nrouter.get(\"/student/filter\", filter);\r\nrouter.get(\"/student/sorting\", sorting);\r\nrouter.post(\"/student/rate/:courseId/rate\", verifyToken, ratingController);\r\nrouter.post(\"/student/ask/:courseId/:videoId\", verifyToken, askQuestion);\r\nrouter.get(\"/student/topDiscuss/:courseId/:videoId\",verifyToken,topDiscussions);\r\n\r\n\r\n\r\n//Instructor Access\r\nrouter.post('/instructor/register', upload.single('profile'), adminTokenDecode, registerController)\r\nrouter.post('/instructor/login', adminTokenDecode, loginController)\r\nrouter.put('/instructor/editprofile', uploadProfilePic.single('updatedProfilePic'),instructorTokenVerify, editInstructorProfile)\r\nrouter.put('/instructor/editpassword', instructorTokenVerify, editPassword)\r\nrouter.get('/instructor/mentors', instructorTokenVerify, mentorsController)\r\nrouter.get('/instructor/discussions', instructorTokenVerify, questionsController)\r\nrouter.post('/instructor/answer/:id/:courseId', instructorTokenVerify, answerController)\r\n\r\nmodule.exports = router;\r\n"]}