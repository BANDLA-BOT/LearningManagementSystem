{"version":3,"sources":["adminAuthController.js"],"names":["jwt","require","adminModel","bcrypt","nodemailer","register","req","res","body","firstname","lastname","email","password","findOne","user","status","json","message","hashedPassword","hashSync","save","Admin","error","login","isPasswordValid","compare","token","sign","_id","process","env","ADMIN_ACCESS_KEY","expiresIn","sendOTP","admin","Message","resetToken","id","ADMIN_PASSWORD_RESET_KEY","transporter","createTestAccount","service","auth","EMAIL_USER","pass","EMAIL_PASS","secure","mailOptions","from","to","subject","text","sendEmail","info","send","verifyAndUpdate","params","newPassword","decoded","verify","userId","hash","findByIdAndUpdate","module","exports"],"mappings":"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","sourcesContent":["const jwt = require('jsonwebtoken');\r\nconst adminModel = require('../../models/users/adminModel.js')\r\nconst bcrypt = require('bcryptjs')\r\nconst nodemailer = require('nodemailer')\r\n\r\n\r\n\r\nconst register = async(req, res)=>{\r\n    const {firstname, lastname, email, password} = req.body\r\n    try {\r\n        let user = await adminModel.findOne({email});\r\n        if(user){\r\n            return res.status(200).json({message:\"User already exists with email ID\"})\r\n        }\r\n        const hashedPassword = bcrypt.hashSync(password, 10)\r\n        user = new adminModel({\r\n            firstname,\r\n            lastname,\r\n            email,\r\n            password:hashedPassword\r\n        })\r\n        await user.save()\r\n        res.status(201).json({message:\"Registered as admin\", Admin:user})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst login = async(req,res)=>{\r\n    const {email, password} = req.body\r\n    try {\r\n        const user = await adminModel.findOne({email})\r\n        if(!user){\r\n            return res.json({message:\"Invalid credentials\"})\r\n        }\r\n        const isPasswordValid = bcrypt.compare(password, user.password)\r\n        if(!isPasswordValid){\r\n            return res.json({message:\"Password is incorrect\"})\r\n        }\r\n        const token = jwt.sign({_id:user._id}, process.env.ADMIN_ACCESS_KEY, {expiresIn:\"15d\"})\r\n        res.json({message:\"Logged in Successfully \", user:user, token:token})\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\nconst sendOTP = async (req,res)=>{\r\n    try {\r\n        const { email } = req.body\r\n        const admin = await adminModel.findOne({email})\r\n        if(!admin){\r\n            return res.json({Message:\"No user exists with this email ID\"}).status(404)\r\n        }\r\n        const resetToken = jwt.sign({id:admin._id}, process.env.ADMIN_PASSWORD_RESET_KEY, {expiresIn:'10m'})\r\n        const transporter = nodemailer.createTestAccount({\r\n            service:'gmail',\r\n            auth:{\r\n                 user:process.env.EMAIL_USER,\r\n                 pass:process.env.EMAIL_PASS\r\n                },\r\n            secure:true,\r\n        })\r\n        const mailOptions = {\r\n            from:process.env.EMAIL_USER,\r\n            to:email,\r\n            subject:\"Password reset link\",\r\n            text:`Please use the following link to reset your password: http://localhost:8000/api/admin/auth/reset-password/${resetToken}`\r\n        }\r\n        transporter.sendEmail(mailOptions, (error, info)=>{\r\n            if(error){\r\n                return res.json ({Message:\"Error while sending email\"})\r\n            }\r\n            res.send('Password reset email sent to your email')\r\n        })\r\n\r\n    } catch (error) {\r\n        res.status(500).json({Message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst verifyAndUpdate = async(req,res)=>{\r\n    try {\r\n        const {token} = req.params\r\n        const { newPassword } = req.body\r\n        const decoded = jwt.verify(token, process.env.ADMIN_PASSWORD_RESET_KEY)\r\n        const userId = decoded.id\r\n        const hashedPassword = await bcrypt.hash(newPassword, 10)\r\n        await adminModel.findByIdAndUpdate(userId, {password:hashedPassword})\r\n        res.json({Message:\"Password updated successfully\"})\r\n    } catch (error) {\r\n        res.status(500).json({Message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nmodule.exports = {login, register, verifyAndUpdate, sendOTP}"],"file":"adminAuthController.dev.js"}