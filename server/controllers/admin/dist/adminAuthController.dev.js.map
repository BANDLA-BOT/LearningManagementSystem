{"version":3,"sources":["adminAuthController.js"],"names":["jwt","require","adminModel","bcrypt","register","req","res","body","firstname","lastname","email","password","findOne","user","status","json","message","hashedPassword","hashSync","save","Admin","error","login","isPasswordValid","compare","token","sign","_id","process","env","ADMIN_ACCESS_KEY","expiresIn","module","exports"],"mappings":"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","sourcesContent":["const jwt = require('jsonwebtoken');\r\nconst adminModel = require('../../models/users/adminModel.js')\r\nconst bcrypt = require('bcryptjs')\r\nconst register = async(req, res)=>{\r\n    const {firstname, lastname, email, password} = req.body\r\n    try {\r\n        let user = await adminModel.findOne({email});\r\n        if(user){\r\n            return res.status(200).json({message:\"User already exists with email ID\"})\r\n        }\r\n        const hashedPassword = bcrypt.hashSync(password, 10)\r\n        user = new adminModel({\r\n            firstname,\r\n            lastname,\r\n            email,\r\n            password:hashedPassword\r\n        })\r\n        await user.save()\r\n        res.status(201).json({message:\"Registered as admin\", Admin:user})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst login = async(req,res)=>{\r\n    const {email, password} = req.body\r\n    try {\r\n        const user = await adminModel.findOne({email})\r\n        if(!user){\r\n            return res.json({message:\"Invalid credentials\"})\r\n        }\r\n        const isPasswordValid = bcrypt.compare(password, user.password)\r\n        if(!isPasswordValid){\r\n            return res.json({message:\"Password is incorrect\"})\r\n        }\r\n        const token = jwt.sign({_id:user._id}, process.env.ADMIN_ACCESS_KEY, {expiresIn:\"15d\"})\r\n        res.json({message:\"Logged in Successfully \", user:user, token:token})\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\nmodule.exports = {login, register}"],"file":"adminAuthController.dev.js"}