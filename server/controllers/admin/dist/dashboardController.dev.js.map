{"version":3,"sources":["dashboardController.js"],"names":["courseModel","require","Instructor","student","cloudinary","v2","nodemailer","multer","adminModel","studentModel","config","cloud_name","api_key","process","env","API_KEY","api_secret","API_SECRET","dashboardController","req","res","find","Students","Courses","instructor","status","json","message","courses","students","error","searchController","query","q","$or","title","$regex","$options","Coursedata","firstname","lastname","email","InstructorData","studentsData","createCourse","body","price","description","instructorId","params","findById","create","newCourse","transporter","createTransport","service","auth","user","EMAIL_USER","pass","EMAIL_PASS","secure","mailOptions","from","to","subject","html","sendMail","info","Message","Status","uploadVideos","courseId","videoTitle","course","section","file","buffer","result","uploader","upload_stream","resource_type","err","console","push","videos","url","secure_url","save","end","resourceController","userId","filePath","destination","filename","populate","resources","acceptCourseRequest","requestId","studentId","findOne","Admin","_id","Student","enrolledList","enrolled","requests","courseRequests","Accept","id","paid","accept","coursesAvailable","module","exports"],"mappings":"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","sourcesContent":["const courseModel = require('../../models/course/courseModel.js')\r\nconst Instructor = require('../../models/users/instructorModel.js')\r\nconst student = require('../../models/users/studentModel.js')\r\nconst cloudinary = require(\"cloudinary\").v2;\r\nconst nodemailer = require('nodemailer')\r\nconst multer = require(\"multer\");\r\nconst adminModel = require('../../models/users/adminModel.js');\r\nconst studentModel = require('../../models/users/studentModel.js');\r\n\r\n\r\n//Cloudinary for videos\r\n\r\ncloudinary.config({\r\n  cloud_name: \"diqptwlqn\",\r\n  api_key: process.env.API_KEY,\r\n  api_secret: process.env.API_SECRET,\r\n});\r\n\r\n\r\nconst  dashboardController = async(req,res)=>{\r\n    try {\r\n        const Students = await student.find()\r\n        const Courses =  await courseModel.find()\r\n        const instructor = await Instructor.find()\r\n        if(!Students || !Courses || !instructor){\r\n            return res.status(404).json({message:\"Error while fetching Data\"})\r\n        }\r\n        res.status(200).json({message:\"Fetched Data\", courses:Courses, students:Students, Instructor:instructor})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst searchController = async(req,res)=>{\r\n    try {\r\n        const query = req.query.q\r\n        const Coursedata = await courseModel.find({\r\n            $or: [\r\n              { title: { $regex: query, $options: \"i\" } }\r\n            ],\r\n          })\r\n          const InstructorData = await Instructor.find({\r\n            $or: [\r\n              { firstname: { $regex: query, $options: \"i\" } },\r\n              {lastname:{ $regex: query, $options: 'i'}},\r\n              {email:{ $regex:query, $options:'i'}}\r\n            ],\r\n          })\r\n        const studentsData = await student.find({\r\n            $or: [\r\n              { firstname: { $regex: query, $options: \"i\" } },\r\n              {lastname:{ $regex: query, $options: 'i'}},\r\n              {email:{ $regex:query, $options:'i'}}\r\n            ],\r\n          })\r\n          if( !Coursedata || !studentsData || !InstructorData){\r\n                return res.status(404).json({message:\"Not found\"})\r\n          }\r\n          res.status(200).json({message:\"Results fetched\", Students:studentsData, courses:Coursedata, InstructorData:InstructorData })\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst createCourse = async (req,res)=>{\r\n    try {\r\n     const {title, price, description} = req.body\r\n     const {instructorId} = req.params\r\n     const instructor = await Instructor.findById(instructorId)\r\n     const newCourse = await courseModel.create({\r\n         title,price, description, instructor:instructorId\r\n     })\r\n     const transporter = nodemailer.createTransport({\r\n      service:'gmail',\r\n      auth:{\r\n           user:process.env.EMAIL_USER,\r\n           pass:process.env.EMAIL_PASS\r\n          },\r\n      secure:true,\r\n     })\r\n     const mailOptions = {\r\n      from:process.env.EMAIL_USER,\r\n      to:instructor.email,\r\n      subject:\"Task Added\",\r\n      html:`You have assigned to a task\r\n        <b><p>Coursename:${title}</p></b>\r\n        <b><p>Price:${price}</p></b>\r\n        <b><p>Description:${description}</p></b>\r\n      `\r\n     }\r\n     transporter.sendMail(mailOptions, (error, info)=>{\r\n      if(error){\r\n        return res.json({Message:\"Error while sending email\", error:error.message})\r\n      }\r\n      res.json({Message:\"Email sent successfully \", Status:`Task assigned succesfully to the ${instructor.email}`})\r\n     })\r\n    } catch (error) {\r\n     res.json(error.message)\r\n    }\r\n}\r\n const uploadVideos = async (req,res)=>{\r\n     try {\r\n         const {courseId} = req.params\r\n         const {title,videoTitle} = req.body\r\n         const course = await courseModel.findById(courseId)\r\n         const section = course.section\r\n         if(!req.file && !req.file.buffer){\r\n             return res.status(400).json({ error: 'No file provided in the request' });\r\n         }\r\n         const result = cloudinary.uploader.upload_stream({resource_type:'video'}, async(err, result)=>{\r\n             if (err) {\r\n                 console.error('Error uploading to Cloudinary:', err);\r\n                 return res.status(500).json({ error: 'Error uploading to Cloudinary' });\r\n               }\r\n               section.push({title:title, videos:[{title:videoTitle, url:result.secure_url}]})\r\n               await course.save()\r\n               res.status(201).json({ message: 'Video uploaded successfully', section:course.section})\r\n         }).end(req.file.buffer)\r\n     } catch (error) {\r\n         console.error('Error uploading video:', error);\r\n         res.status(500).json({ error: 'Error uploading video' });\r\n     }\r\n}\r\n const resourceController = async(req,res)=>{\r\n     try {\r\n         const { courseId } = req.params\r\n         const {title} = req.body\r\n         const userId = req.user\r\n         const filePath = `${req.file.destination}/${req.file.filename}`\r\n         const course = await courseModel.findById(courseId).populate('resources')\r\n         course.resources.push({title:title, url:filePath})\r\n         await course.save()\r\n       res.json(course)\r\n     } catch (error) {\r\n       res.json(error.message)\r\n     }\r\n}\r\nconst acceptCourseRequest = async(req,res)=>{\r\n  try {\r\n    const { requestId } = req.params\r\n    const { studentId } = req.body\r\n    const Admin = await adminModel.findOne().populate('courseRequests')\r\n    const Student = await student.findById({_id:studentId}).populate('enrolled')\r\n    const enrolledList = Student.enrolled \r\n    // console.log(Student)\r\n    if(!Student){\r\n      return res.status(404).json({Message:\"No student found with this ID\"})\r\n    }\r\n    const requests = Admin.courseRequests\r\n    const Accept = requests.id(requestId)\r\n    if(!Accept.paid){\r\n      return res.status(400).json({Message:\"User did not Paid for the course\"})\r\n    }\r\n    Accept.accept = true\r\n    enrolledList.push({\r\n      coursesAvailable:Accept.courseId\r\n    })\r\n    await Student.save()\r\n    await Admin.save()\r\n    res.status(200).json({Message:\"Course confirmed\"})\r\n\r\n  } catch (error) {\r\n    res.status(500).json({Message:\"Internal server error\", error:error.message})\r\n  }\r\n}\r\nmodule.exports = {dashboardController, searchController, createCourse, uploadVideos, resourceController, acceptCourseRequest}\r\n"],"file":"dashboardController.dev.js"}