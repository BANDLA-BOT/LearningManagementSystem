{"version":3,"sources":["dashboardController.js"],"names":["courseModel","require","Instructor","student","dashboardController","req","res","find","Students","Courses","status","json","message","courses","students","error","searchController","query","q","$or","title","$regex","$options","Coursedata","firstname","lastname","email","InstructorData","studentsData","createCourse","body","price","description","instructorId","params","CourseModel","create","instructor","newCourse","uploadVideos","courseId","videoTitle","findById","course","section","file","buffer","result","cloudinary","uploader","upload_stream","resource_type","err","console","push","videos","url","secure_url","save","end","resourceController","userId","user","filePath","destination","filename","populate","resources","module","exports"],"mappings":"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","sourcesContent":["const courseModel = require('../../models/course/courseModel.js')\r\nconst Instructor = require('../../models/users/instructorModel.js')\r\nconst student = require('../../models/users/studentModel.js')\r\n\r\nconst dashboardController = async(req,res)=>{\r\n    try {\r\n        const Students = await student.find()\r\n        const Courses =  await courseModel.find()\r\n        const Instructor = await Instructor.find()\r\n        if(!Students || !Courses || !Instructor){\r\n            return res.status(404).json({message:\"Error while fetching Data\"})\r\n        }\r\n        res.status(200).json({message:\"Fetched Data\", courses:Courses, students:Students, Instructor:Instructor})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst searchController = async(req,res)=>{\r\n    try {\r\n        const query = req.query.q\r\n        const Coursedata = await courseModel.find({\r\n            $or: [\r\n              { title: { $regex: query, $options: \"i\" } }\r\n            ],\r\n          })\r\n          const InstructorData = await Instructor.find({\r\n            $or: [\r\n              { firstname: { $regex: query, $options: \"i\" } },\r\n              {lastname:{ $regex: query, $options: 'i'}},\r\n              {email:{ $regex:query, $options:'i'}}\r\n            ],\r\n          })\r\n        const studentsData = await student.find({\r\n            $or: [\r\n              { firstname: { $regex: query, $options: \"i\" } },\r\n              {lastname:{ $regex: query, $options: 'i'}},\r\n              {email:{ $regex:query, $options:'i'}}\r\n            ],\r\n          })\r\n          if( !Coursedata || !studentsData || !InstructorData){\r\n                return res.status(404).json({message:\"Not found\"})\r\n          }\r\n          res.status(200).json({message:\"Results fetched\", Students:studentsData, courses:Coursedata, InstructorData:InstructorData })\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst createCourse = async (req,res)=>{\r\n    try {\r\n     const {title, price, description} = req.body\r\n     const {instructorId} = req.params\r\n     const newCourse = await CourseModel.create({\r\n         title,price, description, instructor:instructorId\r\n     })\r\n     res.json(newCourse)\r\n    } catch (error) {\r\n     res.json(error.message)\r\n    }\r\n }\r\n const uploadVideos = async (req,res)=>{\r\n     try {\r\n         const {courseId} = req.params\r\n         const {title,videoTitle} = req.body\r\n         const course = await CourseModel.findById(courseId)\r\n         const section = course.section\r\n         if(!req.file && !req.file.buffer){\r\n             return res.status(400).json({ error: 'No file provided in the request' });\r\n         }\r\n         const result = cloudinary.uploader.upload_stream({resource_type:'video'}, async(err, result)=>{\r\n             if (err) {\r\n                 console.error('Error uploading to Cloudinary:', err);\r\n                 return res.status(500).json({ error: 'Error uploading to Cloudinary' });\r\n               }\r\n               section.push({title:title, videos:[{title:videoTitle, url:result.secure_url}]})\r\n               await course.save()\r\n               res.status(201).json({ message: 'Video uploaded successfully', section:course.section})\r\n         }).end(req.file.buffer)\r\n     } catch (error) {\r\n         console.error('Error uploading video:', error);\r\n         res.status(500).json({ error: 'Error uploading video' });\r\n     }\r\n }\r\n const resourceController = async(req,res)=>{\r\n     try {\r\n         const { courseId } = req.params\r\n         const {title} = req.body\r\n         const userId = req.user\r\n         const filePath = `${req.file.destination}/${req.file.filename}`\r\n         const course = await CourseModel.findById(courseId).populate('resources')\r\n         course.resources.push({title:title, url:filePath})\r\n         await course.save()\r\n       res.json(course)\r\n     } catch (error) {\r\n       res.json(error.message)\r\n     }\r\n   }\r\nmodule.exports = {dashboardController, searchController, createCourse, uploadVideos, resourceController}\r\n"],"file":"dashboardController.dev.js"}