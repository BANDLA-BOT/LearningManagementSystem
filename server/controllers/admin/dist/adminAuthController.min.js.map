{"version":3,"sources":["adminAuthController.js"],"names":["jwt","require","adminModel","register","req","res","_req$body","firstname","lastname","email","password","user","hashedPassword","regeneratorRuntime","async","_context","prev","next","body","awrap","findOne","sent","abrupt","status","message","bcrypt","hashSync","save","json","Admin","t0","error","stop","_req$body2","token","_context2","compare","sign","_id","process","env","ADMIN_ACCESS_KEY","expiresIn"],"mappings":"aAAA,IAAMA,IAAMC,QAAQ,gBACdC,WAAaD,QAAQ,oCADrBD,OAAMC,QAAQ,YAGdE,SAAW,SAAMC,EAAKC,GAAX,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAX,EAFUF,EAAAc,KAArBhB,EAEWI,EAFXJ,UAAaD,EAEFK,EAFEL,SAAQQ,EAEVH,EAFUG,MAAAC,EAEVJ,EAFUI,SAEVK,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAM,MADMjB,WAAvBkB,QAAA,CAAAX,MAAAA,KACiB,KAAA,EAAA,GADLE,EACKI,EAAAM,KAAA,OAAAN,EAAAO,OAAA,SAAAjB,EAAAkB,OAAXpB,KAAiBC,KAAKC,CAAXmB,QAAA,uCAAAT,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OAOHL,EAAiBa,OAAOC,SAAShB,EAAU,IAPxCC,EAAA,IAAAT,WAAA,CAAAK,UAAAA,EAAAC,SAAAA,EAAAC,MAAAA,EAAAC,SAAAE,IAAAG,EAAAE,KAAA,GAAAJ,mBAAAM,MAAAR,EAAAgB,QAAA,KAAA,GAAAtB,EAAAkB,OAAA,KAAAK,KAAA,CAAAJ,QAAA,sBAG2BK,MAAAlB,IAH3BI,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAe,GAAAf,EAAA,MAAA,GAG2BV,EAH3BkB,OAAA,KAAAK,KAAA,CAAAJ,QAAA,wBAAAO,MAAAhB,EAAAe,GAAAN,UAAA,KAAA,GAAA,IAAA,MAAA,OAAAT,EAAAiB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAGLrB,MAHK,SAAAP,EAAAC,GAAA,IAAA4B,EAAAxB,EAAAC,EAAAC,EAAAuB,EAAA,OAAArB,mBAAAC,MAAA,SAAAqB,GAAA,OAAA,OAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,KAAA,EAAA,OAAAgB,EAqBa7B,EAAIc,KAAvBT,EArBMwB,EAqBNxB,MAAOC,EArBDuB,EAqBCvB,SArBDyB,EAAAnB,KAAA,EAAAmB,EAAAlB,KAAA,EAAAJ,mBAAAM,MAAAjB,WAAAkB,QAAA,CAAAX,MAAAA,KAAA,KAAA,EAAA,GAAAE,EAAAwB,EAAAd,KAAA,CAAAc,EAAAlB,KAAA,EAAA,MAAA,OAAAkB,EAAAb,OAAA,SAAAjB,EAAAuB,KAAA,CAAAJ,QAAA,yBAAA,KAAA,EAAA,GAAAC,OAAAW,QAKMb,EAAJZ,EAAgBiB,UALlB,CAAAO,EAAAlB,KAAA,GAAA,MAAA,OAAAkB,EAAAb,OAAA,SAAAjB,EAAAuB,KAAA,CAAAJ,QAAA,2BAAA,KAAA,GAAAU,EAAAlC,IAAAqC,KAAA,CAAAC,IAAA3B,EAAA2B,KAAAC,QAAAC,IAAAC,iBAAA,CAAAC,UAAA,QAOH9B,EAAAA,KAAAA,CAAAA,QAPG,0BAOwCD,KAPxCA,EAAAuB,MAAAA,IAAAC,EAAAlB,KAAA,GAAA,MAAA,KAAA,GAAAkB,EAAAnB,KAAA,GAAAmB,EAAAL,GAAAK,EAAA,MAAA,GAAA,KAAA,GAAA,IAAA,MAAA,OAAAA,EAAAH,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAYLtB,OAAAA,QAAAA,CAAAA,MAAAA,MAASE,SAAAA","file":"adminAuthController.min.js","sourcesContent":["const jwt = require('jsonwebtoken');\r\nconst adminModel = require('../../models/users/adminModel.js')\r\nconst bcrypt = require('bcryptjs')\r\nconst register = async(req, res)=>{\r\n    const {firstname, lastname, email, password} = req.body\r\n    try {\r\n        let user = await adminModel.findOne({email});\r\n        if(user){\r\n            return res.status(200).json({message:\"User already exists with email ID\"})\r\n        }\r\n        const hashedPassword = bcrypt.hashSync(password, 10)\r\n        user = new adminModel({\r\n            firstname,\r\n            lastname,\r\n            email,\r\n            password:hashedPassword\r\n        })\r\n        await user.save()\r\n        res.status(201).json({message:\"Registered as admin\", Admin:user})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst login = async(req,res)=>{\r\n    const {email, password} = req.body\r\n    try {\r\n        const user = await adminModel.findOne({email})\r\n        if(!user){\r\n            return res.json({message:\"Invalid credentials\"})\r\n        }\r\n        const isPasswordValid = bcrypt.compare(password, user.password)\r\n        if(!isPasswordValid){\r\n            return res.json({message:\"Password is incorrect\"})\r\n        }\r\n        const token = jwt.sign({_id:user._id}, process.env.ADMIN_ACCESS_KEY, {expiresIn:\"15d\"})\r\n        res.json({message:\"Logged in Successfully \", user:user, token:token})\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\nmodule.exports = {login, register}"]}