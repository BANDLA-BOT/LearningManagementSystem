{"version":3,"sources":["adminAuthController.js"],"names":["jwt","require","adminModel","res","req","body","firstname","lastname","email","password","findOne","user","status","json","message","hashedPassword","bcrypt","hashSync","save","error","_context","t0","login","_req$body2","token","regeneratorRuntime","async","_context2","prev","next","awrap","sent","abrupt","compare","_id","process","env","ADMIN_ACCESS_KEY","expiresIn","stop","module","exports","register"],"mappings":"aAAA,IAAMA,IAAMC,QAAQ,gBACdC,WAAaD,QAAQ,oCADrBD,OAAMC,QAAQ,YACdC,SAAaD,SAAAA,EAAQE,GAARF,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAIgCG,EAAIC,KAA5CC,EAJQL,EAIRK,UAAWC,EAJHN,EAIGM,SAAUC,EAJbP,EAIaO,MAAOC,EAJpBR,EAIoBQ,SAJpBR,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAMMC,WAAWQ,QAAQ,CAACF,MAAAA,KAN1BP,KAAAA,EAAAA,GAMPU,EANOV,EAAAA,KAAAA,OAAAA,EAAAA,OAAAA,SAGFE,EAAAS,OAAA,KAAAC,KAAA,CAAAC,QAAA,uCAHEb,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAGFc,EAAAC,OAAAC,SAAAR,EAAA,IAAAE,EAAA,IAAAT,WAAA,CAAAI,UAAAA,EAAAC,SAAAA,EAAAC,MAAAA,EAAAC,SAAAM,IAHEd,EAAAA,KAAAA,GAAAA,mBAAAA,MAGFU,EAAAO,QAHEjB,KAAAA,GAM0BO,EAAAA,OAAAA,KAAAA,KAAAA,CAAAA,QAAAA,sBAAAA,MAAAA,IAN1BP,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAoBXE,EAAIS,OAAO,KAAKC,KAAK,CAACC,QAAQ,wBAAyBK,MAAMC,EAAAC,GAAMP,UApBxDb,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OAGFqB,MAAA,SAAAlB,EAAAD,GAAA,IAAAoB,EAAAf,EAAAC,EAAAE,EAAAa,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAN,EAAAnB,EAAAC,KAAAG,EAAAe,EAAAf,MAAAC,EAAAc,EAAAd,SAAAkB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAyBU5B,WAAWQ,QAAQ,CAACF,MAAAA,KAzB9B,KAAA,EAAA,GAyBHG,EAzBGgB,EAAAI,KAAA,CAAAJ,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAK,OAAA,SAK+B7B,EAACU,KAAA,CAAAC,QAAA,yBALhC,KAAA,EAAA,GA6BeE,OAAOiB,QAAQxB,EAAUE,EAAKF,UA7B7C,CAAAkB,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAK,OAAA,SAOHjB,EAAAA,KAAiBC,CAAAA,QAAOC,2BAPrB,KAAA,GASLX,EAASN,IAATM,KAAAA,CADkB4B,IAAAvB,EAAAuB,KAAAC,QAAAC,IAAAC,iBAAA,CAAAC,UAAA,QAElB/B,EAAAA,KAAAA,CAAAA,QAAAA,0BAFkBI,KAAAA,EAAAa,MAAAA,IARbG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAN,GAAAM,EAAA,MAAA,GAAA,KAAA,GAAA,IAAA,MAAA,OAAAA,EAAAY,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAwCjBC,OAAOC,QAAU,CAACnB,MAAAA,MAAOoB,SAAAA","file":"adminAuthController.min.js","sourcesContent":["const jwt = require('jsonwebtoken');\r\nconst adminModel = require('../../models/users/adminModel.js')\r\nconst bcrypt = require('bcryptjs')\r\n\r\nconst register = async(req, res)=>{\r\n    const {firstname, lastname, email, password} = req.body\r\n    try {\r\n        let user = await adminModel.findOne({email});\r\n        if(user){\r\n            return res.status(200).json({message:\"User already exists with email ID\"})\r\n        }\r\n        const hashedPassword = bcrypt.hashSync(password, 10)\r\n        user = new adminModel({\r\n            firstname,\r\n            lastname,\r\n            email,\r\n            password:hashedPassword\r\n        })\r\n        await user.save()\r\n        res.status(201).json({message:\"Registered as admin\", Admin:user})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\n\r\n\r\nconst login = async(req,res)=>{\r\n    const {email, password} = req.body\r\n    try {\r\n        const user = await adminModel.findOne({email})\r\n        if(!user){\r\n            return res.json({message:\"Invalid credentials\"})\r\n        }\r\n        const isPasswordValid = bcrypt.compare(password, user.password)\r\n        if(!isPasswordValid){\r\n            return res.json({message:\"Password is incorrect\"})\r\n        }\r\n        const token = jwt.sign({_id:user._id}, process.env.ADMIN_ACCESS_KEY, {expiresIn:\"15d\"})\r\n        res.json({message:\"Logged in Successfully \", user:user, token:token})\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nmodule.exports = {login, register}"]}