{"version":3,"sources":["adminAuthController.js"],"names":["jwt","require","adminModel","nodemailer","register","req","res","_req$body","firstname","lastname","email","password","user","hashedPassword","regeneratorRuntime","async","_context","prev","next","body","awrap","findOne","sent","abrupt","status","json","message","bcrypt","hashSync","Admin","t0","error","stop","login","_req$body2","token","_context2","compare","_id","process","env","ADMIN_ACCESS_KEY","expiresIn","sendOTP","admin","resetToken","transporter","mailOptions","_context3","Message","sign","id","ADMIN_PASSWORD_RESET_KEY","createTestAccount","service","auth","EMAIL_USER","pass","EMAIL_PASS","from","to","subject","text","concat","sendEmail","info","send","verifyAndUpdate","newPassword","decoded","userId","_context4","params","verify","hash","findByIdAndUpdate","module","exports"],"mappings":"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","file":"adminAuthController.min.js","sourcesContent":["const jwt = require('jsonwebtoken');\r\nconst adminModel = require('../../models/users/adminModel.js')\r\nconst bcrypt = require('bcryptjs')\r\nconst nodemailer = require('nodemailer')\r\n\r\n\r\n\r\nconst register = async(req, res)=>{\r\n    const {firstname, lastname, email, password} = req.body\r\n    try {\r\n        let user = await adminModel.findOne({email});\r\n        if(user){\r\n            return res.status(200).json({message:\"User already exists with email ID\"})\r\n        }\r\n        const hashedPassword = bcrypt.hashSync(password, 10)\r\n        user = new adminModel({\r\n            firstname,\r\n            lastname,\r\n            email,\r\n            password:hashedPassword\r\n        })\r\n        await user.save()\r\n        res.status(201).json({message:\"Registered as admin\", Admin:user})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst login = async(req,res)=>{\r\n    const {email, password} = req.body\r\n    try {\r\n        const user = await adminModel.findOne({email})\r\n        if(!user){\r\n            return res.json({message:\"Invalid credentials\"})\r\n        }\r\n        const isPasswordValid = bcrypt.compare(password, user.password)\r\n        if(!isPasswordValid){\r\n            return res.json({message:\"Password is incorrect\"})\r\n        }\r\n        const token = jwt.sign({_id:user._id}, process.env.ADMIN_ACCESS_KEY, {expiresIn:\"15d\"})\r\n        res.json({message:\"Logged in Successfully \", user:user, token:token})\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\nconst sendOTP = async (req,res)=>{\r\n    try {\r\n        const { email } = req.body\r\n        const admin = await adminModel.findOne({email})\r\n        if(!admin){\r\n            return res.json({Message:\"No user exists with this email ID\"}).status(404)\r\n        }\r\n        const resetToken = jwt.sign({id:admin._id}, process.env.ADMIN_PASSWORD_RESET_KEY, {expiresIn:'10m'})\r\n        const transporter = nodemailer.createTestAccount({\r\n            service:'gmail',\r\n            auth:{\r\n                 user:process.env.EMAIL_USER,\r\n                 pass:process.env.EMAIL_PASS\r\n                },\r\n            secure:true,\r\n        })\r\n        const mailOptions = {\r\n            from:process.env.EMAIL_USER,\r\n            to:email,\r\n            subject:\"Password reset link\",\r\n            text:`Please use the following link to reset your password: http://localhost:8000/api/admin/auth/reset-password/${resetToken}`\r\n        }\r\n        transporter.sendEmail(mailOptions, (error, info)=>{\r\n            if(error){\r\n                return res.json ({Message:\"Error while sending email\"})\r\n            }\r\n            res.send('Password reset email sent to your email')\r\n        })\r\n\r\n    } catch (error) {\r\n        res.status(500).json({Message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst verifyAndUpdate = async(req,res)=>{\r\n    try {\r\n        const {token} = req.params\r\n        const { newPassword } = req.body\r\n        const decoded = jwt.verify(token, process.env.ADMIN_PASSWORD_RESET_KEY)\r\n        const userId = decoded.id\r\n        const hashedPassword = await bcrypt.hash(newPassword, 10)\r\n        await adminModel.findByIdAndUpdate(userId, {password:hashedPassword})\r\n        res.json({Message:\"Password updated successfully\"})\r\n    } catch (error) {\r\n        res.status(500).json({Message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nmodule.exports = {login, register, verifyAndUpdate, sendOTP}"]}