{"version":3,"sources":["dashboardController.js"],"names":["courseModel","require","Instructor","req","res","Students","Courses","_Instructor","regeneratorRuntime","async","_context","prev","next","awrap","student","find","sent","dashboardController","abrupt","status","json","message","courses","students","t0","error","stop","searchController","query","Coursedata","InstructorData","studentsData","_context2","q","$or","title","$regex","$options","firstname","lastname","email","createCourse","_req$body","price","description","instructorId","newCourse","_context3","body","params","CourseModel","create","instructor","uploadVideos","courseId","_req$body2","videoTitle","course","section","_context5","findById","file","buffer","cloudinary","uploader","upload_stream","resource_type","err","result","_context4","console","push","videos","url","secure_url","end","resourceController","filePath","_context6","user","concat","destination","filename","populate","resources"],"mappings":"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","file":"dashboardController.min.js","sourcesContent":["const courseModel = require('../../models/course/courseModel.js')\r\nconst Instructor = require('../../models/users/instructorModel.js')\r\nconst student = require('../../models/users/studentModel.js')\r\n\r\nconst dashboardController = async(req,res)=>{\r\n    try {\r\n        const Students = await student.find()\r\n        const Courses =  await courseModel.find()\r\n        const Instructor = await Instructor.find()\r\n        if(!Students || !Courses || !Instructor){\r\n            return res.status(404).json({message:\"Error while fetching Data\"})\r\n        }\r\n        res.status(200).json({message:\"Fetched Data\", courses:Courses, students:Students, Instructor:Instructor})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst searchController = async(req,res)=>{\r\n    try {\r\n        const query = req.query.q\r\n        const Coursedata = await courseModel.find({\r\n            $or: [\r\n              { title: { $regex: query, $options: \"i\" } }\r\n            ],\r\n          })\r\n          const InstructorData = await Instructor.find({\r\n            $or: [\r\n              { firstname: { $regex: query, $options: \"i\" } },\r\n              {lastname:{ $regex: query, $options: 'i'}},\r\n              {email:{ $regex:query, $options:'i'}}\r\n            ],\r\n          })\r\n        const studentsData = await student.find({\r\n            $or: [\r\n              { firstname: { $regex: query, $options: \"i\" } },\r\n              {lastname:{ $regex: query, $options: 'i'}},\r\n              {email:{ $regex:query, $options:'i'}}\r\n            ],\r\n          })\r\n          if( !Coursedata || !studentsData || !InstructorData){\r\n                return res.status(404).json({message:\"Not found\"})\r\n          }\r\n          res.status(200).json({message:\"Results fetched\", Students:studentsData, courses:Coursedata, InstructorData:InstructorData })\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst createCourse = async (req,res)=>{\r\n    try {\r\n     const {title, price, description} = req.body\r\n     const {instructorId} = req.params\r\n     const newCourse = await CourseModel.create({\r\n         title,price, description, instructor:instructorId\r\n     })\r\n     res.json(newCourse)\r\n    } catch (error) {\r\n     res.json(error.message)\r\n    }\r\n }\r\n const uploadVideos = async (req,res)=>{\r\n     try {\r\n         const {courseId} = req.params\r\n         const {title,videoTitle} = req.body\r\n         const course = await CourseModel.findById(courseId)\r\n         const section = course.section\r\n         if(!req.file && !req.file.buffer){\r\n             return res.status(400).json({ error: 'No file provided in the request' });\r\n         }\r\n         const result = cloudinary.uploader.upload_stream({resource_type:'video'}, async(err, result)=>{\r\n             if (err) {\r\n                 console.error('Error uploading to Cloudinary:', err);\r\n                 return res.status(500).json({ error: 'Error uploading to Cloudinary' });\r\n               }\r\n               section.push({title:title, videos:[{title:videoTitle, url:result.secure_url}]})\r\n               await course.save()\r\n               res.status(201).json({ message: 'Video uploaded successfully', section:course.section})\r\n         }).end(req.file.buffer)\r\n     } catch (error) {\r\n         console.error('Error uploading video:', error);\r\n         res.status(500).json({ error: 'Error uploading video' });\r\n     }\r\n }\r\n const resourceController = async(req,res)=>{\r\n     try {\r\n         const { courseId } = req.params\r\n         const {title} = req.body\r\n         const userId = req.user\r\n         const filePath = `${req.file.destination}/${req.file.filename}`\r\n         const course = await CourseModel.findById(courseId).populate('resources')\r\n         course.resources.push({title:title, url:filePath})\r\n         await course.save()\r\n       res.json(course)\r\n     } catch (error) {\r\n       res.json(error.message)\r\n     }\r\n   }\r\nmodule.exports = {dashboardController, searchController, createCourse, uploadVideos, resourceController}\r\n"]}