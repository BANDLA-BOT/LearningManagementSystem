{"version":3,"sources":["dashboardController.js"],"names":["courseModel","require","Instructor","cloudinary","v2","multer","student","studentModel","config","cloud_name","api_key","adminModel","api_secret","process","env","API_SECRET","req","res","Students","Courses","instructor","regeneratorRuntime","async","_context","prev","next","awrap","find","sent","abrupt","dashboardController","status","json","message","courses","students","t0","error","stop","searchController","query","Coursedata","InstructorData","studentsData","_context2","q","title","$regex","$options","firstname","lastname","email","$or","body","price","description","instructorId","params","findById","create","nodemailer","createTransport","user","EMAIL_USER","pass","EMAIL_PASS","secure","mailOptions","from","to","subject","html","concat","transporter","sendMail","info","Message","uploadVideos","courseId","_req$body2","videoTitle","course","section","_context5","file","buffer","uploader","upload_stream","resource_type","err","result","_context4","console","push","videos","url","secure_url","save","end","resourceController","filePath","_context6","destination","filename","populate","requestId","studentId","Admin","Student","enrolledList","requests","Accept","_context7","findOne","_id","enrolled","courseRequests","id","paid","accept","coursesAvailable","module","exports","createCourse","acceptCourseRequest"],"mappings":"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","file":"dashboardController.min.js","sourcesContent":["const courseModel = require('../../models/course/courseModel.js')\r\nconst Instructor = require('../../models/users/instructorModel.js')\r\nconst student = require('../../models/users/studentModel.js')\r\nconst cloudinary = require(\"cloudinary\").v2;\r\nconst nodemailer = require('nodemailer')\r\nconst multer = require(\"multer\");\r\nconst adminModel = require('../../models/users/adminModel.js');\r\nconst studentModel = require('../../models/users/studentModel.js');\r\n\r\n\r\n//Cloudinary for videos\r\n\r\ncloudinary.config({\r\n  cloud_name: \"diqptwlqn\",\r\n  api_key: process.env.API_KEY,\r\n  api_secret: process.env.API_SECRET,\r\n});\r\n\r\n\r\nconst  dashboardController = async(req,res)=>{\r\n    try {\r\n        const Students = await student.find()\r\n        const Courses =  await courseModel.find()\r\n        const instructor = await Instructor.find()\r\n        if(!Students || !Courses || !instructor){\r\n            return res.status(404).json({message:\"Error while fetching Data\"})\r\n        }\r\n        res.status(200).json({message:\"Fetched Data\", courses:Courses, students:Students, Instructor:instructor})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst searchController = async(req,res)=>{\r\n    try {\r\n        const query = req.query.q\r\n        const Coursedata = await courseModel.find({\r\n            $or: [\r\n              { title: { $regex: query, $options: \"i\" } }\r\n            ],\r\n          })\r\n          const InstructorData = await Instructor.find({\r\n            $or: [\r\n              { firstname: { $regex: query, $options: \"i\" } },\r\n              {lastname:{ $regex: query, $options: 'i'}},\r\n              {email:{ $regex:query, $options:'i'}}\r\n            ],\r\n          })\r\n        const studentsData = await student.find({\r\n            $or: [\r\n              { firstname: { $regex: query, $options: \"i\" } },\r\n              {lastname:{ $regex: query, $options: 'i'}},\r\n              {email:{ $regex:query, $options:'i'}}\r\n            ],\r\n          })\r\n          if( !Coursedata || !studentsData || !InstructorData){\r\n                return res.status(404).json({message:\"Not found\"})\r\n          }\r\n          res.status(200).json({message:\"Results fetched\", Students:studentsData, courses:Coursedata, InstructorData:InstructorData })\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst createCourse = async (req,res)=>{\r\n    try {\r\n     const {title, price, description} = req.body\r\n     const {instructorId} = req.params\r\n     const instructor = await Instructor.findById(instructorId)\r\n     const newCourse = await courseModel.create({\r\n         title,price, description, instructor:instructorId\r\n     })\r\n     const transporter = nodemailer.createTransport({\r\n      service:'gmail',\r\n      auth:{\r\n           user:process.env.EMAIL_USER,\r\n           pass:process.env.EMAIL_PASS\r\n          },\r\n      secure:true,\r\n     })\r\n     const mailOptions = {\r\n      from:process.env.EMAIL_USER,\r\n      to:instructor.email,\r\n      subject:\"Task Added\",\r\n      html:`You have assigned to a task\r\n        <b><p>Coursename:${title}</p></b>\r\n        <b><p>Price:${price}</p></b>\r\n        <b><p>Description:${description}</p></b>\r\n      `\r\n     }\r\n     transporter.sendMail(mailOptions, (error, info)=>{\r\n      if(error){\r\n        return res.json({Message:\"Error while sending email\", error:error.message})\r\n      }\r\n      res.json({Message:\"Email sent successfully \", Status:`Task assigned succesfully to the ${instructor.email}`})\r\n     })\r\n    } catch (error) {\r\n     res.json(error.message)\r\n    }\r\n}\r\n const uploadVideos = async (req,res)=>{\r\n     try {\r\n         const {courseId} = req.params\r\n         const {title,videoTitle} = req.body\r\n         const course = await courseModel.findById(courseId)\r\n         const section = course.section\r\n         if(!req.file && !req.file.buffer){\r\n             return res.status(400).json({ error: 'No file provided in the request' });\r\n         }\r\n         const result = cloudinary.uploader.upload_stream({resource_type:'video'}, async(err, result)=>{\r\n             if (err) {\r\n                 console.error('Error uploading to Cloudinary:', err);\r\n                 return res.status(500).json({ error: 'Error uploading to Cloudinary' });\r\n               }\r\n               section.push({title:title, videos:[{title:videoTitle, url:result.secure_url}]})\r\n               await course.save()\r\n               res.status(201).json({ message: 'Video uploaded successfully', section:course.section})\r\n         }).end(req.file.buffer)\r\n     } catch (error) {\r\n         console.error('Error uploading video:', error);\r\n         res.status(500).json({ error: 'Error uploading video' });\r\n     }\r\n}\r\n const resourceController = async(req,res)=>{\r\n     try {\r\n         const { courseId } = req.params\r\n         const {title} = req.body\r\n         const userId = req.user\r\n         const filePath = `${req.file.destination}/${req.file.filename}`\r\n         const course = await courseModel.findById(courseId).populate('resources')\r\n         course.resources.push({title:title, url:filePath})\r\n         await course.save()\r\n       res.json(course)\r\n     } catch (error) {\r\n       res.json(error.message)\r\n     }\r\n}\r\nconst acceptCourseRequest = async(req,res)=>{\r\n  try {\r\n    const { requestId } = req.params\r\n    const { studentId } = req.body\r\n    const Admin = await adminModel.findOne().populate('courseRequests')\r\n    const Student = await student.findById({_id:studentId}).populate('enrolled')\r\n    const enrolledList = Student.enrolled \r\n    // console.log(Student)\r\n    if(!Student){\r\n      return res.status(404).json({Message:\"No student found with this ID\"})\r\n    }\r\n    const requests = Admin.courseRequests\r\n    const Accept = requests.id(requestId)\r\n    if(!Accept.paid){\r\n      return res.status(400).json({Message:\"User did not Paid for the course\"})\r\n    }\r\n    Accept.accept = true\r\n    enrolledList.push({\r\n      coursesAvailable:Accept.courseId\r\n    })\r\n    await Student.save()\r\n    await Admin.save()\r\n    res.status(200).json({Message:\"Course confirmed\"})\r\n\r\n  } catch (error) {\r\n    res.status(500).json({Message:\"Internal server error\", error:error.message})\r\n  }\r\n}\r\nmodule.exports = {dashboardController, searchController, createCourse, uploadVideos, resourceController, acceptCourseRequest}\r\n"]}