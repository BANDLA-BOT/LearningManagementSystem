{"version":3,"sources":["dashboardController.js"],"names":["courseModel","require","Instructor","cloudinary","v2","multer","config","cloud_name","api_key","process","env","API_KEY","api_secret","API_SECRET","dashboardController","req","res","Students","Courses","instructor","regeneratorRuntime","async","_context","prev","next","awrap","student","find","sent","abrupt","status","json","message","courses","students","t0","error","stop","searchController","query","Coursedata","InstructorData","studentsData","_context2","q","$or","$regex","$options","lastname","email","firstname","_req$body","title","price","description","instructorId","transporter","mailOptions","_context3","body","params","findById","create","nodemailer","createTransport","EMAIL_USER","pass","EMAIL_PASS","secure","from","to","subject","html","concat","sendMail","info","Message","Status","uploadVideos","courseId","_req$body2","videoTitle","course","section","_context5","file","buffer","uploader","upload_stream","resource_type","err","result","_context4","push","videos","url","secure_url","end","resourceController","filePath","_context6","user","destination","filename","populate","resources","createCourse"],"mappings":"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","file":"dashboardController.min.js","sourcesContent":["const courseModel = require('../../models/course/courseModel.js')\r\nconst Instructor = require('../../models/users/instructorModel.js')\r\nconst student = require('../../models/users/studentModel.js')\r\nconst cloudinary = require(\"cloudinary\").v2;\r\nconst nodemailer = require('nodemailer')\r\nconst multer = require(\"multer\");\r\n\r\n\r\n//Cloudinary for videos\r\ncloudinary.config({\r\n  cloud_name: \"diqptwlqn\",\r\n  api_key: process.env.API_KEY,\r\n  api_secret: process.env.API_SECRET,\r\n});\r\nconst dashboardController = async(req,res)=>{\r\n    try {\r\n        const Students = await student.find()\r\n        const Courses =  await courseModel.find()\r\n        const instructor = await Instructor.find()\r\n        if(!Students || !Courses || !instructor){\r\n            return res.status(404).json({message:\"Error while fetching Data\"})\r\n        }\r\n        res.status(200).json({message:\"Fetched Data\", courses:Courses, students:Students, Instructor:instructor})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst searchController = async(req,res)=>{\r\n    try {\r\n        const query = req.query.q\r\n        const Coursedata = await courseModel.find({\r\n            $or: [\r\n              { title: { $regex: query, $options: \"i\" } }\r\n            ],\r\n          })\r\n          const InstructorData = await Instructor.find({\r\n            $or: [\r\n              { firstname: { $regex: query, $options: \"i\" } },\r\n              {lastname:{ $regex: query, $options: 'i'}},\r\n              {email:{ $regex:query, $options:'i'}}\r\n            ],\r\n          })\r\n        const studentsData = await student.find({\r\n            $or: [\r\n              { firstname: { $regex: query, $options: \"i\" } },\r\n              {lastname:{ $regex: query, $options: 'i'}},\r\n              {email:{ $regex:query, $options:'i'}}\r\n            ],\r\n          })\r\n          if( !Coursedata || !studentsData || !InstructorData){\r\n                return res.status(404).json({message:\"Not found\"})\r\n          }\r\n          res.status(200).json({message:\"Results fetched\", Students:studentsData, courses:Coursedata, InstructorData:InstructorData })\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst createCourse = async (req,res)=>{\r\n    try {\r\n     const {title, price, description} = req.body\r\n     const {instructorId} = req.params\r\n     const instructor = await Instructor.findById(instructorId)\r\n     const newCourse = await courseModel.create({\r\n         title,price, description, instructor:instructorId\r\n     })\r\n     const transporter = nodemailer.createTransport({\r\n      service:'gmail',\r\n      auth:{\r\n           user:process.env.EMAIL_USER,\r\n           pass:process.env.EMAIL_PASS\r\n          },\r\n      secure:true,\r\n     })\r\n     const mailOptions = {\r\n      from:process.env.EMAIL_USER,\r\n      to:instructor.email,\r\n      subject:\"Task Added\",\r\n      html:`You have assigned to a task\r\n        <b><p>Coursename:${title}</p></b>\r\n        <b><p>Price:${price}</p></b>\r\n        <b><p>Description:${description}</p></b>\r\n      `\r\n     }\r\n     transporter.sendMail(mailOptions, (error, info)=>{\r\n      if(error){\r\n        return res.json({Message:\"Error while sending email\", error:error.message})\r\n      }\r\n      res.json({Message:\"Email sent successfully \", Status:`Task assigned succesfully to the ${instructor.email}`})\r\n     })\r\n    } catch (error) {\r\n     res.json(error.message)\r\n    }\r\n }\r\n const uploadVideos = async (req,res)=>{\r\n     try {\r\n         const {courseId} = req.params\r\n         const {title,videoTitle} = req.body\r\n         const course = await courseModel.findById(courseId)\r\n         const section = course.section\r\n         if(!req.file && !req.file.buffer){\r\n             return res.status(400).json({ error: 'No file provided in the request' });\r\n         }\r\n         const result = cloudinary.uploader.upload_stream({resource_type:'video'}, async(err, result)=>{\r\n             if (err) {\r\n                 console.error('Error uploading to Cloudinary:', err);\r\n                 return res.status(500).json({ error: 'Error uploading to Cloudinary' });\r\n               }\r\n               section.push({title:title, videos:[{title:videoTitle, url:result.secure_url}]})\r\n               await course.save()\r\n               res.status(201).json({ message: 'Video uploaded successfully', section:course.section})\r\n         }).end(req.file.buffer)\r\n     } catch (error) {\r\n         console.error('Error uploading video:', error);\r\n         res.status(500).json({ error: 'Error uploading video' });\r\n     }\r\n }\r\n const resourceController = async(req,res)=>{\r\n     try {\r\n         const { courseId } = req.params\r\n         const {title} = req.body\r\n         const userId = req.user\r\n         const filePath = `${req.file.destination}/${req.file.filename}`\r\n         const course = await courseModel.findById(courseId).populate('resources')\r\n         course.resources.push({title:title, url:filePath})\r\n         await course.save()\r\n       res.json(course)\r\n     } catch (error) {\r\n       res.json(error.message)\r\n     }\r\n   }\r\nmodule.exports = {dashboardController, searchController, createCourse, uploadVideos, resourceController}\r\n"]}