{"version":3,"sources":["authController.js"],"names":["Student","require","jwt","config","bcrypt","twilio","register","req","res","body","email","firstname","lastname","password","imgPath","file","destination","filename","findOne","user","json","message","hashedPassword","hashSync","newUser","profilepic","save","status","Message","Error","login","existUser","isPasswordMatch","compareSync","token","sign","id","_id","process","env","JWT_SECRET_KEY","expiresIn","student","Token","sendOtp","find","otp","numbers","len","length","i","Math","floor","random","accountSid","authToken","forgotPassword","console","log","cookies","error","module","exports"],"mappings":"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","sourcesContent":["const Student = require(\"../../models/users/studentModel.js\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nrequire(\"dotenv\").config();\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst twilio = require('twilio')\r\n\r\n//Register Controller\r\n\r\nconst register = async (req, res) => {\r\n  try {\r\n    const { email, firstname, lastname, password } = req.body;\r\n    const imgPath = `${req.file.destination}/${req.file.filename}`;\r\n    const user = await Student.findOne({ email: email });\r\n    if (user) {\r\n      return res.json({ message: \"User already exists with the email ID\" });\r\n    }\r\n    const hashedPassword = bcrypt.hashSync(password, 10);\r\n    const newUser = new Student({\r\n      email,\r\n      firstname,\r\n      lastname,\r\n      password: hashedPassword,\r\n      profilepic: imgPath,\r\n    });\r\n    await newUser.save();\r\n    res\r\n      .status(201)\r\n      .json({ Message: \"Student registered successfully\", Student: newUser });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n\r\n//Login Controller\r\n\r\nconst login = async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const existUser = await Student.findOne({\r\n      email: email,\r\n      password: password,\r\n    });\r\n    if (!existUser) {\r\n      return res.json({ message: \"User doesn't exists\" });\r\n    }\r\n    const isPasswordMatch = bcrypt.compareSync(password, existUser.password);\r\n    if (!isPasswordMatch) {\r\n      return res.json({ message: \"Passwords did not match\" });\r\n    }\r\n    const token = jwt.sign({ id: existUser._id }, process.env.JWT_SECRET_KEY, {\r\n      expiresIn: \"15d\",\r\n    });\r\n    res\r\n      .status(200)\r\n      .json({\r\n        message: \"Student logged in successfully\",\r\n        student: existUser,\r\n        Token: token,\r\n      });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst sendOtp = async (req, res) => {\r\n  try {\r\n    const { email } = req.body;\r\n\r\n    const student = await Student.find({ email });\r\n    if (!student) {\r\n      return res\r\n        .status(404)\r\n        .json({ message: \"No user found with this email ID\" });\r\n    } else {\r\n      let otp = \"\";\r\n      let numbers = \"1234567890\";\r\n      let len = numbers.length;\r\n      for (let i = 0; i < 6; i++) {\r\n        otp += numbers[Math.floor(Math.random() * len)];\r\n      }\r\n      const accountSid = 'USad386f4438ea7568b38b822db298048b'\r\n      const authToken = \"\"\r\n    }\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst forgotPassword = async (req, res) => {\r\n  try {\r\n    console.log(req.cookies)\r\n  } catch (error) {\r\n    res.json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  register,\r\n  login,\r\n  sendOtp,\r\n  forgotPassword,\r\n};\r\n"],"file":"authController.dev.js"}