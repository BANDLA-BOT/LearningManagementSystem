{"version":3,"sources":["authController.js"],"names":["Student","require","jwt","bcrypt","nodemailer","register","req","res","body","email","firstname","lastname","password","imgPath","file","destination","filename","findOne","user","json","message","newUser","profilepic","save","status","Message","Error","login","existUser","token","sign","id","_id","process","env","JWT_SECRET_KEY","expiresIn","student","Token","otpStore","Map","sendOtp","otp","Math","floor","random","toString","otpExpiry","Date","now","set","expires","console","log","transporter","createTransport","service","auth","EMAIL_USER","pass","EMAIL_PASS","mailOptions","from","to","subject","text","sendMail","error","info","verifyOTP","storedOtp","get","forgotPassword","newPassword","module","exports"],"mappings":"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","sourcesContent":["const Student = require(\"../../models/users/studentModel.js\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst nodemailer   = require('nodemailer')\r\n\r\n//Register Controller\r\nconst register = async (req, res) => {\r\n  try {\r\n    const { email, firstname, lastname, password } = req.body;\r\n    const imgPath = `${req.file.destination}/${req.file.filename}`;\r\n    const user = await Student.findOne({ email: email });\r\n    if (user) {\r\n      return res.json({ message: \"User already exists with the email ID\" });\r\n    }\r\n    \r\n    const newUser = new Student({\r\n      email,\r\n      firstname,\r\n      lastname,\r\n      password:password,\r\n      profilepic: imgPath,\r\n    });\r\n    await newUser.save();\r\n    res\r\n      .status(201)\r\n      .json({ Message: \"Student registered successfully\", Student: newUser });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n//Login Controller\r\nconst login = async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const existUser = await Student.findOne({\r\n      email: email,\r\n      password: password,\r\n    });\r\n    if (!existUser) {\r\n      return res.json({ message: \"User doesn't exists\" });\r\n    }\r\n    if (password !== existUser.password) {\r\n      return res.json({ message: \"Passwords did not match\" });\r\n    }\r\n    const token = jwt.sign({ id: existUser._id }, process.env.JWT_SECRET_KEY, {\r\n      expiresIn: \"15d\",\r\n    });\r\n    res\r\n      .status(200)\r\n      .json({\r\n        message: \"Student logged in successfully\",\r\n        student: existUser,\r\n        Token: token,\r\n      });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst otpStore = new Map()\r\nconst sendOtp = async (req, res) => {\r\n  const {email} = req.body\r\n  try {\r\n    const student = await Student.findOne({ email });\r\n    if (!student) {\r\n        return res.status(404).json({ message: 'Student not found' });\r\n    }\r\n    const otp = Math.floor(100000 + Math.random() * 900000).toString();\r\n    const otpExpiry = Date.now() + 300000; \r\n    otpStore.set(email, { otp, expires: otpExpiry });\r\n    console.log(otpStore)\r\n\r\n    const transporter = nodemailer.createTransport({\r\n      service: 'gmail',\r\n      auth: {\r\n          user:process.env.EMAIL_USER,\r\n          pass:process.env.EMAIL_PASS\r\n      }\r\n  });\r\n\r\n  const mailOptions = {\r\n      from: process.env.EMAIL_USER,\r\n      to: email,\r\n      subject: 'OTP for resetting Password',\r\n      text: `Your OTP code is ${otp}. It will expire in 5 minutes.`\r\n  };\r\n  transporter.sendMail(mailOptions, (error, info) => {\r\n    if (error) {\r\n        return res.status(500).json({ message: 'Error sending email', error , info:info});\r\n    }\r\n    res.json({ message: 'OTP sent' ,});\r\n});\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Server error', error });\r\n  }\r\n};\r\nconst verifyOTP = async(req,res)=>{\r\n  const { email, otp } = req.body;\r\n    \r\n  const storedOtp = otpStore.get(email);\r\n  console.log(storedOtp)\r\n  if (!storedOtp) {\r\n      return res.status(400).json({ message: 'No OTP found for this email' });\r\n  }\r\n\r\n  if (storedOtp.otp === otp && storedOtp.expires > Date.now()) {\r\n      return res.json({ message: 'OTP verified' });\r\n  } else {\r\n      return res.status(400).json({ message: 'Invalid or expired OTP' });\r\n  }\r\n}\r\nconst forgotPassword = async (req, res) => {\r\n  const { email, newPassword } = req.body;\r\n    \r\n    try {\r\n        const student = await Student.findOne({ email });\r\n        if (!student) {\r\n            return res.status(404).json({ message: 'Student not found' });\r\n        }\r\n\r\n        const storedOtp = otpStore.get(email);\r\n\r\n        if (!storedOtp) {\r\n            return res.status(400).json({ message: 'No OTP found for this email' });\r\n        }\r\n\r\n        student.password = newPassword;\r\n        await student.save();\r\n        otpStore.delete(email);\r\n        return res.json({ message: 'Password changed successfully' });\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Server error', error });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n  register,\r\n  login,\r\n  sendOtp,\r\n  forgotPassword,\r\n  verifyOTP\r\n};\r\n"],"file":"authController.dev.js"}