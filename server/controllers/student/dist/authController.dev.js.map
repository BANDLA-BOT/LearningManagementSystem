{"version":3,"sources":["authController.js"],"names":["Student","require","jwt","bcrypt","nodemailer","register","req","res","body","email","firstname","lastname","password","imgPath","file","destination","filename","findOne","user","json","message","salt","hashedPassword","hashSync","newUser","profilepic","save","status","Message","console","log","Error","login","existUser","isValidPassword","compareSync","token","sign","id","_id","process","env","JWT_SECRET_KEY","expiresIn","student","Token","resetPasswordLink","resetToken","JWT_SECRET_KEY_FOR_RESET_PASSWORD_LINK","transporter","createTransport","service","auth","EMAIL_USER","pass","EMAIL_PASS","mailOptions","from","to","subject","text","sendMail","error","info","send","resetPassword","params","newPassword","decoded","verify","userId","hash","findByIdAndUpdate","module","exports"],"mappings":"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","sourcesContent":["const Student = require(\"../../models/users/studentModel.js\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst nodemailer   = require('nodemailer')\r\n\r\n//Register Controller\r\nconst register = async (req, res) => {\r\n  try {\r\n    const { email, firstname, lastname, password } = req.body;\r\n    const imgPath = `${req.file.destination}/${req.file.filename}`;\r\n    const user = await Student.findOne({ email: email });\r\n    if (user) {\r\n      return res.json({ message: \"User already exists with the email ID\" });\r\n    }\r\n    const salt = 12\r\n   const hashedPassword = bcrypt.hashSync(password, salt)\r\n   \r\n    const newUser = new Student({\r\n      email,\r\n      firstname,\r\n      lastname,\r\n      password:hashedPassword,\r\n      profilepic: imgPath,\r\n    });\r\n    await newUser.save();\r\n    res\r\n      .status(201)\r\n      .json({ Message: \"Student registered successfully\", Student: newUser , register:true});\r\n  } catch (error) {\r\n    console.log(error)\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n//Login Controller\r\nconst login = async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    console.log(email, password)\r\n    const existUser = await Student.findOne({\r\n      email: email,\r\n    });\r\n    if (!existUser) {\r\n      return res.json({ message: \"User doesn't exists\" });\r\n    }\r\n    const isValidPassword = bcrypt.compareSync(password, existUser.password)\r\n    if (!isValidPassword) {\r\n      return res.json({ message: \"Password incorrect\"});\r\n    }\r\n    const token = jwt.sign({ id: existUser._id }, process.env.JWT_SECRET_KEY, {\r\n      expiresIn: \"15d\",\r\n    });\r\n    res\r\n      .status(200)\r\n      .json({\r\n        message: \"Student logged in successfully\",\r\n        student: existUser,\r\n        Token: token,\r\n        login:true\r\n      });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst resetPasswordLink = async (req, res) => {\r\n  const { email } = req.body\r\n  const student = await Student.findOne({email});\r\n  if(!student){\r\n    return res.status(404).json({message:\"User not found\"})\r\n  }\r\n  const resetToken = jwt.sign({id:student._id}, process.env.JWT_SECRET_KEY_FOR_RESET_PASSWORD_LINK, {expiresIn:'10m'});\r\n\r\n  const transporter = nodemailer.createTransport({\r\n    service:'gmail',\r\n    auth:{\r\n      user:process.env.EMAIL_USER,\r\n      pass:process.env.EMAIL_PASS\r\n    },\r\n  });\r\n  const mailOptions = {\r\n    from:process.env.EMAIL_USER,\r\n    to:email,\r\n    subject:'Password reset Link',\r\n    text:`Please use the following link to reset your password: http://localhost:8000/api/student/auth/reset-password/${resetToken}`\r\n  }\r\n  transporter.sendMail(mailOptions, (error, info) => {\r\n    if (error) {\r\n      return res.status(500).send('Error sending email');\r\n    }\r\n    res.send('Password reset email sent');\r\n  });\r\n}\r\nconst resetPassword = async(req,res)=>{\r\n  const {token} = req.params\r\n  const { newPassword } = req.body;\r\n  try {\r\n    const decoded = jwt.verify(token, process.env.JWT_SECRET_KEY_FOR_RESET_PASSWORD_LINK)\r\n    const userId = decoded.id\r\n    const hashedPassword = await bcrypt.hash(newPassword, 10)\r\n    await Student.findByIdAndUpdate(userId,{password:hashedPassword})\r\n    res.json({Message:\"Password updated successfully\"});\r\n  } catch (error) {\r\n    res.status(400).send('Invalid or expired token')\r\n  }\r\n}\r\nmodule.exports = {\r\n  register,\r\n  login,\r\n  resetPasswordLink,\r\n  resetPassword,\r\n};\r\n"],"file":"authController.dev.js"}