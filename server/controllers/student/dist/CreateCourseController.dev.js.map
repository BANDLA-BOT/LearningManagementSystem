{"version":3,"sources":["CreateCourseController.js"],"names":["CourseModel","require","multer","cloudinary","v2","path","createCourse","req","res","body","title","price","description","create","newCourse","json","message","uploadVideos","courseId","params","videoTitle","findById","course","section","file","buffer","status","error","result","uploader","upload_stream","resource_type","err","console","push","videos","url","secure_url","save","end","module","exports"],"mappings":"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","sourcesContent":["const CourseModel = require('../../models/course/courseModel.js')\r\nconst multer = require('multer')\r\nconst cloudinary = require('cloudinary').v2\r\nconst path = require('path')\r\n\r\nconst createCourse = async (req,res)=>{\r\n   try {\r\n    const {title, price, description} = req.body\r\n    const newCourse = await CourseModel.create({\r\n        title,price, description\r\n    })\r\n    res.json(newCourse)\r\n   } catch (error) {\r\n    res.json(error.message)\r\n   }\r\n}\r\nconst uploadVideos = async (req,res)=>{\r\n    try {\r\n        const {courseId} = req.params\r\n        const {title,videoTitle} = req.body\r\n        const course = await CourseModel.findById(courseId)\r\n        const section = course.section\r\n        if(!req.file && !req.file.buffer){\r\n            return res.status(400).json({ error: 'No file provided in the request' });\r\n        }\r\n        const result = cloudinary.uploader.upload_stream({resource_type:'video'}, async(err, result)=>{\r\n            if (err) {\r\n                console.error('Error uploading to Cloudinary:', err);\r\n                return res.status(500).json({ error: 'Error uploading to Cloudinary' });\r\n              }\r\n              section.push({title:title, videos:[{title:videoTitle, url:result.secure_url}]})\r\n              await course.save()\r\n              res.status(201).json({ message: 'Video uploaded successfully', section:course.section})\r\n        }).end(req.file.buffer)\r\n    } catch (error) {\r\n        console.error('Error uploading video:', error);\r\n        res.status(500).json({ error: 'Error uploading video' });\r\n    }\r\n}\r\n\r\nmodule.exports = {createCourse, uploadVideos}"],"file":"CreateCourseController.dev.js"}