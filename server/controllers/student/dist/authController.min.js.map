{"version":3,"sources":["authController.js"],"names":["Student","require","jwt","bcrypt","req","res","body","email","lastname","password","imgPath","file","destination","filename","findOne","json","message","hashedPassword","hashSync","newUser","firstname","save","status","Message","user","Error","_context","t0","existUser","token","sign","id","_id","process","env","JWT_SECRET_KEY","expiresIn","student","Token","_context2","sendOtp","numbers","len","i","regeneratorRuntime","async","_context3","prev","next","awrap","find","sent","abrupt","length","Math","floor","random","stop","forgotPassword","_context4","console","log","cookies","error","module","exports","login"],"mappings":"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","file":"authController.min.js","sourcesContent":["const Student = require(\"../../models/users/studentModel.js\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nrequire(\"dotenv\").config();\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst twilio = require('twilio')\r\n\r\n//Register Controller\r\n\r\nconst register = async (req, res) => {\r\n  try {\r\n    const { email, firstname, lastname, password } = req.body;\r\n    const imgPath = `${req.file.destination}/${req.file.filename}`;\r\n    const user = await Student.findOne({ email: email });\r\n    if (user) {\r\n      return res.json({ message: \"User already exists with the email ID\" });\r\n    }\r\n    const hashedPassword = bcrypt.hashSync(password, 10);\r\n    const newUser = new Student({\r\n      email,\r\n      firstname,\r\n      lastname,\r\n      password: hashedPassword,\r\n      profilepic: imgPath,\r\n    });\r\n    await newUser.save();\r\n    res\r\n      .status(201)\r\n      .json({ Message: \"Student registered successfully\", Student: newUser });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n\r\n//Login Controller\r\n\r\nconst login = async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const existUser = await Student.findOne({\r\n      email: email,\r\n      password: password,\r\n    });\r\n    if (!existUser) {\r\n      return res.json({ message: \"User doesn't exists\" });\r\n    }\r\n    const isPasswordMatch = bcrypt.compareSync(password, existUser.password);\r\n    if (!isPasswordMatch) {\r\n      return res.json({ message: \"Passwords did not match\" });\r\n    }\r\n    const token = jwt.sign({ id: existUser._id }, process.env.JWT_SECRET_KEY, {\r\n      expiresIn: \"15d\",\r\n    });\r\n    res\r\n      .status(200)\r\n      .json({\r\n        message: \"Student logged in successfully\",\r\n        student: existUser,\r\n        Token: token,\r\n      });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst sendOtp = async (req, res) => {\r\n  try {\r\n    const { email } = req.body;\r\n\r\n    const student = await Student.find({ email });\r\n    if (!student) {\r\n      return res\r\n        .status(404)\r\n        .json({ message: \"No user found with this email ID\" });\r\n    } else {\r\n      let otp = \"\";\r\n      let numbers = \"1234567890\";\r\n      let len = numbers.length;\r\n      for (let i = 0; i < 6; i++) {\r\n        otp += numbers[Math.floor(Math.random() * len)];\r\n      }\r\n      const accountSid = 'USad386f4438ea7568b38b822db298048b'\r\n      const authToken = \"\"\r\n    }\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst forgotPassword = async (req, res) => {\r\n  try {\r\n    console.log(req.cookies)\r\n  } catch (error) {\r\n    res.json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  register,\r\n  login,\r\n  sendOtp,\r\n  forgotPassword,\r\n};\r\n"]}