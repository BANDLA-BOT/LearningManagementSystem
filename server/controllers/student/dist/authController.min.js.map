{"version":3,"sources":["authController.js"],"names":["Student","require","jwt","nodemailer","bcrypt","req","res","body","lastname","password","imgPath","file","destination","filename","findOne","email","json","message","hashedPassword","hashSync","newUser","firstname","profilepic","save","status","Message","register","Error","_context","t0","login","_req$body2","existUser","token","regeneratorRuntime","async","_context2","prev","next","console","log","awrap","sent","abrupt","sign","id","env","JWT_SECRET_KEY","expiresIn","student","Token","stop","resetPasswordLink","resetToken","transporter","mailOptions","_context3","_id","process","JWT_SECRET_KEY_FOR_RESET_PASSWORD_LINK","createTransport","service","auth","pass","EMAIL_PASS","from","EMAIL_USER","to","subject","text","concat","sendMail","error","info","send","resetPassword","newPassword","decoded","userId","_context4","verify","hash","module","exports","isValidPassword"],"mappings":"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","file":"authController.min.js","sourcesContent":["const Student = require(\"../../models/users/studentModel.js\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst nodemailer   = require('nodemailer')\r\n\r\n//Register Controller\r\nconst register = async (req, res) => {\r\n  try {\r\n    const { email, firstname, lastname, password } = req.body;\r\n    const imgPath = `${req.file.destination}/${req.file.filename}`;\r\n    const user = await Student.findOne({ email: email });\r\n    if (user) {\r\n      return res.json({ message: \"User already exists with the email ID\" });\r\n    }\r\n    \r\n    const hashedPassword = bcrypt.hashSync(password, 10)\r\n    const newUser = new Student({\r\n      email,\r\n      firstname,\r\n      lastname,\r\n      password:hashedPassword,\r\n      profilepic: imgPath,\r\n    });\r\n    await newUser.save();\r\n    res\r\n      .status(201)\r\n      .json({ Message: \"Student registered successfully\", Student: newUser , register:true});\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n//Login Controller\r\nconst login = async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    console.log(email, password)\r\n    const existUser = await Student.findOne({\r\n      email: email,\r\n    });\r\n    if (!existUser) {\r\n      return res.json({ message: \"User doesn't exists\" });\r\n    }\r\n    const isValidPassword = bcrypt.compareSync(password, existUser.password)\r\n    if (!isValidPassword) {\r\n      return res.json({ message: \"Password incorrect\"});\r\n    }\r\n    const token = jwt.sign({ id: existUser._id }, process.env.JWT_SECRET_KEY, {\r\n      expiresIn: \"15d\",\r\n    });\r\n    res\r\n      .status(200)\r\n      .json({\r\n        message: \"Student logged in successfully\",\r\n        student: existUser,\r\n        Token: token,\r\n        login:true\r\n      });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst resetPasswordLink = async (req, res) => {\r\n  const { email } = req.body\r\n  const student = await Student.findOne({email});\r\n  if(!student){\r\n    return res.status(404).json({message:\"User not found\"})\r\n  }\r\n  const resetToken = jwt.sign({id:student._id}, process.env.JWT_SECRET_KEY_FOR_RESET_PASSWORD_LINK, {expiresIn:'10m'});\r\n\r\n  const transporter = nodemailer.createTransport({\r\n    service:'gmail',\r\n    auth:{\r\n      user:process.env.EMAIL_USER,\r\n      pass:process.env.EMAIL_PASS\r\n    },\r\n  });\r\n  const mailOptions = {\r\n    from:process.env.EMAIL_USER,\r\n    to:email,\r\n    subject:'Password reset Link',\r\n    text:`Please use the following link to reset your password: http://localhost:8000/reset-password/${resetToken}`\r\n  }\r\n  transporter.sendMail(mailOptions, (error, info) => {\r\n    if (error) {\r\n      return res.status(500).send('Error sending email');\r\n    }\r\n    res.send('Password reset email sent');\r\n  });\r\n}\r\nconst resetPassword = async(req,res)=>{\r\n  const {token} = req.params\r\n  const { newPassword } = req.body;\r\n  try {\r\n    const decoded = jwt.verify(token, process.env.JWT_SECRET_KEY_FOR_RESET_PASSWORD_LINK)\r\n    const userId = decoded.id\r\n    const hashedPassword = await bcrypt.hash(newPassword, 10)\r\n    await Student.findByIdAndUpdate(userId,{password:hashedPassword})\r\n    res.json({Message:\"Password updated successfully\"});\r\n  } catch (error) {\r\n    res.status(400).send('Invalid or expired token')\r\n  }\r\n}\r\nmodule.exports = {\r\n  register,\r\n  login,\r\n  resetPasswordLink,\r\n  resetPassword,\r\n};\r\n"]}