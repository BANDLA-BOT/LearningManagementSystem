{"version":3,"sources":["authController.js"],"names":["Student","require","jwt","nodemailer","bcrypt","req","res","body","lastname","password","imgPath","file","destination","filename","findOne","email","json","message","newUser","firstname","save","status","Message","user","Error","_context","t0","login","_req$body2","existUser","token","regeneratorRuntime","async","_context2","prev","next","awrap","sent","abrupt","profilepic","sign","id","_id","process","env","JWT_SECRET_KEY","expiresIn","student","Token","stop","Map","sendOtp","otp","otpExpiry","transporter","mailOptions","_context3","Math","floor","random","toString","Date","now","otpStore","set","expires","console","log","createTransport","service","auth","EMAIL_USER","pass","EMAIL_PASS","from","text","concat","sendMail","error","info","verifyOTP","_req$body3","storedOtp","_context4","forgotPassword","get","newPassword","_context5","module","exports","register"],"mappings":"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","file":"authController.min.js","sourcesContent":["const Student = require(\"../../models/users/studentModel.js\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst nodemailer   = require('nodemailer')\r\n\r\n//Register Controller\r\nconst register = async (req, res) => {\r\n  try {\r\n    const { email, firstname, lastname, password } = req.body;\r\n    const imgPath = `${req.file.destination}/${req.file.filename}`;\r\n    const user = await Student.findOne({ email: email });\r\n    if (user) {\r\n      return res.json({ message: \"User already exists with the email ID\" });\r\n    }\r\n    \r\n    const newUser = new Student({\r\n      email,\r\n      firstname,\r\n      lastname,\r\n      password:password,\r\n      profilepic: imgPath,\r\n    });\r\n    await newUser.save();\r\n    res\r\n      .status(201)\r\n      .json({ Message: \"Student registered successfully\", Student: newUser });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n//Login Controller\r\nconst login = async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const existUser = await Student.findOne({\r\n      email: email,\r\n      password: password,\r\n    });\r\n    if (!existUser) {\r\n      return res.json({ message: \"User doesn't exists\" });\r\n    }\r\n    if (password !== existUser.password) {\r\n      return res.json({ message: \"Passwords did not match\" });\r\n    }\r\n    const token = jwt.sign({ id: existUser._id }, process.env.JWT_SECRET_KEY, {\r\n      expiresIn: \"15d\",\r\n    });\r\n    res\r\n      .status(200)\r\n      .json({\r\n        message: \"Student logged in successfully\",\r\n        student: existUser,\r\n        Token: token,\r\n      });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst otpStore = new Map()\r\nconst sendOtp = async (req, res) => {\r\n  const {email} = req.body\r\n  try {\r\n    const student = await Student.findOne({ email });\r\n    if (!student) {\r\n        return res.status(404).json({ message: 'Student not found' });\r\n    }\r\n    const otp = Math.floor(100000 + Math.random() * 900000).toString();\r\n    const otpExpiry = Date.now() + 300000; \r\n    otpStore.set(email, { otp, expires: otpExpiry });\r\n    console.log(otpStore)\r\n\r\n    const transporter = nodemailer.createTransport({\r\n      service: 'gmail',\r\n      auth: {\r\n          user:process.env.EMAIL_USER,\r\n          pass:process.env.EMAIL_PASS\r\n      }\r\n  });\r\n\r\n  const mailOptions = {\r\n      from: process.env.EMAIL_USER,\r\n      to: email,\r\n      subject: 'OTP for resetting Password',\r\n      text: `Your OTP code is ${otp}. It will expire in 5 minutes.`\r\n  };\r\n  transporter.sendMail(mailOptions, (error, info) => {\r\n    if (error) {\r\n        return res.status(500).json({ message: 'Error sending email', error , info:info});\r\n    }\r\n    res.json({ message: 'OTP sent' ,});\r\n});\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Server error', error });\r\n  }\r\n};\r\nconst verifyOTP = async(req,res)=>{\r\n  const { email, otp } = req.body;\r\n    \r\n  const storedOtp = otpStore.get(email);\r\n  console.log(storedOtp)\r\n  if (!storedOtp) {\r\n      return res.status(400).json({ message: 'No OTP found for this email' });\r\n  }\r\n\r\n  if (storedOtp.otp === otp && storedOtp.expires > Date.now()) {\r\n      return res.json({ message: 'OTP verified' });\r\n  } else {\r\n      return res.status(400).json({ message: 'Invalid or expired OTP' });\r\n  }\r\n}\r\nconst forgotPassword = async (req, res) => {\r\n  const { email, newPassword } = req.body;\r\n    \r\n    try {\r\n        const student = await Student.findOne({ email });\r\n        if (!student) {\r\n            return res.status(404).json({ message: 'Student not found' });\r\n        }\r\n\r\n        const storedOtp = otpStore.get(email);\r\n\r\n        if (!storedOtp) {\r\n            return res.status(400).json({ message: 'No OTP found for this email' });\r\n        }\r\n\r\n        student.password = newPassword;\r\n        await student.save();\r\n        otpStore.delete(email);\r\n        return res.json({ message: 'Password changed successfully' });\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Server error', error });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n  register,\r\n  login,\r\n  sendOtp,\r\n  forgotPassword,\r\n  verifyOTP\r\n};\r\n"]}