{"version":3,"sources":["authController.js"],"names":["Student","require","jwt","nodemailer","bcrypt","req","res","body","lastname","password","imgPath","file","destination","filename","findOne","email","json","message","newUser","firstname","save","status","Message","user","Error","_context","t0","login","_req$body2","existUser","token","regeneratorRuntime","async","_context2","prev","next","awrap","sent","abrupt","compareSync","profilepic","sign","id","_id","process","env","JWT_SECRET_KEY","expiresIn","student","Token","stop","resetToken","transporter","mailOptions","_context3","JWT_SECRET_KEY_FOR_RESET_PASSWORD_LINK","createTransport","service","auth","EMAIL_USER","from","to","subject","text","concat","sendMail","error","info","send","resetPassword","newPassword","decoded","userId","hashedPassword","_context4","verify","hash","module","exports","isValidPassword","register","resetPasswordLink"],"mappings":"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","file":"authController.min.js","sourcesContent":["const Student = require(\"../../models/users/studentModel.js\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst nodemailer   = require('nodemailer')\r\n\r\n//Register Controller\r\nconst register = async (req, res) => {\r\n  try {\r\n    const { email, firstname, lastname, password } = req.body;\r\n    const imgPath = `${req.file.destination}/${req.file.filename}`;\r\n    const user = await Student.findOne({ email: email });\r\n    if (user) {\r\n      return res.json({ message: \"User already exists with the email ID\" });\r\n    }\r\n    \r\n    const newUser = new Student({\r\n      email,\r\n      firstname,\r\n      lastname,\r\n      password:password,\r\n      profilepic: imgPath,\r\n    });\r\n    await newUser.save();\r\n    res\r\n      .status(201)\r\n      .json({ Message: \"Student registered successfully\", Student: newUser });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n//Login Controller\r\nconst login = async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const existUser = await Student.findOne({\r\n      email: email,\r\n    });\r\n    if (!existUser) {\r\n      return res.json({ message: \"User doesn't exists\" });\r\n    }\r\n    const isValidPassword = bcrypt.compareSync(password, existUser.password)\r\n    if (!isValidPassword) {\r\n      return res.json({ message: \"Password incorrect\" });\r\n    }\r\n    const token = jwt.sign({ id: existUser._id }, process.env.JWT_SECRET_KEY, {\r\n      expiresIn: \"15d\",\r\n    });\r\n    res\r\n      .status(200)\r\n      .json({\r\n        message: \"Student logged in successfully\",\r\n        student: existUser,\r\n        Token: token,\r\n      });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst resetPasswordLink = async (req, res) => {\r\n  const { email } = req.body\r\n  const student = await Student.findOne({email});\r\n  if(!student){\r\n    return res.status(404).json({message:\"User not found\"})\r\n  }\r\n  const resetToken = jwt.sign({id:student._id}, process.env.JWT_SECRET_KEY_FOR_RESET_PASSWORD_LINK, {expiresIn:'10m'});\r\n\r\n  const transporter = nodemailer.createTransport({\r\n    service:'gmail',\r\n    auth:{\r\n      user:process.env.EMAIL_USER,\r\n      pass:process.env.EMAIL_PASS\r\n    },\r\n  });\r\n  const mailOptions = {\r\n    from:process.env.EMAIL_USER,\r\n    to:email,\r\n    subject:'Password reset Link',\r\n    text:`Please use the following link to reset your password: http://localhost:8000/reset-password/${resetToken}`\r\n  }\r\n  transporter.sendMail(mailOptions, (error, info) => {\r\n    if (error) {\r\n      return res.status(500).send('Error sending email');\r\n    }\r\n    res.send('Password reset email sent');\r\n  });\r\n}\r\nconst resetPassword = async(req,res)=>{\r\n  const {token} = req.params\r\n  const { newPassword } = req.body;\r\n  try {\r\n    const decoded = jwt.verify(token, process.env.JWT_SECRET_KEY_FOR_RESET_PASSWORD_LINK)\r\n    const userId = decoded.id\r\n    const hashedPassword = await bcrypt.hash(newPassword, 10)\r\n    await Student.findByIdAndUpdate(userId,{password:hashedPassword})\r\n    res.json({Message:\"Password updated successfully\"});\r\n  } catch (error) {\r\n    res.status(400).send('Invalid or expired token')\r\n  }\r\n}\r\nmodule.exports = {\r\n  register,\r\n  login,\r\n  resetPasswordLink,\r\n  resetPassword,\r\n};\r\n"]}