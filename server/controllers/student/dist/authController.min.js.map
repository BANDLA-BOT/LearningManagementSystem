{"version":3,"sources":["authController.js"],"names":["Student","require","jwt","nodemailer","bcrypt","req","res","body","lastname","password","imgPath","file","destination","filename","findOne","email","json","message","hashedPassword","hashSync","newUser","firstname","profilepic","save","status","user","Message","register","console","log","_context","t0","Error","login","_req$body2","existUser","token","regeneratorRuntime","async","_context2","prev","next","salt","awrap","sent","abrupt","sign","id","_id","process","env","JWT_SECRET_KEY","expiresIn","student","Token","stop","resetPasswordLink","resetToken","transporter","mailOptions","_context3","JWT_SECRET_KEY_FOR_RESET_PASSWORD_LINK","createTransport","service","auth","pass","EMAIL_PASS","from","EMAIL_USER","to","subject","text","concat","sendMail","error","info","send","resetPassword","newPassword","decoded","userId","_context4","verify","hash","module","exports","isValidPassword"],"mappings":"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","file":"authController.min.js","sourcesContent":["const Student = require(\"../../models/users/studentModel.js\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst nodemailer   = require('nodemailer')\r\n\r\n//Register Controller\r\nconst register = async (req, res) => {\r\n  try {\r\n    const { email, firstname, lastname, password } = req.body;\r\n    const imgPath = `${req.file.destination}/${req.file.filename}`;\r\n    const user = await Student.findOne({ email: email });\r\n    if (user) {\r\n      return res.json({ message: \"User already exists with the email ID\" });\r\n    }\r\n    const salt = 12\r\n   const hashedPassword = bcrypt.hashSync(password, salt)\r\n   \r\n    const newUser = new Student({\r\n      email,\r\n      firstname,\r\n      lastname,\r\n      password:hashedPassword,\r\n      profilepic: imgPath,\r\n    });\r\n    await newUser.save();\r\n    res\r\n      .status(201)\r\n      .json({ Message: \"Student registered successfully\", Student: newUser , register:true});\r\n  } catch (error) {\r\n    console.log(error)\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n//Login Controller\r\nconst login = async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    console.log(email, password)\r\n    const existUser = await Student.findOne({\r\n      email: email,\r\n    });\r\n    if (!existUser) {\r\n      return res.json({ message: \"User doesn't exists\" });\r\n    }\r\n    const isValidPassword = bcrypt.compareSync(password, existUser.password)\r\n    if (!isValidPassword) {\r\n      return res.json({ message: \"Password incorrect\"});\r\n    }\r\n    const token = jwt.sign({ id: existUser._id }, process.env.JWT_SECRET_KEY, {\r\n      expiresIn: \"15d\",\r\n    });\r\n    res\r\n      .status(200)\r\n      .json({\r\n        message: \"Student logged in successfully\",\r\n        student: existUser,\r\n        Token: token,\r\n        login:true\r\n      });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst resetPasswordLink = async (req, res) => {\r\n  const { email } = req.body\r\n  const student = await Student.findOne({email});\r\n  if(!student){\r\n    return res.status(404).json({message:\"User not found\"})\r\n  }\r\n  const resetToken = jwt.sign({id:student._id}, process.env.JWT_SECRET_KEY_FOR_RESET_PASSWORD_LINK, {expiresIn:'10m'});\r\n\r\n  const transporter = nodemailer.createTransport({\r\n    service:'gmail',\r\n    auth:{\r\n      user:process.env.EMAIL_USER,\r\n      pass:process.env.EMAIL_PASS\r\n    },\r\n  });\r\n  const mailOptions = {\r\n    from:process.env.EMAIL_USER,\r\n    to:email,\r\n    subject:'Password reset Link',\r\n    text:`Please use the following link to reset your password: http://localhost:8000/api/student/auth/reset-password/${resetToken}`\r\n  }\r\n  transporter.sendMail(mailOptions, (error, info) => {\r\n    if (error) {\r\n      return res.status(500).send('Error sending email');\r\n    }\r\n    res.send('Password reset email sent');\r\n  });\r\n}\r\nconst resetPassword = async(req,res)=>{\r\n  const {token} = req.params\r\n  const { newPassword } = req.body;\r\n  try {\r\n    const decoded = jwt.verify(token, process.env.JWT_SECRET_KEY_FOR_RESET_PASSWORD_LINK)\r\n    const userId = decoded.id\r\n    const hashedPassword = await bcrypt.hash(newPassword, 10)\r\n    await Student.findByIdAndUpdate(userId,{password:hashedPassword})\r\n    res.json({Message:\"Password updated successfully\"});\r\n  } catch (error) {\r\n    res.status(400).send('Invalid or expired token')\r\n  }\r\n}\r\nmodule.exports = {\r\n  register,\r\n  login,\r\n  resetPasswordLink,\r\n  resetPassword,\r\n};\r\n"]}