{"version":3,"sources":["authController.js"],"names":["Student","require","jwt","config","res","_req$body","email","firstname","lastname","password","newUser","regeneratorRuntime","async","_context","prev","next","req","body","awrap","register","findOne","sent","abrupt","json","message","save","t0","status","Message","Error","stop","login","_req$body2","existUser","token","_context2","sign","id","_id","process","env","JWT_SECRET_KEY","expiresIn","student","Token","module","exports"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,sCAClBC,IAAMD,QAAQ,gBADpBA,QAAMD,UAAUC,SAEhBA,IAAAA,SAAA,SAAkBE,EAISC,GAJ3B,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAT,EAMwDW,EAAIC,KAA3CX,EANjBD,EAMiBC,MAAOC,EANxBF,EAMwBE,UAAWC,EANnCH,EAMmCG,SAASC,EAN5CJ,EAM4CI,SAN5CI,EAAAE,KAAA,EAAAJ,mBAAAO,MAIMC,QAAWC,QAAA,CAAAd,MAAAA,KAJjB,KAAA,EAAA,GAAAO,EAAAQ,KAAA,OAAAR,EAAAS,OAAA,SASoBlB,EAAImB,KAAK,CAACC,QAAQ,2CATtCX,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OAIiBL,EAAA,IAAAV,QAAA,CAAAM,MAAAA,EAAAC,UAAAA,EAAAC,SAAAA,EAAAC,SAAAA,IAJjBI,EAAAE,KAAA,GAAAJ,mBAAAO,MAIiBR,EAAAe,QAJjB,KAAA,GAO8CnB,EAAAA,OAAMA,KAAAA,KAAAA,CAAAA,QAAAA,kCAAAA,QAAAA,IAPpDO,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAa,GAAAb,EAAA,MAAA,GAoBQT,EAAIuB,OAAO,KAAKJ,KAAK,CAACK,QAAQ,wBAAyBC,MAAMhB,EAAAa,GAAMF,UApB3E,KAAA,GAAA,IAAA,MAAA,OAAAX,EAAAiB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAIiBC,MAAA,SAAAf,EAAAZ,GAAA,IAAA4B,EAAA1B,EAAAG,EAAAwB,EAAAC,EAAA,OAAAvB,mBAAAC,MAAA,SAAAuB,GAAA,OAAA,OAAAA,EAAArB,KAAAqB,EAAApB,MAAA,KAAA,EAAA,OAAAoB,EAAArB,KAAA,EAAAkB,EAwBiBhB,EAAIC,KAAvBX,EAxBE0B,EAwBF1B,MAAOG,EAxBLuB,EAwBKvB,SAxBL0B,EAAApB,KAAA,EAAAJ,mBAAAO,MAAAlB,QAAAoB,QAKOG,CAAAA,MAAKjB,EAAAG,SAAAA,KALZ,KAAA,EAAA,GAAAwB,EAAAE,EAAAd,KAAA,CAAAc,EAAApB,KAAA,EAAA,MAAA,OAAAoB,EAAAb,OAAA,SAAAlB,EAAAmB,KAAA,CAAAC,QAAA,yBAAA,KAAA,EAAAU,EAAAhC,IAAAkC,KAAA,CAAAC,GAAAJ,EAAAK,KAAAC,QAAAC,IAAAC,eAAA,CAAAC,UAAA,QAOHhC,EAAAA,OAPG,KAOWV,KAAAA,CAAAA,QAAQ,iCAAA2C,QAAAV,EAAAW,MAAAV,IAPnBC,EAAApB,KAAA,GAAA,MAAA,KAAA,GAAAoB,EAAArB,KAAA,GAAAqB,EAAAT,GAAAS,EAAA,MAAA,GASL5B,EAAAA,OAAAA,KAAAA,KAAAA,CAAAA,QAFwB,wBAAAsB,MAAAM,EAAAT,GAAAF,UAPnB,KAAA,GAAA,IAAA,MAAA,OAAAW,EAAAL,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAe,OAAAC,QAAA,CAAA3B,SAAAA,SAsCbY,MAAAA","file":"authController.min.js","sourcesContent":["const Student = require('../../models/users/studentModel.js')\r\nconst jwt = require('jsonwebtoken')\r\nrequire('dotenv').config()\r\n\r\n//Register Controller\r\n\r\nconst register = async(req,res)=>{\r\n    try {\r\n         const { email, firstname, lastname,password} = req.body\r\n          const user = await Student.findOne({email:email})\r\n          if(user){\r\n             return res.json({message:\"User already exists with the email ID\"})\r\n          }\r\n        const newUser = new Student({\r\n            email,\r\n            firstname,\r\n            lastname,\r\n            password,\r\n        })\r\n        await newUser.save()\r\n        res.status(201).json({Message:\"Student registered successfully\", Student:newUser})\r\n     } catch (error) {\r\n        res.status(500).json({Message:\"Internal server error\", Error:error.message})\r\n     }\r\n}\r\n\r\n//Login Controller\r\n\r\nconst login = async(req,res)=>{\r\n    try {\r\n        const {email, password} = req.body;\r\n        const existUser = await Student.findOne({email:email, password:password})\r\n        if(!existUser){\r\n            return res.json({message:\"User doesn't exists\"})\r\n        }\r\n        const token = jwt.sign({id:existUser._id}, process.env.JWT_SECRET_KEY, {expiresIn:'15d'})\r\n        res.status(200).json({message:\"Student logged in successfully\", student:existUser, Token:token})\r\n    } catch (error) {\r\n        res.status(500).json({Message:\"Internal server error\", Error:error.message})\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    register,\r\n    login\r\n}"]}