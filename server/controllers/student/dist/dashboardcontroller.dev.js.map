{"version":3,"sources":["dashboardcontroller.js"],"names":["Student","require","courseModel","studentModel","getProfile","req","res","id","user","console","log","findById","_id","select","student","find","limit","courses","json","message","Profile","editProfile","body","email","firstname","lastname","userId","updateOne","$set","status","Error","editPassword","currentPassword","newPassword","reEnterNewPassword","password","save","enrollCourse","courseId","params","course","Course","enrolled","available","some","coursesAvailable","equals","Message","push","isComplete","showEnrolled","populate","List","error","topRanks","aggregate","$match","$addFields","Count","$size","$filter","input","as","cond","$eq","$sort","$project","students","rankings","markVideoAsComplete","videoId","enrolledCourses","totalVideos","section","reduce","acc","videos","length","completedVideos","courseCompletion","allCompleted","completedCourses","enrolledCourse","enroll","cv","sections","progressController","totalCourses","filter","coursesPercentage","coursesData","Progress","courseProgress","studentId","Promise","all","map","$unwind","$group","$sum","$cond","completedPercentage","$multiply","$divide","result","progress","results","query","f","toLowerCase","where","gt","paidCourses","eq","freeCourses","sorting","sort","title","rating","module","exports"],"mappings":"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","sourcesContent":["const Student = require('../../models/users/studentModel.js')\r\nconst courseModel = require('../../models/course/courseModel.js');\r\nconst studentModel = require('../../models/users/studentModel.js');\r\n\r\n\r\nconst getProfile = async (req, res) => {\r\n  const id = req.user;\r\n  console.log(id);\r\n  try {\r\n    const student = await Student.findById({ _id: id.id }).select(\"-password\");\r\n    const courses = await courseModel.find().limit(61\r\n\r\n    );\r\n    if (!student) {\r\n      return res.json({ message: \"No student found \" });\r\n    }\r\n    if (!courses) {\r\n      return res.json({ message: \"No courses available currently\" });\r\n    }\r\n    res.json({\r\n      message: \"Students Profile\",\r\n      Profile: student,\r\n      courses: courses,\r\n    });\r\n    console.log(student);\r\n  } catch (error) {}\r\n};\r\n\r\nconst editProfile = async(req,res)=>{\r\n  try {\r\n    const {email, firstname, lastname} = req.body\r\n    const userId = req.user.id\r\n    console.log(userId)\r\n    const student = await Student.updateOne(\r\n      {_id:userId},\r\n      {$set:{firstname:firstname, lastname:lastname, email:email}}\r\n    );\r\n    res.status(200).json({message:\"Profile updated successfuly\",})\r\n    \r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst editPassword = async(req,res)=>{\r\n  try {\r\n    const userId = req.user.id\r\n    const {currentPassword, newPassword, reEnterNewPassword} = req.body\r\n    const student = await Student.findById(userId)\r\n    if(currentPassword !== student.password){\r\n      return res.json({message:\"You have entered wrong current password\"})\r\n    }\r\n    if(newPassword === student.password){\r\n      return res.json({message:\"New password should be different from Old password\"})\r\n    }\r\n    if(newPassword !== reEnterNewPassword){\r\n      return res.json({message:\"Confirm password should same as New password\"})\r\n    }\r\n    student.password = newPassword\r\n    await student.save()\r\n    res.json({message:\"Password changed successfully\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst enrollCourse = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const userId = req.user;\r\n  const course = await courseModel.findById({ _id: courseId });\r\n  const student = await Student.findById({ _id: userId.id });\r\n  try {\r\n    if (!student) {\r\n      return res.status(400).json({ message: \"Student not found\" });\r\n    }\r\n    if (!course) {\r\n      return res.status(400).json({ message: \"Course not found\" });\r\n    }\r\n    const Course = student.enrolled\r\n    const available = Course.some(course => course.coursesAvailable.equals(courseId))\r\n    if(available){\r\n      return res.json({Message:\"You have already enrolled this course\"})\r\n    }\r\n    student.enrolled.push({\r\n      coursesAvailable: course._id,\r\n      isComplete: false,\r\n    });\r\n    await student.save();\r\n    res\r\n      .status(200)\r\n      .json({ Message: \"Course enrolled successfuly\", Student: student });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst showEnrolled = async (req,res)=>{\r\n  const userId = req.user\r\n  try {\r\n    const student = await Student.findById({_id:userId.id}).populate('enrolled.coursesAvailable')\r\n    if(!student) return res.status(404).json({message:\"Student not found\"})\r\n    res.status(200).json({message:\"Found\", List:student.enrolled})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", error:error.message})\r\n  }\r\n}\r\nconst topRanks = async (req, res) => {\r\n  try {\r\n    const students = await Student.aggregate([\r\n      {\r\n        $match: {\r\n          \"enrolled.isComplete\": true,\r\n        },\r\n      },\r\n      {\r\n        $addFields: {\r\n          Count: {\r\n            $size: {\r\n              $filter: {\r\n                input: \"$enrolled\",\r\n                as: \"enrolled\",\r\n                cond: { $eq: [\"$$enrolled.isComplete\", true] },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      {\r\n        $sort: { _id: -1 },\r\n      },\r\n\r\n      {\r\n        $project: {\r\n          firstname: 1,\r\n          lastname: 1,\r\n          Count:1\r\n        },\r\n      },\r\n    ]);\r\n    res.status(200).json({ rankings: students });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst markVideoAsComplete = async(req,res)=>{\r\n  try {\r\n    const {courseId, videoId} = req.params\r\n    const userId = req.user.id\r\n    const course = await courseModel.findById(courseId)\r\n    if(!course){\r\n      return res.status(404).json({message:\"Course not found\"});\r\n    }\r\n\r\n    const student = await Student.findById(userId).populate('enrolled.coursesAvailable')\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const enrolledCourses = student.enrolled\r\n    console.log(enrolledCourses)\r\n    // const enrolledCourse = student.enrolled.find(enroll => enroll.coursesAvailable.equals(courseId))\r\n    // console.log(enrolledCourse)\r\n    // if (!enrolledCourse) {\r\n    //   return res.status(404).json({ message: \"Course not enrolled by the student\" });\r\n    // }\r\n\r\n    // const alreadyCompleted = enrolledCourse.completedVideos.find(cv => cv.courseId.equals(courseId) && cv.videos.includes(videoId))\r\n    // if (alreadyCompleted) {\r\n    //   return res.json({ message: \"Video already marked as complete\" });\r\n    // }\r\n\r\n    // let courseCompletion = enrolledCourse.completedVideos.find( cv=> cv.courseId.equals(courseId))\r\n    // if(!courseCompletion){\r\n    //   courseCompletion = { courseId, videos:[videoId]}\r\n    //   enrolledCourse.completedVideos.push(courseCompletion)\r\n    // }\r\n    // else {\r\n    //   courseCompletion.videos.push(videoId);\r\n    // }\r\n    await student.save()\r\n\r\n    const totalVideos = course.section.reduce((acc, section)=> acc+ section.videos.length, 0)\r\n    const completedVideos = courseCompletion.videos.length\r\n\r\n    res.json({\r\n      message:\"Videos marked as complete\",\r\n      completedVideos,\r\n      totalVideos,\r\n      allCompleted:completedVideos === totalVideos\r\n    })\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\", error: error.message});\r\n  }\r\n}\r\n\r\nconst completedCourses = async(req,res)=>{\r\n try {\r\n  const {courseId} = req.params\r\n  const userId = req.user.id\r\n\r\n  const student = await Student.findById(userId).populate('enrolled.coursesAvailable')\r\n  if (!student) {\r\n    return res.status(404).json({ message: \"Student not found\" });\r\n  }\r\n  const enrolledCourse = student.enrolled.find(enroll => enroll.coursesAvailable.equals(courseId));\r\n  if (!enrolledCourse) {\r\n      return res.status(404).json({ message: \"Course not enrolled by the student\" });\r\n  }\r\n  const courseCompletion = enrolledCourse.completedVideos.find(cv => cv.courseId.equals(courseId)) || { videos: [] };\r\n\r\n  const course = await courseModel.findById(courseId);\r\n    const totalVideos = course.sections.reduce((acc, section) => acc + section.videos.length, 0);\r\n    res.json({\r\n      completedVideos: courseCompletion.videos,\r\n      totalVideos,\r\n      allCompleted: courseCompletion.videos.length === totalVideos\r\n    });\r\n } catch (error) {\r\n  res.status(500).json({ message: \"Internal server error\", error: error.message });\r\n }\r\n}\r\n\r\nconst progressController = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const student = await Student.findById(userId);\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const totalCourses = student.enrolled.length;\r\n    const completedCourses = student.enrolled.filter(\r\n      (course) => course.isComplete\r\n    ).length;\r\n    const coursesPercentage = (completedCourses / totalCourses) * 100;\r\n\r\n    const coursesData = {\r\n      totalCourses,\r\n      completedCourses,\r\n      coursesPercentage,\r\n    };\r\n\r\n    res.status(200).json({ message: \"Progress report\", Progress: coursesData });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst courseProgress = async (req, res) => {\r\n  try {\r\n    const studentId = req.user.id;\r\n    const student = await Student.findById(studentId).populate(\"enrolled\");\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const results = await Promise.all(\r\n        student.enrolled.map(async (course) => {\r\n        const result = await courseModel.aggregate([\r\n          { $match: { _id: course.coursesAvailable } },\r\n          { $unwind: \"$section\" },\r\n          { $unwind: \"$section.videos\" },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              totalVideos: { $sum: 1 },\r\n              completedVideos: {\r\n                $sum: { $cond: [\"$section.videos.completed\", 1, 0] },\r\n              },\r\n            },\r\n          },\r\n          {\r\n            $project: {\r\n              _id: 0,\r\n              totalVideos: 1,\r\n              completedVideos: 1,\r\n              completedPercentage: {\r\n                $cond: [\r\n                    { $eq: ['$totalVideos', 0] },\r\n                    0,\r\n                    { \r\n                      $multiply: [\r\n                        { $divide: ['$completedVideos', '$totalVideos'] },\r\n                        100\r\n                      ]\r\n                    }\r\n                  ]\r\n              },\r\n            },\r\n          },\r\n        ]);\r\n        return {\r\n            course:course,\r\n            progress:result[0]\r\n        }\r\n      })\r\n    )\r\n    res.json(results)\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n\r\n//filtering Records \r\n\r\nconst filter = async(req,res)=>{\r\n  try {\r\n    const query = req.query.f\r\n    console.log(query)\r\n    if(query.toLowerCase() === 'paid'){\r\n      const paidCourses = await courseModel.find().where('price').gt(0);\r\n      return res.status(200).json({message:\"Paid courses\", paidCourses:paidCourses})\r\n    }else if(query.toLowerCase() === 'free'){\r\n      const freeCourses = await courseModel.find().where('price').eq(0)\r\n      return res.status(200).json({message:\"free courses\", freeCourses:freeCourses})\r\n    }\r\n    res.json({message:\"No courses available based on Query\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst sorting = async(req,res)=>{\r\n  try {\r\n    const query = req.query.sort\r\n    if(query.toLowerCase() === \"asc\"){\r\n      const courses = await courseModel.find().sort({title:1})\r\n      return res.json({message:\"Ascending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"desc\"){\r\n      const courses = await courseModel.find().sort({title:-1})\r\n      return res.json({message:\"Descending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"rating\"){\r\n      const courses = await courseModel.find().sort({rating:-1})\r\n      return res.json({message:\"Rating order\", course:courses})\r\n    }\r\n    res.json({message:\"No Sorting chosen\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  getProfile,\r\n  enrollCourse,\r\n  showEnrolled,\r\n  topRanks,\r\n\r\n  completedCourses,\r\n  progressController,\r\n  courseProgress,\r\n  filter,\r\n  sorting,\r\n  markVideoAsComplete,\r\n  editProfile,\r\n  editPassword\r\n};\r\n"],"file":"dashboardcontroller.dev.js"}