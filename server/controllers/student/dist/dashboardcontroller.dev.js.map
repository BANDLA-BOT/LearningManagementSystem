{"version":3,"sources":["dashboardcontroller.js"],"names":["Student","require","courseModel","getProfile","req","res","id","user","console","log","findById","_id","select","student","find","limit","courses","json","message","Profile","status","editProfile","body","email","firstname","lastname","userId","updateOne","$set","Error","editPassword","currentPassword","newPassword","reEnterNewPassword","password","save","enrollCourse","courseId","params","course","Course","enrolled","available","some","coursesAvailable","equals","Message","push","isComplete","showEnrolled","populate","List","error","topRanks","aggregate","$match","$addFields","Count","$size","$filter","input","as","cond","$eq","$sort","$project","students","rankings","markVideoAsComplete","videoId","enrolledCourses","enrolledCourse","enroll","alreadyCompleted","completedVideos","cv","videos","includes","courseCompletion","totalVideos","section","reduce","acc","length","allCompleted","completedCourses","sections","progressController","totalCourses","filter","coursesPercentage","coursesData","Progress","courseProgress","studentId","Promise","all","map","$unwind","$group","$sum","$cond","completedPercentage","$multiply","$divide","result","progress","results","query","f","toLowerCase","where","gt","paidCourses","eq","freeCourses","sorting","sort","title","rating","ratingController","send","existingRating","r","ratedBy","toString","rate","Number","askQuestion","question","askedBy","discussion","discussions","topDiscussions","data","item","answer","answeredBy","createdAt","Data","module","exports"],"mappings":"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","sourcesContent":["const Student = require('../../models/users/studentModel.js')\r\nconst courseModel = require('../../models/course/courseModel.js');\r\n\r\n\r\n\r\nconst getProfile = async (req, res) => {\r\n  const id = req.user;\r\n  console.log(id);\r\n  try {\r\n    const student = await Student.findById({ _id: id.id }).select(\"-password\");\r\n    const courses = await courseModel.find().limit(61\r\n\r\n    );\r\n    if (!student) {\r\n      return res.json({ message: \"No student found \" });\r\n    }\r\n    if (!courses) {\r\n      return res.json({ message: \"No courses available currently\" });\r\n    }\r\n    res.json({\r\n      message: \"Students Profile\",\r\n      Profile: student,\r\n      courses: courses,\r\n      status:true\r\n    });\r\n    console.log(student);\r\n  } catch (error) {}\r\n};\r\n\r\nconst editProfile = async(req,res)=>{\r\n  try {\r\n    const {email, firstname, lastname} = req.body\r\n    const userId = req.user.id\r\n    console.log(userId)\r\n    const student = await Student.updateOne(\r\n      {_id:userId},\r\n      {$set:{firstname:firstname, lastname:lastname, email:email}}\r\n    );\r\n    res.status(200).json({message:\"Profile updated successfuly\",})\r\n    \r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst editPassword = async(req,res)=>{\r\n  try {\r\n    const userId = req.user.id\r\n    const {currentPassword, newPassword, reEnterNewPassword} = req.body\r\n    const student = await Student.findById(userId)\r\n    if(currentPassword !== student.password){\r\n      return res.json({message:\"You have entered wrong current password\"})\r\n    }\r\n    if(newPassword === student.password){\r\n      return res.json({message:\"New password should be different from Old password\"})\r\n    }\r\n    if(newPassword !== reEnterNewPassword){\r\n      return res.json({message:\"Confirm password should same as New password\"})\r\n    }\r\n    student.password = newPassword\r\n    await student.save()\r\n    res.json({message:\"Password changed successfully\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst enrollCourse = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const userId = req.user;\r\n  const course = await courseModel.findById({ _id: courseId });\r\n  const student = await Student.findById({ _id: userId.id });\r\n  try {\r\n    if (!student) {\r\n      return res.status(400).json({ message: \"Student not found\" });\r\n    }\r\n    if (!course) {\r\n      return res.status(400).json({ message: \"Course not found\" });\r\n    }\r\n    const Course = student.enrolled\r\n    const available = Course.some(course => course.coursesAvailable.equals(courseId))\r\n    if(available){\r\n      return res.json({Message:\"You have already enrolled this course\"})\r\n    }\r\n    student.enrolled.push({\r\n      coursesAvailable: course._id,\r\n      isComplete: false,\r\n    });\r\n    await student.save();\r\n    res\r\n      .status(200)\r\n      .json({ Message: \"Course enrolled successfuly\", Student: student });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst showEnrolled = async (req,res)=>{\r\n  const userId = req.user\r\n  try {\r\n    const student = await Student.findById({_id:userId.id}).populate('enrolled.coursesAvailable')\r\n    if(!student) return res.status(404).json({message:\"Student not found\"})\r\n    res.status(200).json({message:\"Found\", List:student.enrolled})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", error:error.message})\r\n  }\r\n}\r\nconst topRanks = async (req, res) => {\r\n  try {\r\n    const students = await Student.aggregate([\r\n      {\r\n        $match: {\r\n          \"enrolled.isComplete\": true,\r\n        },\r\n      },\r\n      {\r\n        $addFields: {\r\n          Count: {\r\n            $size: {\r\n              $filter: {\r\n                input: \"$enrolled\",\r\n                as: \"enrolled\",\r\n                cond: { $eq: [\"$$enrolled.isComplete\", true] },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      {\r\n        $sort: { _id: -1 },\r\n      },\r\n\r\n      {\r\n        $project: {\r\n          firstname: 1,\r\n          lastname: 1,\r\n          Count:1\r\n        },\r\n      },\r\n    ]);\r\n    res.status(200).json({ rankings: students });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst markVideoAsComplete = async(req,res)=>{\r\n  try {\r\n    const {courseId, videoId} = req.params\r\n    const userId = req.user.id\r\n    const course = await courseModel.findById(courseId)\r\n    if(!course){\r\n      return res.status(404).json({message:\"Course not found\"});\r\n    }\r\n\r\n    const student = await Student.findById(userId).populate('enrolled.coursesAvailable')\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const enrolledCourses = student.enrolled\r\n    console.log(enrolledCourses)\r\n    const enrolledCourse = student.enrolled.find(enroll => enroll.coursesAvailable.equals(courseId))\r\n    console.log(enrolledCourse)\r\n    if (!enrolledCourse) {\r\n      return res.status(404).json({ message: \"Course not enrolled by the student\" });\r\n    }\r\n\r\n    const alreadyCompleted = enrolledCourse.completedVideos.find(cv => cv.courseId.equals(courseId) && cv.videos.includes(videoId))\r\n    if (alreadyCompleted) {\r\n      return res.json({ message: \"Video already marked as complete\" });\r\n    }\r\n\r\n    let courseCompletion = enrolledCourse.completedVideos.find( cv=> cv.courseId.equals(courseId))\r\n    if(!courseCompletion){\r\n      courseCompletion = { courseId, videos:[videoId]}\r\n      enrolledCourse.completedVideos.push(courseCompletion)\r\n    }\r\n    else {\r\n      courseCompletion.videos.push(videoId);\r\n    }\r\n    await student.save()\r\n\r\n    const totalVideos = course.section.reduce((acc, section)=> acc+ section.videos.length, 0)\r\n    const completedVideos = courseCompletion.videos.length\r\n\r\n    res.json({\r\n      message:\"Videos marked as complete\",\r\n      completedVideos,\r\n      totalVideos,\r\n      allCompleted:completedVideos === totalVideos\r\n    })\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\", error: error.message});\r\n  }\r\n}\r\n\r\nconst completedCourses = async(req,res)=>{\r\n try {\r\n  const {courseId} = req.params\r\n  const userId = req.user.id\r\n\r\n  const student = await Student.findById(userId).populate('enrolled.coursesAvailable')\r\n  if (!student) {\r\n    return res.status(404).json({ message: \"Student not found\" });\r\n  }\r\n  const enrolledCourse = student.enrolled.find(enroll => enroll.coursesAvailable.equals(courseId));\r\n  if (!enrolledCourse) {\r\n      return res.status(404).json({ message: \"Course not enrolled by the student\" });\r\n  }\r\n  const courseCompletion = enrolledCourse.completedVideos.find(cv => cv.courseId.equals(courseId)) || { videos: [] };\r\n\r\n  const course = await courseModel.findById(courseId);\r\n    const totalVideos = course.sections.reduce((acc, section) => acc + section.videos.length, 0);\r\n    res.json({\r\n      completedVideos: courseCompletion.videos,\r\n      totalVideos,\r\n      allCompleted: courseCompletion.videos.length === totalVideos\r\n    });\r\n } catch (error) {\r\n  res.status(500).json({ message: \"Internal server error\", error: error.message });\r\n }\r\n}\r\n\r\nconst progressController = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const student = await Student.findById(userId);\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const totalCourses = student.enrolled.length;\r\n    const completedCourses = student.enrolled.filter(\r\n      (course) => course.isComplete\r\n    ).length;\r\n    const coursesPercentage = (completedCourses / totalCourses) * 100;\r\n\r\n    const coursesData = {\r\n      totalCourses,\r\n      completedCourses,\r\n      coursesPercentage,\r\n    };\r\n\r\n    res.status(200).json({ message: \"Progress report\", Progress: coursesData });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst courseProgress = async (req, res) => {\r\n  try {\r\n    const studentId = req.user.id;\r\n    const student = await Student.findById(studentId).populate(\"enrolled\");\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const results = await Promise.all(\r\n        student.enrolled.map(async (course) => {\r\n        const result = await courseModel.aggregate([\r\n          { $match: { _id: course.coursesAvailable } },\r\n          { $unwind: \"$section\" },\r\n          { $unwind: \"$section.videos\" },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              totalVideos: { $sum: 1 },\r\n              completedVideos: {\r\n                $sum: { $cond: [\"$section.videos.completed\", 1, 0] },\r\n              },\r\n            },\r\n          },\r\n          {\r\n            $project: {\r\n              _id: 0,\r\n              totalVideos: 1,\r\n              completedVideos: 1,\r\n              completedPercentage: {\r\n                $cond: [\r\n                    { $eq: ['$totalVideos', 0] },\r\n                    0,\r\n                    { \r\n                      $multiply: [\r\n                        { $divide: ['$completedVideos', '$totalVideos'] },\r\n                        100\r\n                      ]\r\n                    }\r\n                  ]\r\n              },\r\n            },\r\n          },\r\n        ]);\r\n        return {\r\n            course:course,\r\n            progress:result[0]\r\n        }\r\n      })\r\n    )\r\n    res.json(results)\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n\r\n//filtering Records \r\n\r\nconst filter = async(req,res)=>{\r\n  try {\r\n    const query = req.query.f\r\n    console.log(query)\r\n    if(query.toLowerCase() === 'paid'){\r\n      const paidCourses = await courseModel.find().where('price').gt(0);\r\n      return res.status(200).json({message:\"Paid courses\", paidCourses:paidCourses})\r\n    }else if(query.toLowerCase() === 'free'){\r\n      const freeCourses = await courseModel.find().where('price').eq(0)\r\n      return res.status(200).json({message:\"free courses\", freeCourses:freeCourses})\r\n    }\r\n    res.json({message:\"No courses available based on Query\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst sorting = async(req,res)=>{\r\n  try {\r\n    const query = req.query.sort\r\n    if(query.toLowerCase() === \"asc\"){\r\n      const courses = await courseModel.find().sort({title:1})\r\n      return res.json({message:\"Ascending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"desc\"){\r\n      const courses = await courseModel.find().sort({title:-1})\r\n      return res.json({message:\"Descending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"rating\"){\r\n      const courses = await courseModel.find().sort({rating:-1})\r\n      return res.json({message:\"Rating order\", course:courses})\r\n    }\r\n    res.json({message:\"No Sorting chosen\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst ratingController = async(req,res)=>{\r\n  const { courseId } = req.params\r\n  const { rating } = req.query\r\n  const userId = req.user.id\r\n  console.log(userId)\r\n  if(!rating || rating < 1 || rating > 5){\r\n    return res.status(400).send('Invalid rating. Must be between 1 and 5')\r\n  }\r\n  try {\r\n    const course = await courseModel.findById(courseId);\r\n    if(!course){\r\n      return res.status(404).json('Course not found.')\r\n    }\r\n\r\n    const existingRating = course.rating.find(r => r.ratedBy.toString() === userId)\r\n    if(existingRating){\r\n      return res.status(400).json({message:\"You have already rated this course\"})\r\n    }\r\n    \r\n    course.rating.push({\r\n      rate:Number(rating),\r\n      ratedBy:userId\r\n    })\r\n    await course.save()\r\n    res.json({message:\"Thank you for rating the course\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", error:error.message})\r\n  }\r\n}\r\n\r\n\r\n\r\nconst askQuestion = async(req,res)=>{\r\n  const {videoId, courseId} = req.params\r\n  const { question } = req.body\r\n  const askedBy = req.user.id\r\n  try {\r\n    const course = await courseModel.findById(courseId)\r\n    const discussion = course.discussions\r\n    discussion.push({\r\n      videoId:videoId,\r\n      courseId:courseId,\r\n      askedBy:askedBy,\r\n      question:question\r\n    })\r\n    await course.save()\r\n    res.json({message:\"We have got your question, you will get answer back from our instructor\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", error:error.message})\r\n  }\r\n}\r\n\r\nconst topDiscussions = async(req,res)=>{\r\n  try {\r\n    const {courseId, videoId} = req.params\r\n    const course = await courseModel.findById(courseId)\r\n    const discussion = course.discussions\r\n    let data=[]\r\n    discussion.map((item)=>{\r\n      if(!item){\r\n        return res.json({Message:\"There are discussions on this video\"})\r\n      }\r\n      if(item.videoId.toString() === videoId){\r\n        console.log('Matched')\r\n        data.push({question:item.question,answer:item.answer || 'waiting for answer', answeredBy:item.answeredBy || 'Instructor busy in Writing answer', createdAt:item.createdAt})\r\n        return data\r\n      }\r\n      else{\r\n        console.log(\"No\")\r\n      }\r\n    })\r\n    if(data.length<=10){\r\n      res.json({message:`Top ${data.length} discussions on this video`, Data:data})\r\n    }\r\n  } catch (error) {\r\n    \r\n  }\r\n}\r\nmodule.exports = {\r\n  getProfile,\r\n  enrollCourse,\r\n  showEnrolled,\r\n  topRanks,\r\n  completedCourses,\r\n  progressController,\r\n  courseProgress,\r\n  filter,\r\n  sorting,\r\n  markVideoAsComplete,\r\n  editProfile,\r\n  editPassword,\r\n  ratingController,\r\n  askQuestion,\r\n  topDiscussions\r\n};\r\n"],"file":"dashboardcontroller.dev.js"}