{"version":3,"sources":["dashboardcontroller.js"],"names":["Student","require","courseModel","getProfile","req","res","id","user","findById","_id","select","student","find","limit","courses","json","message","Profile","porfileStatus","status","Message","Error","editProfile","body","email","firstname","lastname","userId","updateOne","$set","editPassword","currentPassword","newPassword","reEnterNewPassword","password","save","enrollCourse","courseId","params","course","Course","enrolled","available","some","coursesAvailable","equals","push","isComplete","showEnrolled","populate","List","error","topRanks","aggregate","$match","$addFields","Count","$size","$filter","input","as","cond","$eq","$sort","$project","students","rankings","markVideoAsComplete","videoId","enrolledCourses","console","log","enrolledCourse","enroll","alreadyCompleted","completedVideos","cv","videos","includes","courseCompletion","totalVideos","section","reduce","acc","length","allCompleted","completedCourses","sections","progressController","totalCourses","filter","coursesPercentage","coursesData","Progress","courseProgress","studentId","Promise","all","map","$unwind","$group","$sum","$cond","completedPercentage","$multiply","$divide","result","progress","results","query","f","toLowerCase","where","gt","paidCourses","eq","freeCourses","sorting","sort","title","rating","ratingController","send","existingRating","r","ratedBy","toString","rate","Number","askQuestion","question","askedBy","discussion","discussions","topDiscussions","module","exports"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,oCAAD,CAAvB;;AACA,IAAMC,WAAW,GAAGD,OAAO,CAAC,oCAAD,CAA3B,C,CAEA;;;AACA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,UAAAA,EADW,GACNF,GAAG,CAACG,IADE,EAEjB;;AAFiB;AAAA;AAAA,0CAIOP,OAAO,CAACQ,QAAR,CAAiB;AAAEC,YAAAA,GAAG,EAAEH,EAAE,CAACA;AAAV,WAAjB,EAAiCI,MAAjC,CAAwC,WAAxC,CAJP;;AAAA;AAITC,UAAAA,OAJS;AAAA;AAAA,0CAKOT,WAAW,CAACU,IAAZ,GAAmBC,KAAnB,CAAyB,EAAzB,CALP;;AAAA;AAKTC,UAAAA,OALS;;AAAA,cAMVH,OANU;AAAA;AAAA;AAAA;;AAAA,2CAONN,GAAG,CAACU,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAAT,CAPM;;AAAA;AAAA,cASVF,OATU;AAAA;AAAA;AAAA;;AAAA,2CAUNT,GAAG,CAACU,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAAT,CAVM;;AAAA;AAYfX,UAAAA,GAAG,CAACU,IAAJ,CAAS;AACPC,YAAAA,OAAO,EAAE,kBADF;AAEPC,YAAAA,OAAO,EAAEN,OAFF;AAGPG,YAAAA,OAAO,EAAEA,OAHF;AAIPI,YAAAA,aAAa,EAAE;AAJR,WAAT;AAZe;AAAA;;AAAA;AAAA;AAAA;AAmBfb,UAAAA,GAAG,CACAc,MADH,CACU,GADV,EAEGJ,IAFH,CAEQ;AAAEK,YAAAA,OAAO,EAAE,uBAAX;AAAoCC,YAAAA,KAAK,EAAE,YAAML;AAAjD,WAFR;;AAnBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAwBA,IAAMM,WAAW,GAAG,SAAdA,WAAc,CAAOlB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEuBD,GAAG,CAACmB,IAF3B,EAERC,KAFQ,aAERA,KAFQ,EAEDC,SAFC,aAEDA,SAFC,EAEUC,QAFV,aAEUA,QAFV;AAGVC,UAAAA,MAHU,GAGDvB,GAAG,CAACG,IAAJ,CAASD,EAHR;AAAA;AAAA,0CAIMN,OAAO,CAAC4B,SAAR,CACpB;AAAEnB,YAAAA,GAAG,EAAEkB;AAAP,WADoB,EAEpB;AAAEE,YAAAA,IAAI,EAAE;AAAEJ,cAAAA,SAAS,EAAEA,SAAb;AAAwBC,cAAAA,QAAQ,EAAEA,QAAlC;AAA4CF,cAAAA,KAAK,EAAEA;AAAnD;AAAR,WAFoB,CAJN;;AAAA;AAIVb,UAAAA,OAJU;AAQhBN,UAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;AARgB;AAAA;;AAAA;AAAA;AAAA;AAUhBX,UAAAA,GAAG,CACAc,MADH,CACU,GADV,EAEGJ,IAFH,CAEQ;AAAEC,YAAAA,OAAO,EAAE,uBAAX;AAAoCK,YAAAA,KAAK,EAAE,aAAML;AAAjD,WAFR;;AAVgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;AAeA,IAAMc,YAAY,GAAG,SAAfA,YAAe,CAAO1B,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEXsB,UAAAA,MAFW,GAEFvB,GAAG,CAACG,IAAJ,CAASD,EAFP;AAAA,uBAG4CF,GAAG,CAACmB,IAHhD,EAGTQ,eAHS,cAGTA,eAHS,EAGQC,WAHR,cAGQA,WAHR,EAGqBC,kBAHrB,cAGqBA,kBAHrB;AAAA;AAAA,0CAIKjC,OAAO,CAACQ,QAAR,CAAiBmB,MAAjB,CAJL;;AAAA;AAIXhB,UAAAA,OAJW;;AAAA,gBAKboB,eAAe,KAAKpB,OAAO,CAACuB,QALf;AAAA;AAAA;AAAA;;AAAA,4CAMR7B,GAAG,CAACU,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAAT,CANQ;;AAAA;AAAA,gBAQbgB,WAAW,KAAKrB,OAAO,CAACuB,QARX;AAAA;AAAA;AAAA;;AAAA,4CASR7B,GAAG,CAACU,IAAJ,CAAS;AACdC,YAAAA,OAAO,EAAE;AADK,WAAT,CATQ;;AAAA;AAAA,gBAabgB,WAAW,KAAKC,kBAbH;AAAA;AAAA;AAAA;;AAAA,4CAcR5B,GAAG,CAACU,IAAJ,CAAS;AACdC,YAAAA,OAAO,EAAE;AADK,WAAT,CAdQ;;AAAA;AAkBjBL,UAAAA,OAAO,CAACuB,QAAR,GAAmBF,WAAnB;AAlBiB;AAAA,0CAmBXrB,OAAO,CAACwB,IAAR,EAnBW;;AAAA;AAoBjB9B,UAAAA,GAAG,CAACU,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAAT;AApBiB;AAAA;;AAAA;AAAA;AAAA;AAsBjBX,UAAAA,GAAG,CACAc,MADH,CACU,GADV,EAEGJ,IAFH,CAEQ;AAAEC,YAAAA,OAAO,EAAE,uBAAX;AAAoCK,YAAAA,KAAK,EAAE,aAAML;AAAjD,WAFR;;AAtBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AA2BA,IAAMoB,YAAY,GAAG,SAAfA,YAAe,CAAOhC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACXgC,UAAAA,QADW,GACEjC,GAAG,CAACkC,MADN,CACXD,QADW;AAEbV,UAAAA,MAFa,GAEJvB,GAAG,CAACG,IAFA;AAAA;AAAA,0CAGEL,WAAW,CAACM,QAAZ,CAAqB;AAAEC,YAAAA,GAAG,EAAE4B;AAAP,WAArB,CAHF;;AAAA;AAGbE,UAAAA,MAHa;AAAA;AAAA,0CAIGvC,OAAO,CAACQ,QAAR,CAAiB;AAAEC,YAAAA,GAAG,EAAEkB,MAAM,CAACrB;AAAd,WAAjB,CAJH;;AAAA;AAIbK,UAAAA,OAJa;AAAA;;AAAA,cAMZA,OANY;AAAA;AAAA;AAAA;;AAAA,4CAORN,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAPQ;;AAAA;AAAA,cASZuB,MATY;AAAA;AAAA;AAAA;;AAAA,4CAURlC,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAVQ;;AAAA;AAYXwB,UAAAA,MAZW,GAYF7B,OAAO,CAAC8B,QAZN;AAaXC,UAAAA,SAbW,GAaCF,MAAM,CAACG,IAAP,CAAY,UAACJ,MAAD;AAAA,mBAC5BA,MAAM,CAACK,gBAAP,CAAwBC,MAAxB,CAA+BR,QAA/B,CAD4B;AAAA,WAAZ,CAbD;;AAAA,eAgBbK,SAhBa;AAAA;AAAA;AAAA;;AAAA,4CAiBRrC,GAAG,CAACU,IAAJ,CAAS;AAAEK,YAAAA,OAAO,EAAE;AAAX,WAAT,CAjBQ;;AAAA;AAmBjBT,UAAAA,OAAO,CAAC8B,QAAR,CAAiBK,IAAjB,CAAsB;AACpBF,YAAAA,gBAAgB,EAAEL,MAAM,CAAC9B,GADL;AAEpBsC,YAAAA,UAAU,EAAE;AAFQ,WAAtB;AAnBiB;AAAA,0CAuBXpC,OAAO,CAACwB,IAAR,EAvBW;;AAAA;AAwBjB9B,UAAAA,GAAG,CACAc,MADH,CACU,GADV,EAEGJ,IAFH,CAEQ;AAAEK,YAAAA,OAAO,EAAE,6BAAX;AAA0CpB,YAAAA,OAAO,EAAEW;AAAnD,WAFR;AAxBiB;AAAA;;AAAA;AAAA;AAAA;AA4BjBN,UAAAA,GAAG,CACAc,MADH,CACU,GADV,EAEGJ,IAFH,CAEQ;AAAEC,YAAAA,OAAO,EAAE,uBAAX;AAAoCK,YAAAA,KAAK,EAAE,aAAML;AAAjD,WAFR;;AA5BiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AAiCA,IAAMgC,YAAY,GAAG,SAAfA,YAAe,CAAO5C,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACbsB,UAAAA,MADa,GACJvB,GAAG,CAACG,IADA;AAAA;AAAA;AAAA,0CAGKP,OAAO,CAACQ,QAAR,CAAiB;AAAEC,YAAAA,GAAG,EAAEkB,MAAM,CAACrB;AAAd,WAAjB,EAAqC2C,QAArC,CACpB,2BADoB,CAHL;;AAAA;AAGXtC,UAAAA,OAHW;;AAAA,cAMZA,OANY;AAAA;AAAA;AAAA;;AAAA,4CAMIN,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CANJ;;AAAA;AAOjBX,UAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE,OAAX;AAAoBkC,YAAAA,IAAI,EAAEvC,OAAO,CAAC8B;AAAlC,WAArB;AAPiB;AAAA;;AAAA;AAAA;AAAA;AASjBpC,UAAAA,GAAG,CACAc,MADH,CACU,GADV,EAEGJ,IAFH,CAEQ;AAAEC,YAAAA,OAAO,EAAE,uBAAX;AAAoCmC,YAAAA,KAAK,EAAE,aAAMnC;AAAjD,WAFR;;AATiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AAcA,IAAMoC,QAAQ,GAAG,SAAXA,QAAW,CAAOhD,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEUL,OAAO,CAACqD,SAAR,CAAkB,CACvC;AACEC,YAAAA,MAAM,EAAE;AACN,qCAAuB;AADjB;AADV,WADuC,EAMvC;AACEC,YAAAA,UAAU,EAAE;AACVC,cAAAA,KAAK,EAAE;AACLC,gBAAAA,KAAK,EAAE;AACLC,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,KAAK,EAAE,WADA;AAEPC,oBAAAA,EAAE,EAAE,UAFG;AAGPC,oBAAAA,IAAI,EAAE;AAAEC,sBAAAA,GAAG,EAAE,CAAC,uBAAD,EAA0B,IAA1B;AAAP;AAHC;AADJ;AADF;AADG;AADd,WANuC,EAmBvC;AACEC,YAAAA,KAAK,EAAE;AAAEtD,cAAAA,GAAG,EAAE,CAAC;AAAR;AADT,WAnBuC,EAuBvC;AACEuD,YAAAA,QAAQ,EAAE;AACRvC,cAAAA,SAAS,EAAE,CADH;AAERC,cAAAA,QAAQ,EAAE,CAFF;AAGR8B,cAAAA,KAAK,EAAE;AAHC;AADZ,WAvBuC,CAAlB,CAFV;;AAAA;AAEPS,UAAAA,QAFO;AAiCb5D,UAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEmD,YAAAA,QAAQ,EAAED;AAAZ,WAArB;AAjCa;AAAA;;AAAA;AAAA;AAAA;AAmCb5D,UAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;;AAnCa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;AAsCA,IAAMmD,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAO/D,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEMD,GAAG,CAACkC,MAFV,EAEhBD,QAFgB,eAEhBA,QAFgB,EAEN+B,OAFM,eAENA,OAFM;AAGlBzC,UAAAA,MAHkB,GAGTvB,GAAG,CAACG,IAAJ,CAASD,EAHA;AAAA;AAAA,0CAIHJ,WAAW,CAACM,QAAZ,CAAqB6B,QAArB,CAJG;;AAAA;AAIlBE,UAAAA,MAJkB;;AAAA,cAKnBA,MALmB;AAAA;AAAA;AAAA;;AAAA,4CAMflC,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CANe;;AAAA;AAAA;AAAA,0CASFhB,OAAO,CAACQ,QAAR,CAAiBmB,MAAjB,EAAyBsB,QAAzB,CACpB,2BADoB,CATE;;AAAA;AASlBtC,UAAAA,OATkB;;AAAA,cAYnBA,OAZmB;AAAA;AAAA;AAAA;;AAAA,4CAafN,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAbe;;AAAA;AAelBqD,UAAAA,eAfkB,GAeA1D,OAAO,CAAC8B,QAfR;AAgBxB6B,UAAAA,OAAO,CAACC,GAAR,CAAYF,eAAZ;AACMG,UAAAA,cAjBkB,GAiBD7D,OAAO,CAAC8B,QAAR,CAAiB7B,IAAjB,CAAsB,UAAC6D,MAAD;AAAA,mBAC3CA,MAAM,CAAC7B,gBAAP,CAAwBC,MAAxB,CAA+BR,QAA/B,CAD2C;AAAA,WAAtB,CAjBC;AAoBxBiC,UAAAA,OAAO,CAACC,GAAR,CAAYC,cAAZ;;AApBwB,cAqBnBA,cArBmB;AAAA;AAAA;AAAA;;AAAA,4CAsBfnE,GAAG,CACPc,MADI,CACG,GADH,EAEJJ,IAFI,CAEC;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAFD,CAtBe;;AAAA;AA2BlB0D,UAAAA,gBA3BkB,GA2BCF,cAAc,CAACG,eAAf,CAA+B/D,IAA/B,CACvB,UAACgE,EAAD;AAAA,mBAAQA,EAAE,CAACvC,QAAH,CAAYQ,MAAZ,CAAmBR,QAAnB,KAAgCuC,EAAE,CAACC,MAAH,CAAUC,QAAV,CAAmBV,OAAnB,CAAxC;AAAA,WADuB,CA3BD;;AAAA,eA8BpBM,gBA9BoB;AAAA;AAAA;AAAA;;AAAA,4CA+BfrE,GAAG,CAACU,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAAT,CA/Be;;AAAA;AAkCpB+D,UAAAA,gBAlCoB,GAkCDP,cAAc,CAACG,eAAf,CAA+B/D,IAA/B,CAAoC,UAACgE,EAAD;AAAA,mBACzDA,EAAE,CAACvC,QAAH,CAAYQ,MAAZ,CAAmBR,QAAnB,CADyD;AAAA,WAApC,CAlCC;;AAqCxB,cAAI,CAAC0C,gBAAL,EAAuB;AACrBA,YAAAA,gBAAgB,GAAG;AAAE1C,cAAAA,QAAQ,EAARA,QAAF;AAAYwC,cAAAA,MAAM,EAAE,CAACT,OAAD;AAApB,aAAnB;AACAI,YAAAA,cAAc,CAACG,eAAf,CAA+B7B,IAA/B,CAAoCiC,gBAApC;AACD,WAHD,MAGO;AACLA,YAAAA,gBAAgB,CAACF,MAAjB,CAAwB/B,IAAxB,CAA6BsB,OAA7B;AACD;;AA1CuB;AAAA,0CA2ClBzD,OAAO,CAACwB,IAAR,EA3CkB;;AAAA;AA6ClB6C,UAAAA,WA7CkB,GA6CJzC,MAAM,CAAC0C,OAAP,CAAeC,MAAf,CAClB,UAACC,GAAD,EAAMF,OAAN;AAAA,mBAAkBE,GAAG,GAAGF,OAAO,CAACJ,MAAR,CAAeO,MAAvC;AAAA,WADkB,EAElB,CAFkB,CA7CI;AAiDlBT,UAAAA,eAjDkB,GAiDAI,gBAAgB,CAACF,MAAjB,CAAwBO,MAjDxB;AAmDxB/E,UAAAA,GAAG,CAACU,IAAJ,CAAS;AACPC,YAAAA,OAAO,EAAE,2BADF;AAEP2D,YAAAA,eAAe,EAAfA,eAFO;AAGPK,YAAAA,WAAW,EAAXA,WAHO;AAIPK,YAAAA,YAAY,EAAEV,eAAe,KAAKK;AAJ3B,WAAT;AAnDwB;AAAA;;AAAA;AAAA;AAAA;AA0DxB3E,UAAAA,GAAG,CACAc,MADH,CACU,GADV,EAEGJ,IAFH,CAEQ;AAAEC,YAAAA,OAAO,EAAE,uBAAX;AAAoCmC,YAAAA,KAAK,EAAE,aAAMnC;AAAjD,WAFR;;AA1DwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B;;AA+DA,IAAMsE,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAOlF,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEbgC,UAAAA,QAFa,GAEAjC,GAAG,CAACkC,MAFJ,CAEbD,QAFa;AAGfV,UAAAA,MAHe,GAGNvB,GAAG,CAACG,IAAJ,CAASD,EAHH;AAAA;AAAA,0CAKCN,OAAO,CAACQ,QAAR,CAAiBmB,MAAjB,EAAyBsB,QAAzB,CACpB,2BADoB,CALD;;AAAA;AAKftC,UAAAA,OALe;;AAAA,cAQhBA,OARgB;AAAA;AAAA;AAAA;;AAAA,4CASZN,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CATY;;AAAA;AAWfwD,UAAAA,cAXe,GAWE7D,OAAO,CAAC8B,QAAR,CAAiB7B,IAAjB,CAAsB,UAAC6D,MAAD;AAAA,mBAC3CA,MAAM,CAAC7B,gBAAP,CAAwBC,MAAxB,CAA+BR,QAA/B,CAD2C;AAAA,WAAtB,CAXF;;AAAA,cAchBmC,cAdgB;AAAA;AAAA;AAAA;;AAAA,4CAeZnE,GAAG,CACPc,MADI,CACG,GADH,EAEJJ,IAFI,CAEC;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAFD,CAfY;;AAAA;AAmBf+D,UAAAA,gBAnBe,GAmBIP,cAAc,CAACG,eAAf,CAA+B/D,IAA/B,CAAoC,UAACgE,EAAD;AAAA,mBAC3DA,EAAE,CAACvC,QAAH,CAAYQ,MAAZ,CAAmBR,QAAnB,CAD2D;AAAA,WAApC,KAEpB;AAAEwC,YAAAA,MAAM,EAAE;AAAV,WArBgB;AAAA;AAAA,0CAuBA3E,WAAW,CAACM,QAAZ,CAAqB6B,QAArB,CAvBA;;AAAA;AAuBfE,UAAAA,MAvBe;AAwBfyC,UAAAA,WAxBe,GAwBDzC,MAAM,CAACgD,QAAP,CAAgBL,MAAhB,CAClB,UAACC,GAAD,EAAMF,OAAN;AAAA,mBAAkBE,GAAG,GAAGF,OAAO,CAACJ,MAAR,CAAeO,MAAvC;AAAA,WADkB,EAElB,CAFkB,CAxBC;AA4BrB/E,UAAAA,GAAG,CAACU,IAAJ,CAAS;AACP4D,YAAAA,eAAe,EAAEI,gBAAgB,CAACF,MAD3B;AAEPG,YAAAA,WAAW,EAAXA,WAFO;AAGPK,YAAAA,YAAY,EAAEN,gBAAgB,CAACF,MAAjB,CAAwBO,MAAxB,KAAmCJ;AAH1C,WAAT;AA5BqB;AAAA;;AAAA;AAAA;AAAA;AAkCrB3E,UAAAA,GAAG,CACAc,MADH,CACU,GADV,EAEGJ,IAFH,CAEQ;AAAEC,YAAAA,OAAO,EAAE,uBAAX;AAAoCmC,YAAAA,KAAK,EAAE,aAAMnC;AAAjD,WAFR;;AAlCqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;;AAuCA,IAAMwE,kBAAkB,GAAG,SAArBA,kBAAqB,CAAOpF,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEjBsB,UAAAA,MAFiB,GAERvB,GAAG,CAACG,IAAJ,CAASD,EAFD;AAAA;AAAA,0CAGDN,OAAO,CAACQ,QAAR,CAAiBmB,MAAjB,CAHC;;AAAA;AAGjBhB,UAAAA,OAHiB;;AAAA,cAIlBA,OAJkB;AAAA;AAAA;AAAA;;AAAA,4CAKdN,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CALc;;AAAA;AAOjByE,UAAAA,YAPiB,GAOF9E,OAAO,CAAC8B,QAAR,CAAiB2C,MAPf;AAQjBE,UAAAA,iBARiB,GAQE3E,OAAO,CAAC8B,QAAR,CAAiBiD,MAAjB,CACvB,UAACnD,MAAD;AAAA,mBAAYA,MAAM,CAACQ,UAAnB;AAAA,WADuB,EAEvBqC,MAVqB;AAWjBO,UAAAA,iBAXiB,GAWIL,iBAAgB,GAAGG,YAApB,GAAoC,GAXvC;AAajBG,UAAAA,WAbiB,GAaH;AAClBH,YAAAA,YAAY,EAAZA,YADkB;AAElBH,YAAAA,gBAAgB,EAAhBA,iBAFkB;AAGlBK,YAAAA,iBAAiB,EAAjBA;AAHkB,WAbG;AAmBvBtF,UAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE,iBAAX;AAA8B6E,YAAAA,QAAQ,EAAED;AAAxC,WAArB;AAnBuB;AAAA;;AAAA;AAAA;AAAA;AAqBvBvF,UAAAA,GAAG,CAACU,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE,aAAMA;AAAjB,WAAT;;AArBuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AAwBA,IAAM8E,cAAc,GAAG,SAAjBA,cAAiB,CAAO1F,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEb0F,UAAAA,SAFa,GAED3F,GAAG,CAACG,IAAJ,CAASD,EAFR;AAAA;AAAA,0CAGGN,OAAO,CAACQ,QAAR,CAAiBuF,SAAjB,EAA4B9C,QAA5B,CAAqC,UAArC,CAHH;;AAAA;AAGbtC,UAAAA,OAHa;;AAAA,cAIdA,OAJc;AAAA;AAAA;AAAA;;AAAA,6CAKVN,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CALU;;AAAA;AAAA;AAAA,0CAOGgF,OAAO,CAACC,GAAR,CACpBtF,OAAO,CAAC8B,QAAR,CAAiByD,GAAjB,CAAqB,iBAAO3D,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDACErC,WAAW,CAACmD,SAAZ,CAAsB,CACzC;AAAEC,sBAAAA,MAAM,EAAE;AAAE7C,wBAAAA,GAAG,EAAE8B,MAAM,CAACK;AAAd;AAAV,qBADyC,EAEzC;AAAEuD,sBAAAA,OAAO,EAAE;AAAX,qBAFyC,EAGzC;AAAEA,sBAAAA,OAAO,EAAE;AAAX,qBAHyC,EAIzC;AACEC,sBAAAA,MAAM,EAAE;AACN3F,wBAAAA,GAAG,EAAE,IADC;AAENuE,wBAAAA,WAAW,EAAE;AAAEqB,0BAAAA,IAAI,EAAE;AAAR,yBAFP;AAGN1B,wBAAAA,eAAe,EAAE;AACf0B,0BAAAA,IAAI,EAAE;AAAEC,4BAAAA,KAAK,EAAE,CAAC,2BAAD,EAA8B,CAA9B,EAAiC,CAAjC;AAAT;AADS;AAHX;AADV,qBAJyC,EAazC;AACEtC,sBAAAA,QAAQ,EAAE;AACRvD,wBAAAA,GAAG,EAAE,CADG;AAERuE,wBAAAA,WAAW,EAAE,CAFL;AAGRL,wBAAAA,eAAe,EAAE,CAHT;AAIR4B,wBAAAA,mBAAmB,EAAE;AACnBD,0BAAAA,KAAK,EAAE,CACL;AAAExC,4BAAAA,GAAG,EAAE,CAAC,cAAD,EAAiB,CAAjB;AAAP,2BADK,EAEL,CAFK,EAGL;AACE0C,4BAAAA,SAAS,EAAE,CACT;AAAEC,8BAAAA,OAAO,EAAE,CAAC,kBAAD,EAAqB,cAArB;AAAX,6BADS,EAET,GAFS;AADb,2BAHK;AADY;AAJb;AADZ,qBAbyC,CAAtB,CADF;;AAAA;AACbC,oBAAAA,MADa;AAAA,uDAkCZ;AACLnE,sBAAAA,MAAM,EAAEA,MADH;AAELoE,sBAAAA,QAAQ,EAAED,MAAM,CAAC,CAAD;AAFX,qBAlCY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAArB,CADoB,CAPH;;AAAA;AAObE,UAAAA,OAPa;AAgDnBvG,UAAAA,GAAG,CAACU,IAAJ,CAAS6F,OAAT;AAhDmB;AAAA;;AAAA;AAAA;AAAA;AAkDnBvG,UAAAA,GAAG,CACAc,MADH,CACU,GADV,EAEGJ,IAFH,CAEQ;AAAEC,YAAAA,OAAO,EAAE,uBAAX;AAAoCmC,YAAAA,KAAK,EAAE,cAAMnC;AAAjD,WAFR;;AAlDmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB,C,CAuDA;;;AACA,IAAM0E,MAAM,GAAG,SAATA,MAAS,CAAOtF,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAELwG,UAAAA,KAFK,GAEGzG,GAAG,CAACyG,KAAJ,CAAUC,CAFb;AAGXxC,UAAAA,OAAO,CAACC,GAAR,CAAYsC,KAAZ;;AAHW,gBAIPA,KAAK,CAACE,WAAN,OAAwB,MAJjB;AAAA;AAAA;AAAA;;AAAA;AAAA,0CAKiB7G,WAAW,CAACU,IAAZ,GAAmBoG,KAAnB,CAAyB,OAAzB,EAAkCC,EAAlC,CAAqC,CAArC,CALjB;;AAAA;AAKHC,UAAAA,WALG;AAAA,6CAMF7G,GAAG,CACPc,MADI,CACG,GADH,EAEJJ,IAFI,CAEC;AAAEC,YAAAA,OAAO,EAAE,cAAX;AAA2BkG,YAAAA,WAAW,EAAEA;AAAxC,WAFD,CANE;;AAAA;AAAA,gBASAL,KAAK,CAACE,WAAN,OAAwB,MATxB;AAAA;AAAA;AAAA;;AAAA;AAAA,0CAUiB7G,WAAW,CAACU,IAAZ,GAAmBoG,KAAnB,CAAyB,OAAzB,EAAkCG,EAAlC,CAAqC,CAArC,CAVjB;;AAAA;AAUHC,UAAAA,WAVG;AAAA,6CAWF/G,GAAG,CACPc,MADI,CACG,GADH,EAEJJ,IAFI,CAEC;AAAEC,YAAAA,OAAO,EAAE,cAAX;AAA2BoG,YAAAA,WAAW,EAAEA;AAAxC,WAFD,CAXE;;AAAA;AAeX/G,UAAAA,GAAG,CAACU,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAAT;AAfW;AAAA;;AAAA;AAAA;AAAA;AAiBXX,UAAAA,GAAG,CACAc,MADH,CACU,GADV,EAEGJ,IAFH,CAEQ;AAAEC,YAAAA,OAAO,EAAE,uBAAX;AAAoCK,YAAAA,KAAK,EAAE,cAAML;AAAjD,WAFR;;AAjBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf;;AAsBA,IAAMqG,OAAO,GAAG,SAAVA,OAAU,CAAOjH,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAENwG,UAAAA,KAFM,GAEEzG,GAAG,CAACyG,KAAJ,CAAUS,IAFZ;;AAAA,gBAGRT,KAAK,CAACE,WAAN,OAAwB,KAHhB;AAAA;AAAA;AAAA;;AAAA;AAAA,0CAIY7G,WAAW,CAACU,IAAZ,GAAmB0G,IAAnB,CAAwB;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAxB,CAJZ;;AAAA;AAIJzG,UAAAA,OAJI;AAAA,6CAKHT,GAAG,CAACU,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE,iBAAX;AAA8BuB,YAAAA,MAAM,EAAEzB;AAAtC,WAAT,CALG;;AAAA;AAAA,gBAMD+F,KAAK,CAACE,WAAN,OAAwB,MANvB;AAAA;AAAA;AAAA;;AAAA;AAAA,0CAOY7G,WAAW,CAACU,IAAZ,GAAmB0G,IAAnB,CAAwB;AAAEC,YAAAA,KAAK,EAAE,CAAC;AAAV,WAAxB,CAPZ;;AAAA;AAOJzG,UAAAA,QAPI;AAAA,6CAQHT,GAAG,CAACU,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE,kBAAX;AAA+BuB,YAAAA,MAAM,EAAEzB;AAAvC,WAAT,CARG;;AAAA;AAAA,gBASD+F,KAAK,CAACE,WAAN,OAAwB,QATvB;AAAA;AAAA;AAAA;;AAAA;AAAA,0CAUY7G,WAAW,CAACU,IAAZ,GAAmB0G,IAAnB,CAAwB;AAAEE,YAAAA,MAAM,EAAE,CAAC;AAAX,WAAxB,CAVZ;;AAAA;AAUJ1G,UAAAA,SAVI;AAAA,6CAWHT,GAAG,CAACU,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE,cAAX;AAA2BuB,YAAAA,MAAM,EAAEzB;AAAnC,WAAT,CAXG;;AAAA;AAaZT,UAAAA,GAAG,CAACU,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAAT;AAbY;AAAA;;AAAA;AAAA;AAAA;AAeZX,UAAAA,GAAG,CACAc,MADH,CACU,GADV,EAEGJ,IAFH,CAEQ;AAAEC,YAAAA,OAAO,EAAE,uBAAX;AAAoCK,YAAAA,KAAK,EAAE,cAAML;AAAjD,WAFR;;AAfY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB,C,CAoBA;;;AACA,IAAMyG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAOrH,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACfgC,UAAAA,QADe,GACFjC,GAAG,CAACkC,MADF,CACfD,QADe;AAEfmF,UAAAA,MAFe,GAEJpH,GAAG,CAACyG,KAFA,CAEfW,MAFe;AAGjB7F,UAAAA,MAHiB,GAGRvB,GAAG,CAACG,IAAJ,CAASD,EAHD;AAIvBgE,UAAAA,OAAO,CAACC,GAAR,CAAY5C,MAAZ;;AAJuB,gBAKnB,CAAC6F,MAAD,IAAWA,MAAM,GAAG,CAApB,IAAyBA,MAAM,GAAG,CALf;AAAA;AAAA;AAAA;;AAAA,6CAMdnH,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBuG,IAAhB,CAAqB,yCAArB,CANc;;AAAA;AAAA;AAAA;AAAA,0CASAxH,WAAW,CAACM,QAAZ,CAAqB6B,QAArB,CATA;;AAAA;AASfE,UAAAA,MATe;;AAAA,cAUhBA,MAVgB;AAAA;AAAA;AAAA;;AAAA,6CAWZlC,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,mBAArB,CAXY;;AAAA;AAcf4G,UAAAA,cAde,GAcEpF,MAAM,CAACiF,MAAP,CAAc5G,IAAd,CACrB,UAACgH,CAAD;AAAA,mBAAOA,CAAC,CAACC,OAAF,CAAUC,QAAV,OAAyBnG,MAAhC;AAAA,WADqB,CAdF;;AAAA,eAiBjBgG,cAjBiB;AAAA;AAAA;AAAA;;AAAA,6CAkBZtH,GAAG,CACPc,MADI,CACG,GADH,EAEJJ,IAFI,CAEC;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAFD,CAlBY;;AAAA;AAuBrBuB,UAAAA,MAAM,CAACiF,MAAP,CAAc1E,IAAd,CAAmB;AACjBiF,YAAAA,IAAI,EAAEC,MAAM,CAACR,MAAD,CADK;AAEjBK,YAAAA,OAAO,EAAElG;AAFQ,WAAnB;AAvBqB;AAAA,0CA2BfY,MAAM,CAACJ,IAAP,EA3Be;;AAAA;AA4BrB9B,UAAAA,GAAG,CAACU,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAAT;AA5BqB;AAAA;;AAAA;AAAA;AAAA;AA8BrBX,UAAAA,GAAG,CACAc,MADH,CACU,GADV,EAEGJ,IAFH,CAEQ;AAAEC,YAAAA,OAAO,EAAE,uBAAX;AAAoCmC,YAAAA,KAAK,EAAE,cAAMnC;AAAjD,WAFR;;AA9BqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB,C,CAmCA;;;AACA,IAAMiH,WAAW,GAAG,SAAdA,WAAc,CAAO7H,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBACYD,GAAG,CAACkC,MADhB,EACV8B,OADU,gBACVA,OADU,EACD/B,QADC,gBACDA,QADC;AAEV6F,UAAAA,QAFU,GAEG9H,GAAG,CAACmB,IAFP,CAEV2G,QAFU;AAGZC,UAAAA,OAHY,GAGF/H,GAAG,CAACG,IAAJ,CAASD,EAHP;AAAA;AAAA;AAAA,0CAKKJ,WAAW,CAACM,QAAZ,CAAqB6B,QAArB,CALL;;AAAA;AAKVE,UAAAA,MALU;AAMV6F,UAAAA,UANU,GAMG7F,MAAM,CAAC8F,WANV;AAOhBD,UAAAA,UAAU,CAACtF,IAAX,CAAgB;AACdsB,YAAAA,OAAO,EAAEA,OADK;AAEd/B,YAAAA,QAAQ,EAAEA,QAFI;AAGd8F,YAAAA,OAAO,EAAEA,OAHK;AAIdD,YAAAA,QAAQ,EAAEA;AAJI,WAAhB;AAPgB;AAAA,0CAaV3F,MAAM,CAACJ,IAAP,EAbU;;AAAA;AAchB9B,UAAAA,GAAG,CAACU,IAAJ,CAAS;AACPC,YAAAA,OAAO,EACL;AAFK,WAAT;AAdgB;AAAA;;AAAA;AAAA;AAAA;AAmBhBX,UAAAA,GAAG,CACAc,MADH,CACU,GADV,EAEGJ,IAFH,CAEQ;AAAEC,YAAAA,OAAO,EAAE,uBAAX;AAAoCmC,YAAAA,KAAK,EAAE,cAAMnC;AAAjD,WAFR;;AAnBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB,C,CAwBA;;;AACA,IAAMsH,cAAc,GAAG,SAAjBA,cAAiB,CAAOlI,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEWD,GAAG,CAACkC,MAFf,EAEXD,QAFW,gBAEXA,QAFW,EAED+B,OAFC,gBAEDA,OAFC;AAAA;AAAA,0CAGElE,WAAW,CAACmD,SAAZ,CAAsB,CACzC;AACEC,YAAAA,MAAM,EAAC;AAAC,qBAAMjB;AAAP;AADT,WADyC,CAAtB,CAHF;;AAAA;AAGbE,UAAAA,MAHa;AASnB+B,UAAAA,OAAO,CAACC,GAAR,CAAYhC,MAAZ,EATmB,CAUnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnCmB;AAAA;;AAAA;AAAA;AAAA;AAqCnBlC,UAAAA,GAAG,CAACU,IAAJ,CAAS;AAAEK,YAAAA,OAAO,EAAE,uBAAX;AAAoC+B,YAAAA,KAAK,EAAE,cAAMnC;AAAjD,WAAT;;AArCmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AA0CAuH,MAAM,CAACC,OAAP,GAAiB;AACfrI,EAAAA,UAAU,EAAVA,UADe;AAEfiC,EAAAA,YAAY,EAAZA,YAFe;AAGfY,EAAAA,YAAY,EAAZA,YAHe;AAIfI,EAAAA,QAAQ,EAARA,QAJe;AAKfkC,EAAAA,gBAAgB,EAAhBA,gBALe;AAMfE,EAAAA,kBAAkB,EAAlBA,kBANe;AAOfM,EAAAA,cAAc,EAAdA,cAPe;AAQfJ,EAAAA,MAAM,EAANA,MARe;AASf2B,EAAAA,OAAO,EAAPA,OATe;AAUflD,EAAAA,mBAAmB,EAAnBA,mBAVe;AAWf7C,EAAAA,WAAW,EAAXA,WAXe;AAYfQ,EAAAA,YAAY,EAAZA,YAZe;AAaf2F,EAAAA,gBAAgB,EAAhBA,gBAbe;AAcfQ,EAAAA,WAAW,EAAXA,WAde;AAefK,EAAAA,cAAc,EAAdA;AAfe,CAAjB","sourcesContent":["const Student = require(\"../../models/users/studentModel.js\");\r\nconst courseModel = require(\"../../models/course/courseModel.js\");\r\n\r\n//Dashboard\r\nconst getProfile = async (req, res) => {\r\n  const id = req.user;\r\n  // console.log(id);\r\n  try {\r\n    const student = await Student.findById({ _id: id.id }).select(\"-password\");\r\n    const courses = await courseModel.find().limit(61);\r\n    if (!student) {\r\n      return res.json({ message: \"No student found \" });\r\n    }\r\n    if (!courses) {\r\n      return res.json({ message: \"No courses available currently\" });\r\n    }\r\n    res.json({\r\n      message: \"Students Profile\",\r\n      Profile: student,\r\n      courses: courses,\r\n      porfileStatus: true,\r\n    });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst editProfile = async (req, res) => {\r\n  try {\r\n    const { email, firstname, lastname } = req.body;\r\n    const userId = req.user.id;\r\n    const student = await Student.updateOne(\r\n      { _id: userId },\r\n      { $set: { firstname: firstname, lastname: lastname, email: email } }\r\n    );\r\n    res.status(200).json({ message: \"Profile updated successfuly\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst editPassword = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const { currentPassword, newPassword, reEnterNewPassword } = req.body;\r\n    const student = await Student.findById(userId);\r\n    if (currentPassword !== student.password) {\r\n      return res.json({ message: \"You have entered wrong current password\" });\r\n    }\r\n    if (newPassword === student.password) {\r\n      return res.json({\r\n        message: \"New password should be different from Old password\",\r\n      });\r\n    }\r\n    if (newPassword !== reEnterNewPassword) {\r\n      return res.json({\r\n        message: \"Confirm password should same as New password\",\r\n      });\r\n    }\r\n    student.password = newPassword;\r\n    await student.save();\r\n    res.json({ message: \"Password changed successfully\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst enrollCourse = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const userId = req.user;\r\n  const course = await courseModel.findById({ _id: courseId });\r\n  const student = await Student.findById({ _id: userId.id });\r\n  try {\r\n    if (!student) {\r\n      return res.status(400).json({ message: \"Student not found\" });\r\n    }\r\n    if (!course) {\r\n      return res.status(400).json({ message: \"Course not found\" });\r\n    }\r\n    const Course = student.enrolled;\r\n    const available = Course.some((course) =>\r\n      course.coursesAvailable.equals(courseId)\r\n    );\r\n    if (available) {\r\n      return res.json({ Message: \"You have already enrolled this course\" });\r\n    }\r\n    student.enrolled.push({\r\n      coursesAvailable: course._id,\r\n      isComplete: false,\r\n    });\r\n    await student.save();\r\n    res\r\n      .status(200)\r\n      .json({ Message: \"Course enrolled successfuly\", Student: student });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst showEnrolled = async (req, res) => {\r\n  const userId = req.user;\r\n  try {\r\n    const student = await Student.findById({ _id: userId.id }).populate(\r\n      \"enrolled.coursesAvailable\"\r\n    );\r\n    if (!student) return res.status(404).json({ message: \"Student not found\" });\r\n    res.status(200).json({ message: \"Found\", List: student.enrolled });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\nconst topRanks = async (req, res) => {\r\n  try {\r\n    const students = await Student.aggregate([\r\n      {\r\n        $match: {\r\n          \"enrolled.isComplete\": true,\r\n        },\r\n      },\r\n      {\r\n        $addFields: {\r\n          Count: {\r\n            $size: {\r\n              $filter: {\r\n                input: \"$enrolled\",\r\n                as: \"enrolled\",\r\n                cond: { $eq: [\"$$enrolled.isComplete\", true] },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      {\r\n        $sort: { _id: -1 },\r\n      },\r\n\r\n      {\r\n        $project: {\r\n          firstname: 1,\r\n          lastname: 1,\r\n          Count: 1,\r\n        },\r\n      },\r\n    ]);\r\n    res.status(200).json({ rankings: students });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\nconst markVideoAsComplete = async (req, res) => {\r\n  try {\r\n    const { courseId, videoId } = req.params;\r\n    const userId = req.user.id;\r\n    const course = await courseModel.findById(courseId);\r\n    if (!course) {\r\n      return res.status(404).json({ message: \"Course not found\" });\r\n    }\r\n\r\n    const student = await Student.findById(userId).populate(\r\n      \"enrolled.coursesAvailable\"\r\n    );\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const enrolledCourses = student.enrolled;\r\n    console.log(enrolledCourses);\r\n    const enrolledCourse = student.enrolled.find((enroll) =>\r\n      enroll.coursesAvailable.equals(courseId)\r\n    );\r\n    console.log(enrolledCourse);\r\n    if (!enrolledCourse) {\r\n      return res\r\n        .status(404)\r\n        .json({ message: \"Course not enrolled by the student\" });\r\n    }\r\n\r\n    const alreadyCompleted = enrolledCourse.completedVideos.find(\r\n      (cv) => cv.courseId.equals(courseId) && cv.videos.includes(videoId)\r\n    );\r\n    if (alreadyCompleted) {\r\n      return res.json({ message: \"Video already marked as complete\" });\r\n    }\r\n\r\n    let courseCompletion = enrolledCourse.completedVideos.find((cv) =>\r\n      cv.courseId.equals(courseId)\r\n    );\r\n    if (!courseCompletion) {\r\n      courseCompletion = { courseId, videos: [videoId] };\r\n      enrolledCourse.completedVideos.push(courseCompletion);\r\n    } else {\r\n      courseCompletion.videos.push(videoId);\r\n    }\r\n    await student.save();\r\n\r\n    const totalVideos = course.section.reduce(\r\n      (acc, section) => acc + section.videos.length,\r\n      0\r\n    );\r\n    const completedVideos = courseCompletion.videos.length;\r\n\r\n    res.json({\r\n      message: \"Videos marked as complete\",\r\n      completedVideos,\r\n      totalVideos,\r\n      allCompleted: completedVideos === totalVideos,\r\n    });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\nconst completedCourses = async (req, res) => {\r\n  try {\r\n    const { courseId } = req.params;\r\n    const userId = req.user.id;\r\n\r\n    const student = await Student.findById(userId).populate(\r\n      \"enrolled.coursesAvailable\"\r\n    );\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const enrolledCourse = student.enrolled.find((enroll) =>\r\n      enroll.coursesAvailable.equals(courseId)\r\n    );\r\n    if (!enrolledCourse) {\r\n      return res\r\n        .status(404)\r\n        .json({ message: \"Course not enrolled by the student\" });\r\n    }\r\n    const courseCompletion = enrolledCourse.completedVideos.find((cv) =>\r\n      cv.courseId.equals(courseId)\r\n    ) || { videos: [] };\r\n\r\n    const course = await courseModel.findById(courseId);\r\n    const totalVideos = course.sections.reduce(\r\n      (acc, section) => acc + section.videos.length,\r\n      0\r\n    );\r\n    res.json({\r\n      completedVideos: courseCompletion.videos,\r\n      totalVideos,\r\n      allCompleted: courseCompletion.videos.length === totalVideos,\r\n    });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\nconst progressController = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const student = await Student.findById(userId);\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const totalCourses = student.enrolled.length;\r\n    const completedCourses = student.enrolled.filter(\r\n      (course) => course.isComplete\r\n    ).length;\r\n    const coursesPercentage = (completedCourses / totalCourses) * 100;\r\n\r\n    const coursesData = {\r\n      totalCourses,\r\n      completedCourses,\r\n      coursesPercentage,\r\n    };\r\n\r\n    res.status(200).json({ message: \"Progress report\", Progress: coursesData });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\nconst courseProgress = async (req, res) => {\r\n  try {\r\n    const studentId = req.user.id;\r\n    const student = await Student.findById(studentId).populate(\"enrolled\");\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const results = await Promise.all(\r\n      student.enrolled.map(async (course) => {\r\n        const result = await courseModel.aggregate([\r\n          { $match: { _id: course.coursesAvailable } },\r\n          { $unwind: \"$section\" },\r\n          { $unwind: \"$section.videos\" },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              totalVideos: { $sum: 1 },\r\n              completedVideos: {\r\n                $sum: { $cond: [\"$section.videos.completed\", 1, 0] },\r\n              },\r\n            },\r\n          },\r\n          {\r\n            $project: {\r\n              _id: 0,\r\n              totalVideos: 1,\r\n              completedVideos: 1,\r\n              completedPercentage: {\r\n                $cond: [\r\n                  { $eq: [\"$totalVideos\", 0] },\r\n                  0,\r\n                  {\r\n                    $multiply: [\r\n                      { $divide: [\"$completedVideos\", \"$totalVideos\"] },\r\n                      100,\r\n                    ],\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n          },\r\n        ]);\r\n        return {\r\n          course: course,\r\n          progress: result[0],\r\n        };\r\n      })\r\n    );\r\n    res.json(results);\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n//filtering Records\r\nconst filter = async (req, res) => {\r\n  try {\r\n    const query = req.query.f;\r\n    console.log(query);\r\n    if (query.toLowerCase() === \"paid\") {\r\n      const paidCourses = await courseModel.find().where(\"price\").gt(0);\r\n      return res\r\n        .status(200)\r\n        .json({ message: \"Paid courses\", paidCourses: paidCourses });\r\n    } else if (query.toLowerCase() === \"free\") {\r\n      const freeCourses = await courseModel.find().where(\"price\").eq(0);\r\n      return res\r\n        .status(200)\r\n        .json({ message: \"free courses\", freeCourses: freeCourses });\r\n    }\r\n    res.json({ message: \"No courses available based on Query\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst sorting = async (req, res) => {\r\n  try {\r\n    const query = req.query.sort;\r\n    if (query.toLowerCase() === \"asc\") {\r\n      const courses = await courseModel.find().sort({ title: 1 });\r\n      return res.json({ message: \"Ascending order\", course: courses });\r\n    } else if (query.toLowerCase() === \"desc\") {\r\n      const courses = await courseModel.find().sort({ title: -1 });\r\n      return res.json({ message: \"Descending order\", course: courses });\r\n    } else if (query.toLowerCase() === \"rating\") {\r\n      const courses = await courseModel.find().sort({ rating: -1 });\r\n      return res.json({ message: \"Rating order\", course: courses });\r\n    }\r\n    res.json({ message: \"No Sorting chosen\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n//Rating controller\r\nconst ratingController = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const { rating } = req.query;\r\n  const userId = req.user.id;\r\n  console.log(userId);\r\n  if (!rating || rating < 1 || rating > 5) {\r\n    return res.status(400).send(\"Invalid rating. Must be between 1 and 5\");\r\n  }\r\n  try {\r\n    const course = await courseModel.findById(courseId);\r\n    if (!course) {\r\n      return res.status(404).json(\"Course not found.\");\r\n    }\r\n\r\n    const existingRating = course.rating.find(\r\n      (r) => r.ratedBy.toString() === userId\r\n    );\r\n    if (existingRating) {\r\n      return res\r\n        .status(400)\r\n        .json({ message: \"You have already rated this course\" });\r\n    }\r\n\r\n    course.rating.push({\r\n      rate: Number(rating),\r\n      ratedBy: userId,\r\n    });\r\n    await course.save();\r\n    res.json({ message: \"Thank you for rating the course\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n//Discussions[ ASK QUESTION ]\r\nconst askQuestion = async (req, res) => {\r\n  const { videoId, courseId } = req.params;\r\n  const { question } = req.body;\r\n  const askedBy = req.user.id;\r\n  try {\r\n    const course = await courseModel.findById(courseId);\r\n    const discussion = course.discussions;\r\n    discussion.push({\r\n      videoId: videoId,\r\n      courseId: courseId,\r\n      askedBy: askedBy,\r\n      question: question,\r\n    });\r\n    await course.save();\r\n    res.json({\r\n      message:\r\n        \"We have got your question, you will get answer back from our instructor\",\r\n    });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n//Discussions List\r\nconst topDiscussions = async (req, res) => {\r\n  try {\r\n    const { courseId, videoId } = req.params;\r\n    const course = await courseModel.aggregate([\r\n      {\r\n        $match:{'_id':courseId},\r\n      },\r\n      \r\n    ]);\r\n    console.log(course)\r\n    // const discussion = course.discussions;\r\n\r\n    // let data = [];\r\n    // discussion.map((item) => {\r\n    //   if (!item) {\r\n    //     return res.json({ Message: \"There are discussions on this video\" });\r\n    //   }\r\n    //   if (item.videoId.toString() === videoId) {\r\n    //     console.log(\"Matched\");\r\n    //     data.push({\r\n    //       question: item.question,\r\n    //       answer: item.answer || \"waiting for answer\",\r\n    //       answeredBy: item.answeredBy || \"Instructor busy in Writing answer\",\r\n    //       createdAt: item.createdAt,\r\n    //     });\r\n    //     return data;\r\n    //   } else {\r\n    //     console.log(\"There are discussions on this video\");\r\n    //   }\r\n    // });\r\n    // if (data.length <= 10) {\r\n    //   res.json({\r\n    //     message: `Top ${data.length} discussions on this video`,\r\n    //     Data: data,\r\n    //   });\r\n    // }\r\n  } catch (error) {\r\n    res.json({ Message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n  getProfile,\r\n  enrollCourse,\r\n  showEnrolled,\r\n  topRanks,\r\n  completedCourses,\r\n  progressController,\r\n  courseProgress,\r\n  filter,\r\n  sorting,\r\n  markVideoAsComplete,\r\n  editProfile,\r\n  editPassword,\r\n  ratingController,\r\n  askQuestion,\r\n  topDiscussions,\r\n};\r\n"],"file":"dashboardcontroller.dev.js"}