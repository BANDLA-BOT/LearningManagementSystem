{"version":3,"sources":["dashboardcontroller.js"],"names":["Student","require","courseModel","getProfile","req","res","id","user","console","log","findById","_id","select","student","find","limit","courses","json","message","Profile","editProfile","body","email","firstname","lastname","userId","updateOne","$set","status","Error","editPassword","currentPassword","newPassword","reEnterNewPassword","password","save","enrollCourse","courseId","params","course","enrolled","push","coursesAvailable","isComplete","Message","topRanks","aggregate","$match","$addFields","Count","$size","$filter","input","as","cond","$eq","$sort","$project","students","rankings","markVideoAsComplete","videoArrId","videoId","videosArr","section","video","videos","completed","markAsComplete","trueCount","i","length","findOneAndUpdate","$addToSet","completedCourses","Data","completedList","error","progressController","totalCourses","filter","coursesPercentage","coursesData","Progress","courseProgress","studentId","populate","Promise","all","map","$unwind","$group","totalVideos","$sum","completedVideos","$cond","completedPercentage","$multiply","$divide","result","progress","results","query","f","toLowerCase","where","gt","paidCourses","eq","freeCourses","sorting","sort","title","rating","module","exports"],"mappings":"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","sourcesContent":["const Student = require('../../models/users/studentModel.js')\r\nconst courseModel = require('../../models/course/courseModel.js');\r\n\r\n\r\nconst getProfile = async (req, res) => {\r\n  const id = req.user;\r\n  console.log(id);\r\n  try {\r\n    const student = await Student.findById({ _id: id.id }).select(\"-password\");\r\n    const courses = await courseModel.find().limit(61\r\n\r\n    );\r\n    if (!student) {\r\n      return res.json({ message: \"No student found \" });\r\n    }\r\n    if (!courses) {\r\n      return res.json({ message: \"No courses available currently\" });\r\n    }\r\n    res.json({\r\n      message: \"Students Profile\",\r\n      Profile: student,\r\n      courses: courses,\r\n    });\r\n    console.log(student);\r\n  } catch (error) {}\r\n};\r\n\r\nconst editProfile = async(req,res)=>{\r\n  try {\r\n    const {email, firstname, lastname} = req.body\r\n    const userId = req.user.id\r\n    console.log(userId)\r\n    const student = await Student.updateOne(\r\n      {_id:userId},\r\n      {$set:{firstname:firstname, lastname:lastname, email:email}}\r\n    );\r\n    res.status(200).json({message:\"Profile updated successfuly\",})\r\n    \r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst editPassword = async(req,res)=>{\r\n  try {\r\n    const userId = req.user.id\r\n    const {currentPassword, newPassword, reEnterNewPassword} = req.body\r\n    const student = await Student.findById(userId)\r\n    if(currentPassword !== student.password){\r\n      return res.json({message:\"You have entered wrong current password\"})\r\n    }\r\n    if(newPassword === student.password){\r\n      return res.json({message:\"New password should be different from Old password\"})\r\n    }\r\n    if(newPassword !== reEnterNewPassword){\r\n      return res.json({message:\"Confirm password should same as New password\"})\r\n    }\r\n    student.password = newPassword\r\n    await student.save()\r\n    res.json({message:\"Password changed successfully\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst enrollCourse = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const userId = req.user;\r\n  const course = await courseModel.findById({ _id: courseId });\r\n  const student = await Student.findById({ _id: userId.id });\r\n  try {\r\n    if (!student) {\r\n      return res.status(400).json({ message: \"Student not found\" });\r\n    }\r\n    if (!course) {\r\n      return res.status(400).json({ message: \"Course not found\" });\r\n    }\r\n    student.enrolled.push({\r\n      coursesAvailable: course._id,\r\n      isComplete: false,\r\n    });\r\n    await student.save();\r\n    res\r\n      .status(200)\r\n      .json({ Message: \"Course enrolled successfuly\", Student: student });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n\r\nconst topRanks = async (req, res) => {\r\n  try {\r\n    const students = await Student.aggregate([\r\n      {\r\n        $match: {\r\n          \"enrolled.isComplete\": true,\r\n        },\r\n      },\r\n      {\r\n        $addFields: {\r\n          Count: {\r\n            $size: {\r\n              $filter: {\r\n                input: \"$enrolled\",\r\n                as: \"enrolled\",\r\n                cond: { $eq: [\"$$enrolled.isComplete\", true] },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      {\r\n        $sort: { _id: -1 },\r\n      },\r\n\r\n      {\r\n        $project: {\r\n          firstname: 1,\r\n          lastname: 1,\r\n          Count:1\r\n        },\r\n      },\r\n    ]);\r\n    res.status(200).json({ rankings: students });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst markVideoAsComplete = async(req,res)=>{\r\n  try {\r\n     const {courseId, videoArrId, videoId} = req.params\r\n     const userId = req.user.id\r\n     console.log(userId)\r\n     const course = await courseModel.findById(courseId)\r\n     const student = await Student.findById({_id:userId})\r\n     console.log(student)\r\n     if(!course){\r\n      return res.status(404).json({message:\"Course not found\"})\r\n     }\r\n     const videosArr = course.section.id(videoArrId)\r\n     const video = videosArr.videos.id(videoId)\r\n     video.completed = true\r\n     await course.save()\r\n     if(video.completed){\r\n       return res.json({message:\"You have completed the video, move to next\"})\r\n      }\r\n    res.json({message:\"Marked\", student:student})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst markAsComplete = async (req, res) => {\r\n  try {\r\n    const { courseId } = req.params;\r\n    const userId = req.user;\r\n    const course = await courseModel.findById(courseId)\r\n    const videosArr = course.section\r\n    const videos = videosArr[0].videos\r\n    let trueCount = 0;\r\n    for(let i=0; i<=videos.length; i++){\r\n      if(videos[i].completed){\r\n          trueCount++\r\n          console.log(videos[i])\r\n          if(videos.length === trueCount){\r\n            const student = await Student.findOneAndUpdate(\r\n              { _id: userId.id, \"enrolled.coursesAvailable\": courseId },\r\n              {\r\n                $set: { \"enrolled.$.isComplete\": true },\r\n                $addToSet: { completedCourses: { courses: courseId } },\r\n              },\r\n              { new: true }\r\n            );\r\n            return res.json({message:\"Successfully completed Course\", Data:student})\r\n          }\r\n      }\r\n      else{\r\n        return res.json({message:\"You have to complete all the videos\"})\r\n      }\r\n    }\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst completedCourses = async(req,res)=>{\r\n  try {\r\n    const userId = req.user\r\n    const completedList = await Student.findById(userId.id)\r\n    res.json(completedList.completedCourses)\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", error:error.message})\r\n  }\r\n}\r\n\r\nconst progressController = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const student = await Student.findById(userId);\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const totalCourses = student.enrolled.length;\r\n    const completedCourses = student.enrolled.filter(\r\n      (course) => course.isComplete\r\n    ).length;\r\n    const coursesPercentage = (completedCourses / totalCourses) * 100;\r\n\r\n    const coursesData = {\r\n      totalCourses,\r\n      completedCourses,\r\n      coursesPercentage,\r\n    };\r\n\r\n    res.status(200).json({ message: \"Progress report\", Progress: coursesData });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst courseProgress = async (req, res) => {\r\n  try {\r\n    const studentId = req.user.id;\r\n    const student = await Student.findById(studentId).populate(\"enrolled\");\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const results = await Promise.all(\r\n        student.enrolled.map(async (course) => {\r\n        const result = await courseModel.aggregate([\r\n          { $match: { _id: course.coursesAvailable } },\r\n          { $unwind: \"$section\" },\r\n          { $unwind: \"$section.videos\" },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              totalVideos: { $sum: 1 },\r\n              completedVideos: {\r\n                $sum: { $cond: [\"$section.videos.completed\", 1, 0] },\r\n              },\r\n            },\r\n          },\r\n          {\r\n            $project: {\r\n              _id: 0,\r\n              totalVideos: 1,\r\n              completedVideos: 1,\r\n              completedPercentage: {\r\n                $cond: [\r\n                    { $eq: ['$totalVideos', 0] },\r\n                    0,\r\n                    { \r\n                      $multiply: [\r\n                        { $divide: ['$completedVideos', '$totalVideos'] },\r\n                        100\r\n                      ]\r\n                    }\r\n                  ]\r\n              },\r\n            },\r\n          },\r\n        ]);\r\n        return {\r\n            course:course,\r\n            progress:result[0]\r\n        }\r\n      })\r\n    )\r\n    res.json(results)\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n\r\n//filtering Records \r\n\r\nconst filter = async(req,res)=>{\r\n  try {\r\n    const query = req.query.f\r\n    console.log(query)\r\n    if(query.toLowerCase() === 'paid'){\r\n      const paidCourses = await courseModel.find().where('price').gt(0);\r\n      return res.status(200).json({message:\"Paid courses\", paidCourses:paidCourses})\r\n    }else if(query.toLowerCase() === 'free'){\r\n      const freeCourses = await courseModel.find().where('price').eq(0)\r\n      return res.status(200).json({message:\"free courses\", freeCourses:freeCourses})\r\n    }\r\n    res.json({message:\"No courses available based on Query\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst sorting = async(req,res)=>{\r\n  try {\r\n    const query = req.query.sort\r\n    if(query.toLowerCase() === \"asc\"){\r\n      const courses = await courseModel.find().sort({title:1})\r\n      return res.json({message:\"Ascending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"desc\"){\r\n      const courses = await courseModel.find().sort({title:-1})\r\n      return res.json({message:\"Descending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"rating\"){\r\n      const courses = await courseModel.find().sort({rating:-1})\r\n      return res.json({message:\"Rating order\", course:courses})\r\n    }\r\n    res.json({message:\"No Sorting chosen\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  getProfile,\r\n  enrollCourse,\r\n  topRanks,\r\n  markAsComplete,\r\n  completedCourses,\r\n  progressController,\r\n  courseProgress,\r\n  filter,\r\n  sorting,\r\n  markVideoAsComplete,\r\n  editProfile,\r\n  editPassword\r\n};\r\n"],"file":"dashboardcontroller.dev.js"}