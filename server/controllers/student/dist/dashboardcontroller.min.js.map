{"version":3,"sources":["dashboardcontroller.js"],"names":["Student","require","courseModel","req","res","id","user","console","getProfile","findById","_id","select","student","find","limit","courses","json","message","Profile","log","_req$body","email","firstname","lastname","userId","regeneratorRuntime","async","_context2","prev","next","body","awrap","updateOne","$set","sent","status","t0","Error","stop","enrollCourse","courseId","course","_context3","params","abrupt","push","coursesAvailable","isComplete","save","Message","deleteEnroll","result","_context4","$pull","enrolled","nModified","send","students","_context5","aggregate","$match","enrolled.isComplete","$size","$filter","input","as","cond","$eq","$sort","$project","Count","rankings","markVideoAsComplete","_req$params","videoArrId","videoId","videosArr","video","_context6","section","videos","completed","markAsComplete","trueCount","i","_context7","length","findOneAndUpdate","enrolled.coursesAvailable","completedCourses","new","Data","completedList","_context8","error","progressController","totalCourses","_completedCourses","coursesData","_context9","filter","coursesPercentage","studentId","results","_context11","populate","Promise","all","map","_context10","$unwind","$group","totalVideos","$sum","$cond","completedVideos","completedPercentage","$multiply","$divide","EnrollUpdated","$addFields","query","paidCourses","freeCourses","_context12","f","where","gt","toLowerCase","eq","sorting","_courses","_courses2","_context13","sort","title","rating","module","exports","topRanks","courseProgress","editProfile"],"mappings":"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","file":"dashboardcontroller.min.js","sourcesContent":["const Student = require('../../models/users/studentModel.js')\r\nconst courseModel = require('../../models/course/courseModel.js');\r\n\r\n\r\nconst getProfile = async (req, res) => {\r\n  const id = req.user;\r\n  console.log(id);\r\n  try {\r\n    const student = await Student.findById({ _id: id.id }).select(\"-password\");\r\n    const courses = await courseModel.find().limit(61\r\n\r\n    );\r\n    if (!student) {\r\n      return res.json({ message: \"No student found \" });\r\n    }\r\n    if (!courses) {\r\n      return res.json({ message: \"No courses available currently\" });\r\n    }\r\n    res.json({\r\n      message: \"Students Profile\",\r\n      Profile: student,\r\n      courses: courses,\r\n    });\r\n    console.log(student);\r\n  } catch (error) {}\r\n};\r\nconst editProfile = async(req,res)=>{\r\n  try {\r\n    const {email, firstname, lastname} = req.body\r\n    const userId = req.user.id\r\n    console.log(userId)\r\n    const student = await Student.updateOne(\r\n      {_id:userId},\r\n      {$set:{firstname:firstname, lastname:lastname, email:email}}\r\n    );\r\n    res.status(200).json({message:\"Profile updated successfuly\",})\r\n    \r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\nconst enrollCourse = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const userId = req.user;\r\n  const course = await courseModel.findById({ _id: courseId });\r\n  const student = await Student.findById({ _id: userId.id });\r\n  try {\r\n    if (!student) {\r\n      return res.status(400).json({ message: \"Student not found\" });\r\n    }\r\n    if (!course) {\r\n      return res.status(400).json({ message: \"Course not found\" });\r\n    }\r\n    student.enrolled.push({\r\n      coursesAvailable: course._id,\r\n      isComplete: false,\r\n    });\r\n    await student.save();\r\n    res\r\n      .status(200)\r\n      .json({ Message: \"Course enrolled successfuly\", Student: student });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n\r\nconst deleteEnroll = async (req, res) => {\r\n  try {\r\n    const userId = req.user;\r\n    const { courseId } = req.params;\r\n    const result = await Student.updateOne(\r\n      { _id: userId.id },\r\n      { $pull: { enrolled: { _id: courseId } } }\r\n    );\r\n    if (result.nModified > 0) {\r\n      res.status(200).send({ message: \"Enrolls Updated\" });\r\n    }\r\n    res.json({ EnrollUpdated: result });\r\n  } catch (error) {\r\n    res.status(500).send({ message: \"Server error\", error });\r\n  }\r\n};\r\nconst topRanks = async (req, res) => {\r\n  try {\r\n    const students = await Student.aggregate([\r\n      {\r\n        $match: {\r\n          \"enrolled.isComplete\": true,\r\n        },\r\n      },\r\n      {\r\n        $addFields: {\r\n          Count: {\r\n            $size: {\r\n              $filter: {\r\n                input: \"$enrolled\",\r\n                as: \"enrolled\",\r\n                cond: { $eq: [\"$$enrolled.isComplete\", true] },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      {\r\n        $sort: { _id: -1 },\r\n      },\r\n\r\n      {\r\n        $project: {\r\n          firstname: 1,\r\n          lastname: 1,\r\n          Count:1\r\n        },\r\n      },\r\n    ]);\r\n    res.status(200).json({ rankings: students });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst markVideoAsComplete = async(req,res)=>{\r\n  try {\r\n     const {courseId, videoArrId, videoId} = req.params\r\n     const course = await courseModel.findById(courseId)\r\n     if(!course){\r\n      return res.status(404).json({message:\"Course not found\"})\r\n     }\r\n     const videosArr = course.section.id(videoArrId)\r\n     const video = videosArr.videos.id(videoId)\r\n     video.completed = true\r\n     await course.save()\r\n     if(video.completed){\r\n       return res.json({message:\"You have completed the video, move to next\"})\r\n      }\r\n    //  res.json(video)\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst markAsComplete = async (req, res) => {\r\n  try {\r\n    const { courseId } = req.params;\r\n    const userId = req.user;\r\n    const course = await courseModel.findById(courseId)\r\n    const videosArr = course.section\r\n    const videos = videosArr[0].videos\r\n    let trueCount = 0;\r\n    for(let i=0; i<=videos.length; i++){\r\n      if(videos[i].completed){\r\n          trueCount++\r\n          console.log(videos[i])\r\n          if(videos.length === trueCount){\r\n            const student = await Student.findOneAndUpdate(\r\n              { _id: userId.id, \"enrolled.coursesAvailable\": courseId },\r\n              {\r\n                $set: { \"enrolled.$.isComplete\": true },\r\n                $addToSet: { completedCourses: { courses: courseId } },\r\n              },\r\n              { new: true }\r\n            );\r\n            return res.json({message:\"Successfully completed Course\", Data:student})\r\n          }\r\n      }\r\n      else{\r\n        return res.json({message:\"You have to complete all the videos\"})\r\n      }\r\n    }\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst completedCourses = async(req,res)=>{\r\n  try {\r\n    const userId = req.user\r\n    const completedList = await Student.findById(userId.id)\r\n    res.json(completedList.completedCourses)\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", error:error.message})\r\n  }\r\n}\r\nconst progressController = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const student = await Student.findById(userId);\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n\r\n    const totalCourses = student.enrolled.length;\r\n    const completedCourses = student.enrolled.filter(\r\n      (course) => course.isComplete\r\n    ).length;\r\n    const coursesPercentage = (completedCourses / totalCourses) * 100;\r\n\r\n    const coursesData = {\r\n      totalCourses,\r\n      completedCourses,\r\n      coursesPercentage,\r\n    };\r\n\r\n    res.status(200).json({ message: \"Progress report\", Progress: coursesData });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst courseProgress = async (req, res) => {\r\n  try {\r\n    const studentId = req.user.id;\r\n    const student = await Student.findById(studentId).populate(\"enrolled\");\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const results = await Promise.all(\r\n        student.enrolled.map(async (course) => {\r\n        const result = await courseModel.aggregate([\r\n          { $match: { _id: course.coursesAvailable } },\r\n          { $unwind: \"$section\" },\r\n          { $unwind: \"$section.videos\" },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              totalVideos: { $sum: 1 },\r\n              completedVideos: {\r\n                $sum: { $cond: [\"$section.videos.completed\", 1, 0] },\r\n              },\r\n            },\r\n          },\r\n          {\r\n            $project: {\r\n              _id: 0,\r\n              totalVideos: 1,\r\n              completedVideos: 1,\r\n              completedPercentage: {\r\n                $cond: [\r\n                    { $eq: ['$totalVideos', 0] },\r\n                    0,\r\n                    { \r\n                      $multiply: [\r\n                        { $divide: ['$completedVideos', '$totalVideos'] },\r\n                        100\r\n                      ]\r\n                    }\r\n                  ]\r\n              },\r\n            },\r\n          },\r\n        ]);\r\n        return {\r\n            course:course,\r\n            progress:result[0]\r\n        }\r\n      })\r\n    )\r\n    res.json(results)\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n\r\n\r\n//filtering Records \r\n\r\nconst filter = async(req,res)=>{\r\n  try {\r\n    const query = req.query.f\r\n    console.log(query)\r\n    if(query.toLowerCase() === 'paid'){\r\n      const paidCourses = await courseModel.find().where('price').gt(0);\r\n      return res.status(200).json({message:\"Paid courses\", paidCourses:paidCourses})\r\n    }else if(query.toLowerCase() === 'free'){\r\n      const freeCourses = await courseModel.find().where('price').eq(0)\r\n      return res.status(200).json({message:\"free courses\", freeCourses:freeCourses})\r\n    }\r\n    res.json({message:\"No courses available based on Query\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst sorting = async(req,res)=>{\r\n  try {\r\n    const query = req.query.sort\r\n    if(query.toLowerCase() === \"asc\"){\r\n      const courses = await courseModel.find().sort({title:1})\r\n      return res.json({message:\"Ascending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"desc\"){\r\n      const courses = await courseModel.find().sort({title:-1})\r\n      return res.json({message:\"Descending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"rating\"){\r\n      const courses = await courseModel.find().sort({rating:-1})\r\n      return res.json({message:\"Rating order\", course:courses})\r\n    }\r\n    res.json({message:\"No Sorting chosen\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  getProfile,\r\n  enrollCourse,\r\n  deleteEnroll,\r\n  topRanks,\r\n  markAsComplete,\r\n  completedCourses,\r\n  progressController,\r\n  courseProgress,\r\n  filter,\r\n  sorting,\r\n  markVideoAsComplete,\r\n  editProfile\r\n};\r\n"]}