{"version":3,"sources":["dashboardcontroller.js"],"names":["Student","require","courseModel","getProfile","req","res","id","student","courses","regeneratorRuntime","async","_context","prev","next","user","console","log","awrap","findById","_id","select","sent","find","limit","abrupt","json","message","status","t0","stop","editProfile","_req$body","email","firstname","lastname","userId","_context2","body","updateOne","$set","Error","editPassword","_req$body2","currentPassword","newPassword","reEnterNewPassword","_context3","Profile","password","save","enrollCourse","courseId","course","Course","_context4","params","enrolled","some","coursesAvailable","equals","Message","push","showEnrolled","_context5","populate","List","topRanks","students","_context6","aggregate","$match","enrolled.isComplete","$addFields","Count","$size","$filter","input","as","cond","$eq","$project","rankings","markVideoAsComplete","_req$params","enrolledCourses","totalVideos","completedVideos","_context7","videoId","section","reduce","acc","videos","length","courseCompletion","allCompleted","error","completedCourses","enrolledCourse","_courseCompletion","_context8","cv","sections","progressController","totalCourses","_completedCourses","coursesData","_context9","filter","available","coursesPercentage","Progress","studentId","all","map","result","_context10","$unwind","$group","$sum","$cond","completedPercentage","$multiply","$divide","results","_context11","query","f","toLowerCase","where","gt","paidCourses","eq","freeCourses","_context12","sorting","_courses","_courses2","_context13","sort","title","rating","_context14","send","r","ratedBy","toString","rate","Number","resourceController","filePath","_context15","concat","file","destination","filename","resources","url","module","exports","ratingController"],"mappings":"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","file":"dashboardcontroller.min.js","sourcesContent":["const Student = require('../../models/users/studentModel.js')\r\nconst courseModel = require('../../models/course/courseModel.js');\r\n\r\n\r\n\r\nconst getProfile = async (req, res) => {\r\n  const id = req.user;\r\n  console.log(id);\r\n  try {\r\n    const student = await Student.findById({ _id: id.id }).select(\"-password\");\r\n    const courses = await courseModel.find().limit(61\r\n\r\n    );\r\n    if (!student) {\r\n      return res.json({ message: \"No student found \" });\r\n    }\r\n    if (!courses) {\r\n      return res.json({ message: \"No courses available currently\" });\r\n    }\r\n    res.json({\r\n      message: \"Students Profile\",\r\n      Profile: student,\r\n      courses: courses,\r\n      status:true\r\n    });\r\n    console.log(student);\r\n  } catch (error) {}\r\n};\r\n\r\nconst editProfile = async(req,res)=>{\r\n  try {\r\n    const {email, firstname, lastname} = req.body\r\n    const userId = req.user.id\r\n    console.log(userId)\r\n    const student = await Student.updateOne(\r\n      {_id:userId},\r\n      {$set:{firstname:firstname, lastname:lastname, email:email}}\r\n    );\r\n    res.status(200).json({message:\"Profile updated successfuly\",})\r\n    \r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst editPassword = async(req,res)=>{\r\n  try {\r\n    const userId = req.user.id\r\n    const {currentPassword, newPassword, reEnterNewPassword} = req.body\r\n    const student = await Student.findById(userId)\r\n    if(currentPassword !== student.password){\r\n      return res.json({message:\"You have entered wrong current password\"})\r\n    }\r\n    if(newPassword === student.password){\r\n      return res.json({message:\"New password should be different from Old password\"})\r\n    }\r\n    if(newPassword !== reEnterNewPassword){\r\n      return res.json({message:\"Confirm password should same as New password\"})\r\n    }\r\n    student.password = newPassword\r\n    await student.save()\r\n    res.json({message:\"Password changed successfully\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst enrollCourse = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const userId = req.user;\r\n  const course = await courseModel.findById({ _id: courseId });\r\n  const student = await Student.findById({ _id: userId.id });\r\n  try {\r\n    if (!student) {\r\n      return res.status(400).json({ message: \"Student not found\" });\r\n    }\r\n    if (!course) {\r\n      return res.status(400).json({ message: \"Course not found\" });\r\n    }\r\n    const Course = student.enrolled\r\n    const available = Course.some(course => course.coursesAvailable.equals(courseId))\r\n    if(available){\r\n      return res.json({Message:\"You have already enrolled this course\"})\r\n    }\r\n    student.enrolled.push({\r\n      coursesAvailable: course._id,\r\n      isComplete: false,\r\n    });\r\n    await student.save();\r\n    res\r\n      .status(200)\r\n      .json({ Message: \"Course enrolled successfuly\", Student: student });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst showEnrolled = async (req,res)=>{\r\n  const userId = req.user\r\n  try {\r\n    const student = await Student.findById({_id:userId.id}).populate('enrolled.coursesAvailable')\r\n    if(!student) return res.status(404).json({message:\"Student not found\"})\r\n    res.status(200).json({message:\"Found\", List:student.enrolled})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", error:error.message})\r\n  }\r\n}\r\nconst topRanks = async (req, res) => {\r\n  try {\r\n    const students = await Student.aggregate([\r\n      {\r\n        $match: {\r\n          \"enrolled.isComplete\": true,\r\n        },\r\n      },\r\n      {\r\n        $addFields: {\r\n          Count: {\r\n            $size: {\r\n              $filter: {\r\n                input: \"$enrolled\",\r\n                as: \"enrolled\",\r\n                cond: { $eq: [\"$$enrolled.isComplete\", true] },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      {\r\n        $sort: { _id: -1 },\r\n      },\r\n\r\n      {\r\n        $project: {\r\n          firstname: 1,\r\n          lastname: 1,\r\n          Count:1\r\n        },\r\n      },\r\n    ]);\r\n    res.status(200).json({ rankings: students });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst markVideoAsComplete = async(req,res)=>{\r\n  try {\r\n    const {courseId, videoId} = req.params\r\n    const userId = req.user.id\r\n    const course = await courseModel.findById(courseId)\r\n    if(!course){\r\n      return res.status(404).json({message:\"Course not found\"});\r\n    }\r\n\r\n    const student = await Student.findById(userId).populate('enrolled.coursesAvailable')\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const enrolledCourses = student.enrolled\r\n    console.log(enrolledCourses)\r\n    // const enrolledCourse = student.enrolled.find(enroll => enroll.coursesAvailable.equals(courseId))\r\n    // console.log(enrolledCourse)\r\n    // if (!enrolledCourse) {\r\n    //   return res.status(404).json({ message: \"Course not enrolled by the student\" });\r\n    // }\r\n\r\n    // const alreadyCompleted = enrolledCourse.completedVideos.find(cv => cv.courseId.equals(courseId) && cv.videos.includes(videoId))\r\n    // if (alreadyCompleted) {\r\n    //   return res.json({ message: \"Video already marked as complete\" });\r\n    // }\r\n\r\n    // let courseCompletion = enrolledCourse.completedVideos.find( cv=> cv.courseId.equals(courseId))\r\n    // if(!courseCompletion){\r\n    //   courseCompletion = { courseId, videos:[videoId]}\r\n    //   enrolledCourse.completedVideos.push(courseCompletion)\r\n    // }\r\n    // else {\r\n    //   courseCompletion.videos.push(videoId);\r\n    // }\r\n    await student.save()\r\n\r\n    const totalVideos = course.section.reduce((acc, section)=> acc+ section.videos.length, 0)\r\n    const completedVideos = courseCompletion.videos.length\r\n\r\n    res.json({\r\n      message:\"Videos marked as complete\",\r\n      completedVideos,\r\n      totalVideos,\r\n      allCompleted:completedVideos === totalVideos\r\n    })\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\", error: error.message});\r\n  }\r\n}\r\n\r\nconst completedCourses = async(req,res)=>{\r\n try {\r\n  const {courseId} = req.params\r\n  const userId = req.user.id\r\n\r\n  const student = await Student.findById(userId).populate('enrolled.coursesAvailable')\r\n  if (!student) {\r\n    return res.status(404).json({ message: \"Student not found\" });\r\n  }\r\n  const enrolledCourse = student.enrolled.find(enroll => enroll.coursesAvailable.equals(courseId));\r\n  if (!enrolledCourse) {\r\n      return res.status(404).json({ message: \"Course not enrolled by the student\" });\r\n  }\r\n  const courseCompletion = enrolledCourse.completedVideos.find(cv => cv.courseId.equals(courseId)) || { videos: [] };\r\n\r\n  const course = await courseModel.findById(courseId);\r\n    const totalVideos = course.sections.reduce((acc, section) => acc + section.videos.length, 0);\r\n    res.json({\r\n      completedVideos: courseCompletion.videos,\r\n      totalVideos,\r\n      allCompleted: courseCompletion.videos.length === totalVideos\r\n    });\r\n } catch (error) {\r\n  res.status(500).json({ message: \"Internal server error\", error: error.message });\r\n }\r\n}\r\n\r\nconst progressController = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const student = await Student.findById(userId);\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const totalCourses = student.enrolled.length;\r\n    const completedCourses = student.enrolled.filter(\r\n      (course) => course.isComplete\r\n    ).length;\r\n    const coursesPercentage = (completedCourses / totalCourses) * 100;\r\n\r\n    const coursesData = {\r\n      totalCourses,\r\n      completedCourses,\r\n      coursesPercentage,\r\n    };\r\n\r\n    res.status(200).json({ message: \"Progress report\", Progress: coursesData });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst courseProgress = async (req, res) => {\r\n  try {\r\n    const studentId = req.user.id;\r\n    const student = await Student.findById(studentId).populate(\"enrolled\");\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const results = await Promise.all(\r\n        student.enrolled.map(async (course) => {\r\n        const result = await courseModel.aggregate([\r\n          { $match: { _id: course.coursesAvailable } },\r\n          { $unwind: \"$section\" },\r\n          { $unwind: \"$section.videos\" },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              totalVideos: { $sum: 1 },\r\n              completedVideos: {\r\n                $sum: { $cond: [\"$section.videos.completed\", 1, 0] },\r\n              },\r\n            },\r\n          },\r\n          {\r\n            $project: {\r\n              _id: 0,\r\n              totalVideos: 1,\r\n              completedVideos: 1,\r\n              completedPercentage: {\r\n                $cond: [\r\n                    { $eq: ['$totalVideos', 0] },\r\n                    0,\r\n                    { \r\n                      $multiply: [\r\n                        { $divide: ['$completedVideos', '$totalVideos'] },\r\n                        100\r\n                      ]\r\n                    }\r\n                  ]\r\n              },\r\n            },\r\n          },\r\n        ]);\r\n        return {\r\n            course:course,\r\n            progress:result[0]\r\n        }\r\n      })\r\n    )\r\n    res.json(results)\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n\r\n//filtering Records \r\n\r\nconst filter = async(req,res)=>{\r\n  try {\r\n    const query = req.query.f\r\n    console.log(query)\r\n    if(query.toLowerCase() === 'paid'){\r\n      const paidCourses = await courseModel.find().where('price').gt(0);\r\n      return res.status(200).json({message:\"Paid courses\", paidCourses:paidCourses})\r\n    }else if(query.toLowerCase() === 'free'){\r\n      const freeCourses = await courseModel.find().where('price').eq(0)\r\n      return res.status(200).json({message:\"free courses\", freeCourses:freeCourses})\r\n    }\r\n    res.json({message:\"No courses available based on Query\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst sorting = async(req,res)=>{\r\n  try {\r\n    const query = req.query.sort\r\n    if(query.toLowerCase() === \"asc\"){\r\n      const courses = await courseModel.find().sort({title:1})\r\n      return res.json({message:\"Ascending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"desc\"){\r\n      const courses = await courseModel.find().sort({title:-1})\r\n      return res.json({message:\"Descending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"rating\"){\r\n      const courses = await courseModel.find().sort({rating:-1})\r\n      return res.json({message:\"Rating order\", course:courses})\r\n    }\r\n    res.json({message:\"No Sorting chosen\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst ratingController = async(req,res)=>{\r\n  const { courseId } = req.params\r\n  const { rating } = req.query\r\n  const userId = req.user.id\r\n  console.log(userId)\r\n  if(!rating || rating < 1 || rating > 5){\r\n    return res.status(400).send('Invalid rating. Must be between 1 and 5')\r\n  }\r\n  try {\r\n    const course = await courseModel.findById(courseId);\r\n    if(!course){\r\n      return res.status(404).json('Course not found.')\r\n    }\r\n\r\n    const existingRating = course.rating.find(r => r.ratedBy.toString() === userId)\r\n    if(existingRating){\r\n      return res.status(400).json({message:\"You have already rated this course\"})\r\n    }\r\n    \r\n    course.rating.push({\r\n      rate:Number(rating),\r\n      ratedBy:userId\r\n    })\r\n    await course.save()\r\n    res.json({message:\"Thank you for rating the course\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", error:error.message})\r\n  }\r\n}\r\n\r\n\r\nconst resourceController = async(req,res)=>{\r\n  try {\r\n      const { courseId } = req.params\r\n      const {title} = req.body\r\n      const userId = req.user\r\n      const filePath = `${req.file.destination}/${req.file.filename}`\r\n      const course = await courseModel.findById(courseId).populate('resources')\r\n      course.resources.push({title:title, url:filePath})\r\n      await course.save()\r\n    res.json(course)\r\n  } catch (error) {\r\n    res.json(error.message)\r\n  }\r\n}\r\nmodule.exports = {\r\n  getProfile,\r\n  enrollCourse,\r\n  showEnrolled,\r\n  topRanks,\r\n  resourceController,\r\n  completedCourses,\r\n  progressController,\r\n  courseProgress,\r\n  filter,\r\n  sorting,\r\n  markVideoAsComplete,\r\n  editProfile,\r\n  editPassword,\r\n  ratingController\r\n};\r\n"]}