{"version":3,"sources":["dashboardcontroller.js"],"names":["Student","require","courseModel","getProfile","req","res","id","student","courses","regeneratorRuntime","async","_context","prev","next","adminModel","awrap","_id","select","sent","find","limit","abrupt","json","message","user","Profile","porfileStatus","t0","status","Message","stop","_req$body","email","firstname","lastname","userId","_context2","body","updateOne","$set","Error","editPassword","_req$body2","currentPassword","newPassword","reEnterNewPassword","_context3","findById","password","enrollCourse","courseId","course","admin","Course","_context4","params","editProfile","enrolled","some","coursesAvailable","equals","courseRequests","push","save","showEnrolled","_context5","populate","List","error","topRanks","students","_context6","aggregate","$match","enrolled.isComplete","$addFields","Count","$size","$filter","input","as","cond","$eq","$sort","rankings","markVideoAsComplete","_req$params","videoId","enrolledCourses","enrolledCourse","courseCompletion","totalVideos","completedVideos","_context7","enroll","console","log","cv","videos","includes","section","reduce","acc","length","completedCourses","_context8","available","sections","allCompleted","progressController","totalCourses","_completedCourses","coursesData","_context9","filter","isComplete","Progress","courseProgress","studentId","results","_context11","Promise","all","map","result","_context10","$unwind","$group","$sum","$cond","$project","completedPercentage","$multiply","$divide","progress","query","paidCourses","freeCourses","_context12","f","toLowerCase","where","gt","eq","sorting","_courses","_courses2","_context13","sort","title","rating","ratingController","_context14","send","r","ratedBy","toString","rate","Number","_req$params2","question","askedBy","_context15","discussions","_context16","module","exports","askQuestion","topDiscussions"],"mappings":"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","file":"dashboardcontroller.min.js","sourcesContent":["const Student = require(\"../../models/users/studentModel.js\");\r\nconst courseModel = require(\"../../models/course/courseModel.js\");\r\nconst adminModel = require(\"../../models/users/adminModel.js\");\r\n\r\n//Dashboard\r\nconst getProfile = async (req, res) => {\r\n  const id = req.user;\r\n  // console.log(id);\r\n  try {\r\n    const student = await Student.findById({ _id: id.id }).select(\"-password\");\r\n    const courses = await courseModel.find().limit(61);\r\n    if (!student) {\r\n      return res.json({ message: \"No student found \" });\r\n    }\r\n    if (!courses) {\r\n      return res.json({ message: \"No courses available currently\" });\r\n    }\r\n    res.json({\r\n      message: \"Students Profile\",\r\n      Profile: student,\r\n      courses: courses,\r\n      porfileStatus: true,\r\n    });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst editProfile = async (req, res) => {\r\n  try {\r\n    const { email, firstname, lastname } = req.body;\r\n    const userId = req.user.id;\r\n    const student = await Student.updateOne(\r\n      { _id: userId },\r\n      { $set: { firstname: firstname, lastname: lastname, email: email } }\r\n    );\r\n    res.status(200).json({ message: \"Profile updated successfuly\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst editPassword = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const { currentPassword, newPassword, reEnterNewPassword } = req.body;\r\n    const student = await Student.findById(userId);\r\n    if (currentPassword !== student.password) {\r\n      return res.json({ message: \"You have entered wrong current password\" });\r\n    }\r\n    if (newPassword === student.password) {\r\n      return res.json({\r\n        message: \"New password should be different from Old password\",\r\n      });\r\n    }\r\n    if (newPassword !== reEnterNewPassword) {\r\n      return res.json({\r\n        message: \"Confirm password should same as New password\",\r\n      });\r\n    }\r\n    student.password = newPassword;\r\n    await student.save();\r\n    res.json({ message: \"Password changed successfully\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n\r\nconst enrollCourse = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const userId = req.user;\r\n  const course = await courseModel.findById({ _id: courseId });\r\n  const admin = await adminModel.findOne()\r\n  const student = await Student.findById({ _id: userId.id });\r\n  try {\r\n    if (!student) {\r\n      return res.status(400).json({ message: \"Student not found\" });\r\n    }\r\n    if (!course) {\r\n      return res.status(400).json({ message: \"Course not found\" });\r\n    }\r\n    const Course = student.enrolled;\r\n    const available = Course.some((course) =>\r\n      course.coursesAvailable.equals(courseId)\r\n    );\r\n    if (available) {\r\n      return res.json({ Message: \"You have already enrolled this course\" });\r\n    }\r\n    // student.enrolled.push({\r\n    //   coursesAvailable: course._id,\r\n    //   isComplete: false,\r\n    // });\r\n    // await student.save();\r\n    admin.courseRequests.push({\r\n      courseId:course._id,\r\n      studentId:student._id,\r\n      paid:true\r\n    })\r\n    await admin.save()\r\n    res\r\n      .status(200)\r\n      .json({ Message: \"Request sent to the Admin, check your EnrolledList after now\",});\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n\r\nconst showEnrolled = async (req, res) => {\r\n  const userId = req.user;\r\n  try {\r\n    const student = await Student.findById({ _id: userId.id }).populate(\r\n      \"enrolled.coursesAvailable\"\r\n    );\r\n    if (!student) return res.status(404).json({ message: \"Student not found\" });\r\n    res.status(200).json({ message: \"Found\", List: student.enrolled });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\nconst topRanks = async (req, res) => {\r\n  try {\r\n    const students = await Student.aggregate([\r\n      {\r\n        $match: {\r\n          \"enrolled.isComplete\": true,\r\n        },\r\n      },\r\n      {\r\n        $addFields: {\r\n          Count: {\r\n            $size: {\r\n              $filter: {\r\n                input: \"$enrolled\",\r\n                as: \"enrolled\",\r\n                cond: { $eq: [\"$$enrolled.isComplete\", true] },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      {\r\n        $sort: { _id: -1 },\r\n      },\r\n\r\n      {\r\n        $project: {\r\n          firstname: 1,\r\n          lastname: 1,\r\n          Count: 1,\r\n        },\r\n      },\r\n    ]);\r\n    res.status(200).json({ rankings: students });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\nconst markVideoAsComplete = async (req, res) => {\r\n  try {\r\n    const { courseId, videoId } = req.params;\r\n    const userId = req.user.id;\r\n    const course = await courseModel.findById(courseId);\r\n    if (!course) {\r\n      return res.status(404).json({ message: \"Course not found\" });\r\n    }\r\n\r\n    const student = await Student.findById(userId).populate(\r\n      \"enrolled.coursesAvailable\"\r\n    );\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const enrolledCourses = student.enrolled;\r\n    console.log(enrolledCourses);\r\n    const enrolledCourse = student.enrolled.find((enroll) =>\r\n      enroll.coursesAvailable.equals(courseId)\r\n    );\r\n    console.log(enrolledCourse);\r\n    if (!enrolledCourse) {\r\n      return res\r\n        .status(404)\r\n        .json({ message: \"Course not enrolled by the student\" });\r\n    }\r\n\r\n    const alreadyCompleted = enrolledCourse.completedVideos.find(\r\n      (cv) => cv.courseId.equals(courseId) && cv.videos.includes(videoId)\r\n    );\r\n    if (alreadyCompleted) {\r\n      return res.json({ message: \"Video already marked as complete\" });\r\n    }\r\n\r\n    let courseCompletion = enrolledCourse.completedVideos.find((cv) =>\r\n      cv.courseId.equals(courseId)\r\n    );\r\n    if (!courseCompletion) {\r\n      courseCompletion = { courseId, videos: [videoId] };\r\n      enrolledCourse.completedVideos.push(courseCompletion);\r\n    } else {\r\n      courseCompletion.videos.push(videoId);\r\n    }\r\n    await student.save();\r\n\r\n    const totalVideos = course.section.reduce(\r\n      (acc, section) => acc + section.videos.length,\r\n      0\r\n    );\r\n    const completedVideos = courseCompletion.videos.length;\r\n\r\n    res.json({\r\n      message: \"Videos marked as complete\",\r\n      completedVideos,\r\n      totalVideos,\r\n      allCompleted: completedVideos === totalVideos,\r\n    });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\nconst completedCourses = async (req, res) => {\r\n  try {\r\n    const { courseId } = req.params;\r\n    const userId = req.user.id;\r\n\r\n    const student = await Student.findById(userId).populate(\r\n      \"enrolled.coursesAvailable\"\r\n    );\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const enrolledCourse = student.enrolled.find((enroll) =>\r\n      enroll.coursesAvailable.equals(courseId)\r\n    );\r\n    if (!enrolledCourse) {\r\n      return res\r\n        .status(404)\r\n        .json({ message: \"Course not enrolled by the student\" });\r\n    }\r\n    const courseCompletion = enrolledCourse.completedVideos.find((cv) =>\r\n      cv.courseId.equals(courseId)\r\n    ) || { videos: [] };\r\n\r\n    const course = await courseModel.findById(courseId);\r\n    const totalVideos = course.sections.reduce(\r\n      (acc, section) => acc + section.videos.length,\r\n      0\r\n    );\r\n    res.json({\r\n      completedVideos: courseCompletion.videos,\r\n      totalVideos,\r\n      allCompleted: courseCompletion.videos.length === totalVideos,\r\n    });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\nconst progressController = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const student = await Student.findById(userId);\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const totalCourses = student.enrolled.length;\r\n    const completedCourses = student.enrolled.filter(\r\n      (course) => course.isComplete\r\n    ).length;\r\n    const coursesPercentage = (completedCourses / totalCourses) * 100;\r\n\r\n    const coursesData = {\r\n      totalCourses,\r\n      completedCourses,\r\n      coursesPercentage,\r\n    };\r\n\r\n    res.status(200).json({ message: \"Progress report\", Progress: coursesData });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\nconst courseProgress = async (req, res) => {\r\n  try {\r\n    const studentId = req.user.id;\r\n    const student = await Student.findById(studentId).populate(\"enrolled\");\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const results = await Promise.all(\r\n      student.enrolled.map(async (course) => {\r\n        const result = await courseModel.aggregate([\r\n          { $match: { _id: course.coursesAvailable } },\r\n          { $unwind: \"$section\" },\r\n          { $unwind: \"$section.videos\" },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              totalVideos: { $sum: 1 },\r\n              completedVideos: {\r\n                $sum: { $cond: [\"$section.videos.completed\", 1, 0] },\r\n              },\r\n            },\r\n          },\r\n          {\r\n            $project: {\r\n              _id: 0,\r\n              totalVideos: 1,\r\n              completedVideos: 1,\r\n              completedPercentage: {\r\n                $cond: [\r\n                  { $eq: [\"$totalVideos\", 0] },\r\n                  0,\r\n                  {\r\n                    $multiply: [\r\n                      { $divide: [\"$completedVideos\", \"$totalVideos\"] },\r\n                      100,\r\n                    ],\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n          },\r\n        ]);\r\n        return {\r\n          course: course,\r\n          progress: result[0],\r\n        };\r\n      })\r\n    );\r\n    res.json(results);\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n//filtering Records\r\nconst filter = async (req, res) => {\r\n  try {\r\n    const query = req.query.f;\r\n    console.log(query);\r\n    if (query.toLowerCase() === \"paid\") {\r\n      const paidCourses = await courseModel.find().where(\"price\").gt(0);\r\n      return res\r\n        .status(200)\r\n        .json({ message: \"Paid courses\", paidCourses: paidCourses });\r\n    } else if (query.toLowerCase() === \"free\") {\r\n      const freeCourses = await courseModel.find().where(\"price\").eq(0);\r\n      return res\r\n        .status(200)\r\n        .json({ message: \"free courses\", freeCourses: freeCourses });\r\n    }\r\n    res.json({ message: \"No courses available based on Query\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst sorting = async (req, res) => {\r\n  try {\r\n    const query = req.query.sort;\r\n    if (query.toLowerCase() === \"asc\") {\r\n      const courses = await courseModel.find().sort({ title: 1 });\r\n      return res.json({ message: \"Ascending order\", course: courses });\r\n    } else if (query.toLowerCase() === \"desc\") {\r\n      const courses = await courseModel.find().sort({ title: -1 });\r\n      return res.json({ message: \"Descending order\", course: courses });\r\n    } else if (query.toLowerCase() === \"rating\") {\r\n      const courses = await courseModel.find().sort({ rating: -1 });\r\n      return res.json({ message: \"Rating order\", course: courses });\r\n    }\r\n    res.json({ message: \"No Sorting chosen\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n//Rating controller\r\nconst ratingController = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const { rating } = req.query;\r\n  const userId = req.user.id;\r\n  console.log(userId);\r\n  if (!rating || rating < 1 || rating > 5) {\r\n    return res.status(400).send(\"Invalid rating. Must be between 1 and 5\");\r\n  }\r\n  try {\r\n    const course = await courseModel.findById(courseId);\r\n    if (!course) {\r\n      return res.status(404).json(\"Course not found.\");\r\n    }\r\n\r\n    const existingRating = course.rating.find(\r\n      (r) => r.ratedBy.toString() === userId\r\n    );\r\n    if (existingRating) {\r\n      return res\r\n        .status(400)\r\n        .json({ message: \"You have already rated this course\" });\r\n    }\r\n\r\n    course.rating.push({\r\n      rate: Number(rating),\r\n      ratedBy: userId,\r\n    });\r\n    await course.save();\r\n    res.json({ message: \"Thank you for rating the course\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n//Discussions[ ASK QUESTION ]\r\nconst askQuestion = async (req, res) => {\r\n  const { videoId, courseId } = req.params;\r\n  const { question } = req.body;\r\n  const askedBy = req.user.id;\r\n  try {\r\n    const course = await courseModel.findById(courseId);\r\n    const discussion = course.discussions;\r\n    discussion.push({\r\n      videoId: videoId,\r\n      courseId: courseId,\r\n      askedBy: askedBy,\r\n      question: question,\r\n    });\r\n    await course.save();\r\n    res.json({\r\n      message:\r\n        \"We have got your question, you will get answer back from our instructor\",\r\n    });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n//Discussions List\r\nconst topDiscussions = async (req, res) => {\r\n  try {\r\n    const { courseId, videoId } = req.params;\r\n    const course = await courseModel.aggregate([\r\n      {\r\n        $match:{'_id':courseId},\r\n      },\r\n      \r\n    ]);\r\n    console.log(course)\r\n    // const discussion = course.discussions;\r\n\r\n    // let data = [];\r\n    // discussion.map((item) => {\r\n    //   if (!item) {\r\n    //     return res.json({ Message: \"There are discussions on this video\" });\r\n    //   }\r\n    //   if (item.videoId.toString() === videoId) {\r\n    //     console.log(\"Matched\");\r\n    //     data.push({\r\n    //       question: item.question,\r\n    //       answer: item.answer || \"waiting for answer\",\r\n    //       answeredBy: item.answeredBy || \"Instructor busy in Writing answer\",\r\n    //       createdAt: item.createdAt,\r\n    //     });\r\n    //     return data;\r\n    //   } else {\r\n    //     console.log(\"There are discussions on this video\");\r\n    //   }\r\n    // });\r\n    // if (data.length <= 10) {\r\n    //   res.json({\r\n    //     message: `Top ${data.length} discussions on this video`,\r\n    //     Data: data,\r\n    //   });\r\n    // }\r\n  } catch (error) {\r\n    res.json({ Message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n  getProfile,\r\n  enrollCourse,\r\n  showEnrolled,\r\n  topRanks,\r\n  completedCourses,\r\n  progressController,\r\n  courseProgress,\r\n  filter,\r\n  sorting,\r\n  markVideoAsComplete,\r\n  editProfile,\r\n  editPassword,\r\n  ratingController,\r\n  askQuestion,\r\n  topDiscussions,\r\n};\r\n"]}