{"version":3,"sources":["dashboardcontroller.js"],"names":["Student","require","courseModel","req","res","id","user","console","getProfile","findById","_id","select","student","find","limit","courses","json","message","Profile","log","editProfile","_req$body","email","firstname","lastname","userId","regeneratorRuntime","async","_context2","prev","next","body","awrap","updateOne","sent","status","t0","Error","stop","editPassword","_req$body2","currentPassword","newPassword","reEnterNewPassword","_context3","password","abrupt","save","enrollCourse","courseId","course","_context4","params","enrolled","push","$set","students","_context5","aggregate","$match","enrolled.isComplete","$addFields","input","as","cond","$eq","$sort","$project","Count","rankings","markVideoAsComplete","videoArrId","videoId","videosArr","section","video","videos","completed","_context6","markAsComplete","trueCount","i","_context7","length","findOneAndUpdate","enrolled.coursesAvailable","enrolled.$.isComplete","$addToSet","completedCourses","new","Data","completedList","_context8","error","filter","isComplete","coursesData","totalCourses","coursesPercentage","Progress","_context9","courseProgress","studentId","results","_context11","populate","Promise","all","map","result","_context10","coursesAvailable","$unwind","$group","totalVideos","$sum","Message","$cond","completedVideos","$multiply","$divide","progress","f","query","toLowerCase","where","gt","paidCourses","eq","freeCourses","_context12","sorting","_courses","_courses2","_context13","sort","title","rating","module","exports","topRanks","progressController"],"mappings":"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","file":"dashboardcontroller.min.js","sourcesContent":["const Student = require('../../models/users/studentModel.js')\r\nconst courseModel = require('../../models/course/courseModel.js');\r\n\r\n\r\nconst getProfile = async (req, res) => {\r\n  const id = req.user;\r\n  console.log(id);\r\n  try {\r\n    const student = await Student.findById({ _id: id.id }).select(\"-password\");\r\n    const courses = await courseModel.find().limit(61\r\n\r\n    );\r\n    if (!student) {\r\n      return res.json({ message: \"No student found \" });\r\n    }\r\n    if (!courses) {\r\n      return res.json({ message: \"No courses available currently\" });\r\n    }\r\n    res.json({\r\n      message: \"Students Profile\",\r\n      Profile: student,\r\n      courses: courses,\r\n    });\r\n    console.log(student);\r\n  } catch (error) {}\r\n};\r\n\r\nconst editProfile = async(req,res)=>{\r\n  try {\r\n    const {email, firstname, lastname} = req.body\r\n    const userId = req.user.id\r\n    console.log(userId)\r\n    const student = await Student.updateOne(\r\n      {_id:userId},\r\n      {$set:{firstname:firstname, lastname:lastname, email:email}}\r\n    );\r\n    res.status(200).json({message:\"Profile updated successfuly\",})\r\n    \r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst editPassword = async(req,res)=>{\r\n  try {\r\n    const userId = req.user.id\r\n    const {currentPassword, newPassword, reEnterNewPassword} = req.body\r\n    const student = await Student.findById(userId)\r\n    if(currentPassword !== student.password){\r\n      return res.json({message:\"You have entered wrong current password\"})\r\n    }\r\n    if(newPassword === student.password){\r\n      return res.json({message:\"New password should be different from Old password\"})\r\n    }\r\n    if(newPassword !== reEnterNewPassword){\r\n      return res.json({message:\"Confirm password should same as New password\"})\r\n    }\r\n    student.password = newPassword\r\n    await student.save()\r\n    res.json({message:\"Password changed successfully\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst enrollCourse = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const userId = req.user;\r\n  const course = await courseModel.findById({ _id: courseId });\r\n  const student = await Student.findById({ _id: userId.id });\r\n  try {\r\n    if (!student) {\r\n      return res.status(400).json({ message: \"Student not found\" });\r\n    }\r\n    if (!course) {\r\n      return res.status(400).json({ message: \"Course not found\" });\r\n    }\r\n    student.enrolled.push({\r\n      coursesAvailable: course._id,\r\n      isComplete: false,\r\n    });\r\n    await student.save();\r\n    res\r\n      .status(200)\r\n      .json({ Message: \"Course enrolled successfuly\", Student: student });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n\r\nconst topRanks = async (req, res) => {\r\n  try {\r\n    const students = await Student.aggregate([\r\n      {\r\n        $match: {\r\n          \"enrolled.isComplete\": true,\r\n        },\r\n      },\r\n      {\r\n        $addFields: {\r\n          Count: {\r\n            $size: {\r\n              $filter: {\r\n                input: \"$enrolled\",\r\n                as: \"enrolled\",\r\n                cond: { $eq: [\"$$enrolled.isComplete\", true] },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      {\r\n        $sort: { _id: -1 },\r\n      },\r\n\r\n      {\r\n        $project: {\r\n          firstname: 1,\r\n          lastname: 1,\r\n          Count:1\r\n        },\r\n      },\r\n    ]);\r\n    res.status(200).json({ rankings: students });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst markVideoAsComplete = async(req,res)=>{\r\n  try {\r\n     const {courseId, videoArrId, videoId} = req.params\r\n     const userId = req.user.id\r\n     console.log(userId)\r\n     const course = await courseModel.findById(courseId)\r\n     const student = await Student.findById({_id:userId})\r\n     console.log(student)\r\n     if(!course){\r\n      return res.status(404).json({message:\"Course not found\"})\r\n     }\r\n     const videosArr = course.section.id(videoArrId)\r\n     const video = videosArr.videos.id(videoId)\r\n     video.completed = true\r\n     await course.save()\r\n     if(video.completed){\r\n       return res.json({message:\"You have completed the video, move to next\"})\r\n      }\r\n    res.json({message:\"Marked\", student:student})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst markAsComplete = async (req, res) => {\r\n  try {\r\n    const { courseId } = req.params;\r\n    const userId = req.user;\r\n    const course = await courseModel.findById(courseId)\r\n    const videosArr = course.section\r\n    const videos = videosArr[0].videos\r\n    let trueCount = 0;\r\n    for(let i=0; i<=videos.length; i++){\r\n      if(videos[i].completed){\r\n          trueCount++\r\n          console.log(videos[i])\r\n          if(videos.length === trueCount){\r\n            const student = await Student.findOneAndUpdate(\r\n              { _id: userId.id, \"enrolled.coursesAvailable\": courseId },\r\n              {\r\n                $set: { \"enrolled.$.isComplete\": true },\r\n                $addToSet: { completedCourses: { courses: courseId } },\r\n              },\r\n              { new: true }\r\n            );\r\n            return res.json({message:\"Successfully completed Course\", Data:student})\r\n          }\r\n      }\r\n      else{\r\n        return res.json({message:\"You have to complete all the videos\"})\r\n      }\r\n    }\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst completedCourses = async(req,res)=>{\r\n  try {\r\n    const userId = req.user\r\n    const completedList = await Student.findById(userId.id)\r\n    res.json(completedList.completedCourses)\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", error:error.message})\r\n  }\r\n}\r\n\r\nconst progressController = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const student = await Student.findById(userId);\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const totalCourses = student.enrolled.length;\r\n    const completedCourses = student.enrolled.filter(\r\n      (course) => course.isComplete\r\n    ).length;\r\n    const coursesPercentage = (completedCourses / totalCourses) * 100;\r\n\r\n    const coursesData = {\r\n      totalCourses,\r\n      completedCourses,\r\n      coursesPercentage,\r\n    };\r\n\r\n    res.status(200).json({ message: \"Progress report\", Progress: coursesData });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst courseProgress = async (req, res) => {\r\n  try {\r\n    const studentId = req.user.id;\r\n    const student = await Student.findById(studentId).populate(\"enrolled\");\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const results = await Promise.all(\r\n        student.enrolled.map(async (course) => {\r\n        const result = await courseModel.aggregate([\r\n          { $match: { _id: course.coursesAvailable } },\r\n          { $unwind: \"$section\" },\r\n          { $unwind: \"$section.videos\" },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              totalVideos: { $sum: 1 },\r\n              completedVideos: {\r\n                $sum: { $cond: [\"$section.videos.completed\", 1, 0] },\r\n              },\r\n            },\r\n          },\r\n          {\r\n            $project: {\r\n              _id: 0,\r\n              totalVideos: 1,\r\n              completedVideos: 1,\r\n              completedPercentage: {\r\n                $cond: [\r\n                    { $eq: ['$totalVideos', 0] },\r\n                    0,\r\n                    { \r\n                      $multiply: [\r\n                        { $divide: ['$completedVideos', '$totalVideos'] },\r\n                        100\r\n                      ]\r\n                    }\r\n                  ]\r\n              },\r\n            },\r\n          },\r\n        ]);\r\n        return {\r\n            course:course,\r\n            progress:result[0]\r\n        }\r\n      })\r\n    )\r\n    res.json(results)\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n\r\n//filtering Records \r\n\r\nconst filter = async(req,res)=>{\r\n  try {\r\n    const query = req.query.f\r\n    console.log(query)\r\n    if(query.toLowerCase() === 'paid'){\r\n      const paidCourses = await courseModel.find().where('price').gt(0);\r\n      return res.status(200).json({message:\"Paid courses\", paidCourses:paidCourses})\r\n    }else if(query.toLowerCase() === 'free'){\r\n      const freeCourses = await courseModel.find().where('price').eq(0)\r\n      return res.status(200).json({message:\"free courses\", freeCourses:freeCourses})\r\n    }\r\n    res.json({message:\"No courses available based on Query\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst sorting = async(req,res)=>{\r\n  try {\r\n    const query = req.query.sort\r\n    if(query.toLowerCase() === \"asc\"){\r\n      const courses = await courseModel.find().sort({title:1})\r\n      return res.json({message:\"Ascending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"desc\"){\r\n      const courses = await courseModel.find().sort({title:-1})\r\n      return res.json({message:\"Descending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"rating\"){\r\n      const courses = await courseModel.find().sort({rating:-1})\r\n      return res.json({message:\"Rating order\", course:courses})\r\n    }\r\n    res.json({message:\"No Sorting chosen\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  getProfile,\r\n  enrollCourse,\r\n  topRanks,\r\n  markAsComplete,\r\n  completedCourses,\r\n  progressController,\r\n  courseProgress,\r\n  filter,\r\n  sorting,\r\n  markVideoAsComplete,\r\n  editProfile,\r\n  editPassword\r\n};\r\n"]}