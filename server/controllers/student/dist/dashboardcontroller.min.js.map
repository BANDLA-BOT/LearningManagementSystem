{"version":3,"sources":["dashboardcontroller.js"],"names":["Student","require","courseModel","getProfile","req","res","id","student","courses","regeneratorRuntime","async","_context","prev","next","studentModel","user","console","log","awrap","findById","_id","select","sent","find","limit","abrupt","message","json","Profile","t0","stop","_req$body","email","firstname","lastname","userId","_context2","body","updateOne","$set","status","Error","editPassword","_req$body2","currentPassword","newPassword","reEnterNewPassword","_context3","password","save","enrollCourse","courseId","course","Course","_context4","params","enrolled","equals","push","isComplete","Message","showEnrolled","_context5","populate","List","error","topRanks","students","_context6","aggregate","$match","enrolled.isComplete","$addFields","$size","$filter","input","as","cond","$eq","$sort","$project","Count","rankings","markVideoAsComplete","_req$params","enrolledCourses","totalVideos","completedVideos","_context7","videoId","section","reduce","acc","videos","length","courseCompletion","allCompleted","enrolledCourse","enroll","coursesAvailable","cv","sections","_context8","progressController","totalCourses","_completedCourses","coursesData","_context9","completedCourses","filter","coursesPercentage","Progress","courseProgress","studentId","results","_context11","Promise","all","map","result","_context10","$unwind","$group","$sum","$cond","completedPercentage","$multiply","$divide","progress","query","toLowerCase","where","gt","paidCourses","eq","freeCourses","_context12","sorting","_courses","_courses2","_context13","sort","title","rating"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,sCAClBC,YAAcD,QAAQ,sCADtBD,aAAiBC,QAAC,sCAKlBE,WAAa,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAHbC,EAAAA,EAAYC,KAKhBC,QAAQC,IAAIX,GAFKK,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAS,MAAAlB,QAAAmB,SAAA,CAAAC,IAAAd,EAAAA,KAAAe,OAAA,cAAA,KAAA,EAAA,OAAAd,EAAAI,EAAAW,KAAAX,EAAAE,KAAA,EAAAJ,mBAAAS,MAAAhB,YAAAqB,OAAAC,MAAA,KAAA,KAAA,EAAA,GAAAhB,EAAAG,EAAAW,KAAAf,EAAA,CAAAI,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAc,OAAA,SAAApB,EACND,KAAIW,CADEW,QAAA,uBAAA,KAAA,GAAA,GAAAlB,EAAA,CAAAG,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAc,OAAA,SAAApB,EAAAsB,KAAA,CAAAD,QAAA,oCAAA,KAAA,GAI0BN,EAAAA,KAAAA,CAAFM,QAAgBL,mBAYrDO,QAASrB,EAhBIC,QAAAA,IAAAQ,QAAAC,IAAAV,GAAAI,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAkB,GAAAlB,EAAA,MAAA,GAAA,KAAA,GAAA,IAAA,MAAA,OAAAA,EAAAmB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAKTtB,YALS,SAAAJ,EAAAC,GAAA,IAAA0B,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA1B,mBAAAC,MAAA,SAAA0B,GAAA,OAAA,OAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,KAAA,EAAA,OAAAuB,EAAAxB,KAAA,EAAAmB,EAAA3B,EAAAiC,KAAAL,EAAAD,EAAAC,MAQVzB,EARUwB,EAQVxB,UARU2B,EAAAH,EAAAG,SAAAC,EAAA/B,EAAAW,KAAAT,GAAAU,QAAAC,IAAAkB,GAAAC,EAAAvB,KAAA,EAAAJ,mBAAAS,MAAAlB,QAAAsC,UA6Bb,CAAClB,IAAIe,GA7BQ,CAAAI,KAAA,CAAAN,UAAAA,EAAAC,SASN7B,EAAS2B,MAAAA,MATH,KAAA,EAAAI,EAAAd,KASGjB,EAAAmC,OATH,KAAAb,KAAA,CAAAD,QAAA,gCAAAU,EAAAvB,KAAA,GAAA,MAAA,KAAA,GAAAuB,EAAAxB,KAAA,GAAAwB,EAAAP,GAAAO,EAAA,MAAA,GAAA/B,EAAAmC,OAWVhC,KAAAA,KAXU,CAAAkB,QAAA,wBAAAe,MAAAL,EAAAP,GAAAH,UAAA,KAAA,GAAA,IAAA,MAAA,OAAAU,EAAAN,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAuCbY,aAAe,SAAMtC,EAAIC,GAAV,IAAA8B,EAAAQ,EAAAC,EAAAC,EAAAC,EAAAvC,EAAA,OAAAE,mBAAAC,MAAA,SAAAqC,GAAA,OAAA,OAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,KAAA,EAAA,OAAAkC,EAAAnC,KAAA,EA3BGc,EAAOtB,EAAEW,KAAAT,GA2BZqC,EAvCFvC,EAAAiC,KAYNO,EA2BQD,EA3BRC,gBAZMC,EAuCEF,EAvCFE,YAAAC,EAuCEH,EAvCFG,mBAuCEC,EAAAlC,KAAA,EAAAJ,mBAAAS,MAIKlB,QAAQmB,SAASgB,IAJtB,KAAA,EAAA,GAIX5B,EAJWwC,EAAAzB,KAvCFsB,IAAArC,EAAAyC,SAuCE,OAAAD,EAAAtB,OAAA,SAzBdpB,EAACsB,KAAK,CAAAD,QAAA,6CAyBQqB,EAAAlC,KAAA,EAAA,MAAA,KAAA,EAAA,GAvBfe,IAASrB,EAFFyC,SAyBQ,OAAAD,EAAAtB,OAAA,SAtBfjB,EAAAA,KAASA,CAAAA,QAAAA,wDAsBMuC,EAAAlC,KAAA,GAAA,MAAA,KAAA,GAAA,GApBjBG,IAAYT,EAoBK,OAAAwC,EAAAtB,OAAA,SAvCFpB,EAAAsB,KAAA,CAAAD,QAAA,kDAuCEqB,EAAAlC,KAAA,GAAA,MAAA,KAAA,GAAA,OAcjBN,EAAQyC,SAAWH,EAdFE,EAAAlC,KAAA,GAAAJ,mBAAAS,MAvCFX,EAAA0C,QAuCE,KAAA,GAvCF5C,EAAAsB,KAAA,CAAAD,QAAA,kCAuCEqB,EAAAlC,KAAA,GAAA,MAAA,KAAA,GAAAkC,EAAAnC,KAAA,GAAAmC,EAAAlB,GAAAkB,EAAA,MAAA,GAkBjB1C,EAAImC,OAAO,KAAKb,KAAK,CAACD,QAAQ,wBAAyBe,MAAMM,EAAAlB,GAAMH,UAlBlD,KAAA,GAAA,IAAA,MAAA,OAAAqB,EAAAjB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAvCFoB,aAAA,SAAA9C,EAAAC,GAAA,IAAA8C,EAAAhB,EAAAiB,EAAA7C,EAAA8C,EAAA,OAAA5C,mBAAAC,MAAA,SAAA4C,GAAA,OAAA,OAAAA,EAAA1C,KAAA0C,EAAAzC,MAAA,KAAA,EAAA,OAAAsC,EAAA/C,EAAAmD,OAAAJ,SAAAhB,EAAA/B,EAAAW,KAAAuC,EAAAzC,KAAA,EAAAJ,mBAAAS,MAAnBhB,YAAAiB,SAAA,CAAAC,IAAA+B,KAAmB,KAAA,EAAA,OAAnBC,EAAmBE,EAAAhC,KAAAgC,EAAAzC,KAAA,EAAAJ,mBAAAS,MAiEKlB,QAAQmB,SAAS,CAAEC,IAAKe,EAAO7B,MAjEpC,KAAA,EAAA,GAiEXC,EAjEW+C,EAAAhC,KAAAgC,EAAA1C,KAAA,EAuBCL,EAvBD,CAAA+C,EAAAzC,KAAA,GAAA,MAAA,OAAAyC,EAAA7B,OAAA,SAoENpB,EAAImC,OAAO,KAAKb,KAAK,CAAED,QAAS,uBApE1B,KAAA,GAAA,GAuBC0B,EAvBD,CAAAE,EAAAzC,KAAA,GAAA,MAAA,OAAAyC,EAAA7B,OAAA,SAuBCpB,EAAAmC,OAAA,KAAAb,KAAA,CAAAD,QAAA,sBAvBD,KAAA,GAAA,GAuBC2B,EAAA9C,EAAAiD,SAEqBpD,EAAIiC,KAAlCL,SAAAA,GAFS,OAAAoB,EAETpB,iBAFSyB,OAAAN,KAvBD,OAAAG,EAAA7B,OAAA,SA2BfT,EAAOW,KAAKQ,CAAAA,QAAZ,2CA3BemB,EAAAzC,KAAA,GAAA,MAAA,KAAA,GAAA,OAuBCN,EAAAiD,SAAAE,KAAA,CAMbtC,iBAAIe,EAAAA,IAALwB,YACA,IA9BaL,EAAAzC,KAAA,GAAAJ,mBAAAS,MA8BNe,EAAAA,QA9BM,KAAA,GA8BeC,EAAmBF,OAAAA,KAAzCL,KAAA,CAAAiC,QAAA,8BAAA5D,QAAAO,IA9BO+C,EAAAzC,KAAA,GAAA,MAAA,KAAA,GAAAyC,EAAA1C,KAAA,GAAA0C,EAAAzB,GAAAyB,EAAA,MAAA,GAuFfjD,EAhEgBmC,OAAA,KAKVjC,KAAAA,CAAAA,QALU,wBAAAkC,MAAAa,EAAAzB,GAAAH,UAvBD,KAAA,GAAA,IAAA,MAAA,OAAA4B,EAAAxB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAgCM+B,aAArB,SAAAzD,EAAAC,GAAA,IAAA8B,EAAA5B,EAAA,OAAAE,mBAAAC,MAAA,SAAAoD,GAAA,OAAA,OAAAA,EAAAlD,KAAAkD,EAAAjD,MAAA,KAAA,EAAA,OATgBsB,EAAA/B,EAAAW,KAShB+C,EAAAlD,KAAA,EAAAkD,EAAAjD,KAAA,EAAAJ,mBAAAS,MA+DsBlB,QAAQmB,SAAS,CAACC,IAAIe,EAAO7B,KAAKyD,SAAS,8BA/DjE,KAAA,EAAA,GA+DMxD,EA/DNuD,EAAAxC,KAAA,CAAAwC,EAAAjD,KAAA,EAAA,MAAA,OAAAiD,EAAArC,OAAA,SATgBpB,EAAAmC,OAAA,KAAAb,KAAA,CAAAD,QAAA,uBAShB,KAAA,EATgBrB,EAAAmC,OAAA,KAAAb,KAAA,CAAAD,QAAA,QAAAsC,KAAAzD,EAAAiD,WAShBM,EAAAjD,KAAA,GAAA,MAAA,KAAA,GAAAiD,EAAAlD,KAAA,GAAAkD,EAAAjC,GAAAiC,EAAA,MAAA,GAGAzD,EAAAA,OAAImC,KAAJb,KAAA,CAAgBA,QAAK,wBAAAsC,MAAAH,EAAAjC,GAAAH,UAHrB,KAAA,GAAA,IAAA,MAAA,OAAAoC,EAAAhC,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAGqBoC,SAArB,SAAA9D,EAAAC,GAAA,IAAA8D,EAAA,OAAA1D,mBAAAC,MAAA,SAAA0D,GAAA,OAAA,OAAAA,EAAAxD,KAAAwD,EAAAvD,MAAA,KAAA,EAAA,OAAAuD,EAAAxD,KAAA,EAAAwD,EAAAvD,KAAA,EAAAJ,mBAAAS,MAZgBlB,QAAAqE,UAAA,CAAA,CAAAC,OAAA,CAAAC,uBAAA,IAApB,CAwFQC,WAAY,CAxEd9B,MAAY,CAAG+B,MAAA,CA2EPC,QAAS,CA3EFC,MAAA,YAAAC,GAAA,WAAAC,KAAA,CAAAC,IAAA,CAAA,yBAAA,SAAA,CAqFbC,MAAO,CAAE3D,KAAM,IAGjB,CAxFe4D,SAKdpC,CALcX,UAAA,EAAAC,SAAA,EAAA+C,MAAA,OAJjB,KAAA,EAZgBd,EAYhBC,EAAA9C,KAUkBjB,EAAAmC,OAND,KAAAb,KAAA,CAAAuD,SAAAf,IAJjBC,EAAAvD,KAAA,GAAA,MAAA,KAAA,EAAAuD,EAAAxD,KAAA,EAAAwD,EAAAvC,GAAAuC,EAAA,MAAA,GAIiB/D,EAAAmC,OAAA,KAAAb,KAAA,CAAAD,QAAA,0BAJjB,KAAA,GAAA,IAAA,MAAA,OAAA0C,EAAAtC,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAIiBqD,oBAAA,SAAA/E,EAAAC,GAAA,IAAA+E,EAAAjC,EAAAhB,EAAAiB,EAAA7C,EAAA8E,EAAAC,EAAAC,EAAA,OAAA9E,mBAAAC,MAAA,SAAA8E,GAAA,OAAA,OAAAA,EAAA5E,KAAA4E,EAAA3E,MAAA,KAAA,EAAA,OAAA2E,EAAA5E,KAAA,EAAAwE,EAAAhF,EAAAmD,OAAAJ,EAAAiC,EAAAjC,SAAAiC,EAAAK,QASE/D,EAAOtB,EAACW,KAAAT,GATVkF,EAAA3E,KAAA,EAAAJ,mBAAAS,MAAAhB,YAAAiB,SAAAgC,IAAA,KAAA,EAAA,GASCC,EATDoC,EAAAlE,KAAA,CAAAkE,EAAA3E,KAAA,EAAA,MAAA,OAAA2E,EAAA/D,OAAA,SAAApB,EAAAmC,OAAA,KAAAb,KAAA,CAAAD,QAAA,sBAAA,KAAA,EAAA,OAAA8D,EAAA3E,KAAA,GAAAJ,mBAAAS,MAAAlB,QAAAmB,SAAAgB,GAAA4B,SAAA,8BAAA,KAAA,GAAA,GAAAxD,EAAAiF,EAAAlE,KAAA,CAAAkE,EAAA3E,KAAA,GAAA,MAAA,OAAA2E,EAAA/D,OAAA,SAiHRpB,EAAImC,OAAO,KAAKb,KAAK,CAAED,QAAS,uBAjHxB,KAAA,GAAA,OAYEA,EAAQnB,EAAAiD,SAATxC,QAZDC,IAAAoE,GAAAG,EAAA3E,KAAA,GAAAJ,mBAAAS,MAkBIX,EAArB0C,QAlBiB,KAAA,GAAAqC,EAAAlC,EAAAsC,QAAAC,OAAA,SAAAC,EAAAF,GAAA,OAAAE,EAAAF,EAAAG,OAAAC,QAAA,GAAAP,EAAAQ,iBAAAF,OAAAC,OAAAzF,EAAAsB,KAAA,CAAAD,QAAA,4BAAA6D,gBAAAA,EAArBD,YAAAA,EAiJMU,aAAaT,IAAoBD,IAjJlBE,EAAA3E,KAAA,GAAA,MAAA,KAAA,GAAA2E,EAAA5E,KAAA,GAAA4E,EAAA3D,GAAA2D,EAAA,MAAA,GAsBAnF,EAAAmC,OAAA,KAAAb,KAAA,CAAAD,QAAA,wBAAAuC,MAAAuB,EAAA3D,GAAAH,UAtBA,KAAA,GAAA,IAAA,MAAA,OAAA8D,EAAA1D,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAuBXqB,iBAAiBI,SADNnD,EACX+C,GAAiBI,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EADNJ,EAAA/C,EAAAmD,OAAAJ,SAAAhB,EAAA/B,EAAAW,KAAAT,GACMiD,EAAAA,KAAAA,EAAAA,mBAAAA,MADNvD,QAAAmB,SAAAgB,GAAA4B,SAAA,8BACMR,KAAAA,EAAAA,GAEiBhD,EAFjBgD,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SADNlD,EAAAmC,OAAA,KAAAb,KAAA,CAAAD,QAAA,uBACM6B,KAAAA,EAAAA,GADN0C,EAAA1F,EAAAiD,SAAAjC,KAAA,SAAA2E,GAAA,OAAAA,EAAAC,iBAAA1C,OAAAN,KACMI,CAAAA,EAAAA,KAAAA,GAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SAGgBnC,EAAKe,OAAO7B,KAAAA,KAAAA,CAAAA,QAAAA,wCAH5BiD,KAAAA,GAAAA,OA8InBwC,EAAmBE,EAAeV,gBAAgBhE,KAAK,SAAA6E,GAAE,OAAIA,EAAGjD,SAASM,OAAON,MAAc,CAAE0C,OAAQ,IA9IrFtC,EAAAA,KAAAA,GAAAA,mBAAAA,MADNrD,YAAAiB,SAAAgC,IACMI,KAAAA,GAGnBhD,EAHmBgD,EAAAA,KADN+B,EAAAlC,EAAAiD,SAAAV,OAAA,SAAAC,EAAAF,GAAA,OAAAE,EAAAF,EAAAG,OAAAC,QAAA,GAmJjBzF,EAAIsB,KAAK,CAnJQ4D,gBAAAQ,EAAAF,OAAAP,YAAAA,EAAAU,aAAAD,EAAAF,OAAAC,SAAAR,IACM/B,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GADNlD,EAAAmC,OAAA,KAAAb,KAAA,CAAAD,QAAA,wBAORuC,MAAqBqC,EAAAzE,GAAAH,UANP6B,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OADNgD,mBAAA,SAAAnG,EAAAC,GAAA,IAAA8B,EAAA5B,EAAAiG,EAAAC,EAAAC,EAAA,OAAAjG,mBAAAC,MAAA,SAAAiG,GAAA,OAAA,OAAAA,EAAA/F,KAAA+F,EAAA9F,MAAA,KAAA,EAAA,OAAA8F,EAAA/F,KAAA,EAAAuB,EAAA/B,EAAAW,KAAAT,GAAAqG,EAAA9F,KAAA,EAAAJ,mBAAAS,MAAAlB,QAAAmB,SAAAgB,IAAA,KAAA,EAAA,GAAA5B,EAAAoG,EAAArF,KAAA,CAAAqF,EAAA9F,KAAA,EAAA,MAAA,OAAA8F,EAAAlF,OAAA,SAkKRpB,EAAImC,OAAO,KAAKb,KAAK,CAAED,QAAS,uBAlKxB,KAAA,EAUeA,EAASnB,EAAAiD,SAAAsC,OAAXc,EAVbrG,EAAAiD,SAAAqD,OAsKf,SAACzD,GAAD,OAAYA,EAAOO,aAtKJmC,OAamBY,EAAItD,CAAJoD,aAAAA,EA+JlCI,iBAAAA,EA5KeE,kBAYMtD,EAZNgD,EAAA,KAAAnG,EAAAmC,OAAA,KAAAb,KAAA,CAAAD,QAAA,kBAAAqF,SAAAL,IAAAC,EAAA9F,KAAA,GAAA,MAAA,KAAA,GAAA8F,EAAA/F,KAAA,GAAA+F,EAAA9E,GAAA8E,EAAA,MAAA,GAAAtG,EAAAsB,KAAA,CAAAD,QAAAiF,EAAA9E,GAAAH,UAAA,KAAA,GAAA,IAAA,MAAA,OAAAiF,EAAA7E,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAkF,eAAA,SAAA5G,EAAAC,GAAA,IAAA4G,EAAA1G,EAAA2G,EAAA,OAAAzG,mBAAAC,MAAA,SAAAyG,GAAA,OAAA,OAAAA,EAAAvG,KAAAuG,EAAAtG,MAAA,KAAA,EAAA,OAAAsG,EAAAvG,KAAA,EAkBfuF,EAAAA,EAAAA,KAAkB/C,GAlBH+D,EAAAtG,KAAA,EAAAJ,mBAAAS,MAmBHlB,QAAAmB,SAAA8F,GAAAlD,SAAA,aAnBG,KAAA,EAAA,GAmBfJ,EAnBewD,EAAA7F,KAAA,CAAA6F,EAAAtG,KAAA,EAAA,MAAA,OAAAsG,EAAA1F,OAAA,SAAApB,EAAAmC,OAAA,KAAAb,KAAA,CAAAD,QAAA,uBAAA,KAAA,EAAA,OAAAyF,EAAAtG,KAAA,EAAAJ,mBAAAS,MA6LKkG,QAAQC,IA7Lb9G,EAAAiD,SAAA8D,IAAA,SAAAlE,GAAA,IAAAmE,EAAA,OAAA9G,mBAAAC,MAAA,SAAA8G,GAAA,OAAA,OAAAA,EAAA5G,KAAA4G,EAAA3G,MAAA,KAAA,EAAA,OAAA2G,EAAA3G,KAAA,EAAAJ,mBAAAS,MAwBdS,YAAK0C,UAAA,CAAET,CAAAA,OAAO,CAAExC,IAAAgC,EAAA+C,mBAA+BnG,CAAAA,QAASO,YAAnD,CAFRkH,QAAA,mBAtBiB,CAAAC,OAAA,CAqMPtG,IAAK,KArMEkE,YAAA,CAAAqC,KAAA,GAAApC,gBAAA,CAAAoC,KAAA,CAAAC,MAAA,CAAA,4BAAA,EAAA,OA4BT,CAiLA5C,SAAU,CA7MD5D,IAAA,EAAAkE,YAAA,EAAAC,gBAAA,EAAAsC,oBAAA,CAAAD,MAAA,CAAA,CAAA9C,IAAA,CAAA,eAAA,IAArB,EAqNoB,CAtLCgD,UAAfjE,CAAe,CAAAkE,QAAA,CAAA,mBAAA,iBAAA,aA/BA,KAAA,EAAA,OAuBdvF,EAvBcgF,EAAAlG,KAAAkG,EAAA/F,OAAA,SAkC0B,CAArB2B,OAAkCW,EAgMhDiE,SAAST,EAAO,KAlOP,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAA1F,cAAA,KAAA,EA6LXoF,EA7LWC,EAAA7F,KA+BAjB,EAAAsB,KAAAuF,GA/BAC,EAAAtG,KAAA,GAAA,MAAA,KAAA,GAAAsG,EAAAvG,KAAA,GAAAuG,EAAAtF,GAAAsF,EAAA,MAAA,GA+BA9G,EAAAmC,OAAA,KA2Mdb,KAAK,CAAED,QAAS,wBAAyBuC,MAAOkD,EAAAtF,GAAMH,UA1OxC,KAAA,GAAA,IAAA,MAAA,OAAAyF,EAAArF,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAoCjBzB,OAAImC,SAAOpC,EAAXC,GAAImC,IAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,GAAAA,EAAAA,KAAAA,EAAmCwB,EAAKzD,EAAAA,MAAQiD,EAA/BxC,QAArBC,IAAAgH,GALiB,SAAAA,EAAAC,cAKb1F,OAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MALatC,YAAAqB,OAAA4G,MAAA,SAAAC,GAAA,IAKb5F,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,EAAAA,OALa6F,EAKb7F,EAAAA,KAAAA,EAAAA,OAAAA,SAkNKnC,EAAImC,OAAO,KAAKb,KAAK,CAACD,QAAQ,eAAgB2G,YAAYA,KAlN/D7F,KAAAA,GAAAA,GALa,SAAAyF,EAAAC,cAKb1F,OAAAA,EAAAA,KAAAA,GAAAA,mBAAAA,MALatC,YAAAqB,OAAA4G,MAAA,SAAAG,GAAA,IAKb9F,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OALa+F,EAKb/F,EAAAA,KAAAA,EAAAA,OAAAA,SALanC,EAAAmC,OAAA,KAAAb,KAAA,CAAAD,QAAA,eAAA6G,YAAAA,KAKb/F,KAAAA,GAEkBd,EAAAA,KAAAA,CAAAA,QAAQ,wCAF1Bc,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAEiBnC,EAAAmC,OAArB,KAAAb,KAAA,CAAAD,QAAA,wBAAAe,MAAA+F,EAAA3G,GAAAH,UAFIc,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OALaiG,QAAA,SAAArI,EAAAC,GAAA,IAAA4H,EAAAzH,EAAAkI,EAAAC,EAAA,OAAAlI,mBAAAC,MAAA,SAAAkI,GAAA,OAAA,OAAAA,EAAAhI,KAAAgI,EAAA/H,MAAA,KAAA,EAAA,GAAA+H,EAAAhI,KAAA,EAAA,SAAAqH,EAAA7H,EAAA6H,MAAAY,MAAAX,cAAA,OAAAU,EAAA/H,KAAA,EAAAJ,mBAAAS,MAArBhB,YAAAqB,OAAAsH,KAAA,CAAAC,MAAA,KAAqBF,EAAA/H,KAAA,EAAA,MAAA,KAAA,EAAA,OAArBL,EAAqBoI,EAAAtH,KAAAsH,EAAAnH,OAAA,SAuORpB,EAAIsB,KAAK,CAACD,QAAQ,kBAAmB0B,OAAO5C,KAvOpC,KAAA,EAAA,GAUJ,SAAAyH,EAAAC,cAVI,OAAAU,EAAA/H,KAAA,GAAAJ,mBAAAS,MAUJhB,YAAAqB,OAAAsH,KAAA,CAAAC,OAAA,KAVIF,EAAA/H,KAAA,GAAA,MAAA,KAAA,GAAA,OAUJL,EAVIoI,EAAAtH,KAAAsH,EAAAnH,OAAA,SAUJpB,EAAAsB,KAAA,CAAAD,QAAA,mBAAA0B,OAAA5C,KAVI,KAAA,GAAA,GAUJ,WAAAyH,EAAAC,cAVI,OAAAU,EAAA/H,KAAA,GAAAJ,mBAAAS,MAUJhB,YAAAqB,OAAAsH,KAAA,CAAAE,QAAA,KAVIH,EAAA/H,KAAA,GAAA,MAAA,KAAA,GAAA,OAUJL,EAVIoI,EAAAtH,KAAAsH,EAAAnH,OAAA,SAUJpB,EAAAsB,KAAA,CAAAD,QAAA,eAAA0B,OAAA5C,KAVI,KAAA,GAcb8D,EAAAA,KAAAA,CAAAA,QAAQ,sBAdKsE,EAAA/H,KAAA,GAAA,MAAA,KAAA,GAAA+H,EAAAhI,KAAA,GAAAgI,EAAA/G,GAAA+G,EAAA,MAAA,GAcLvI,EAAAmC,OAAA,KAAAb,KAAA,CAAAD,QAAA,wBAAAe,MAAAmG,EAAA/G,GAAAH,UAdK,KAAA,GAAA,IAAA,MAAA,OAAAkH,EAAA9G,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAqBT2C,OAAAA,QAAAA,CACEC,WAAAA,WACEC,aAAAA,aACAC,aAAAA,aACAC,SAAAA,SAAM+B,iBAAAA,iBAHCL,mBAAAA,mBADJS,eAAAA,eADFH,OAAAA,OADG4B,QAAAA,QADdtD,oBAAAA,oBAcEJ,YAAAA,YAAS3D,aAAAA","file":"dashboardcontroller.min.js","sourcesContent":["const Student = require('../../models/users/studentModel.js')\r\nconst courseModel = require('../../models/course/courseModel.js');\r\nconst studentModel = require('../../models/users/studentModel.js');\r\n\r\n\r\nconst getProfile = async (req, res) => {\r\n  const id = req.user;\r\n  console.log(id);\r\n  try {\r\n    const student = await Student.findById({ _id: id.id }).select(\"-password\");\r\n    const courses = await courseModel.find().limit(61\r\n\r\n    );\r\n    if (!student) {\r\n      return res.json({ message: \"No student found \" });\r\n    }\r\n    if (!courses) {\r\n      return res.json({ message: \"No courses available currently\" });\r\n    }\r\n    res.json({\r\n      message: \"Students Profile\",\r\n      Profile: student,\r\n      courses: courses,\r\n    });\r\n    console.log(student);\r\n  } catch (error) {}\r\n};\r\n\r\nconst editProfile = async(req,res)=>{\r\n  try {\r\n    const {email, firstname, lastname} = req.body\r\n    const userId = req.user.id\r\n    console.log(userId)\r\n    const student = await Student.updateOne(\r\n      {_id:userId},\r\n      {$set:{firstname:firstname, lastname:lastname, email:email}}\r\n    );\r\n    res.status(200).json({message:\"Profile updated successfuly\",})\r\n    \r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst editPassword = async(req,res)=>{\r\n  try {\r\n    const userId = req.user.id\r\n    const {currentPassword, newPassword, reEnterNewPassword} = req.body\r\n    const student = await Student.findById(userId)\r\n    if(currentPassword !== student.password){\r\n      return res.json({message:\"You have entered wrong current password\"})\r\n    }\r\n    if(newPassword === student.password){\r\n      return res.json({message:\"New password should be different from Old password\"})\r\n    }\r\n    if(newPassword !== reEnterNewPassword){\r\n      return res.json({message:\"Confirm password should same as New password\"})\r\n    }\r\n    student.password = newPassword\r\n    await student.save()\r\n    res.json({message:\"Password changed successfully\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst enrollCourse = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const userId = req.user;\r\n  const course = await courseModel.findById({ _id: courseId });\r\n  const student = await Student.findById({ _id: userId.id });\r\n  try {\r\n    if (!student) {\r\n      return res.status(400).json({ message: \"Student not found\" });\r\n    }\r\n    if (!course) {\r\n      return res.status(400).json({ message: \"Course not found\" });\r\n    }\r\n    const Course = student.enrolled\r\n    const available = Course.some(course => course.coursesAvailable.equals(courseId))\r\n    if(available){\r\n      return res.json({Message:\"You have already enrolled this course\"})\r\n    }\r\n    student.enrolled.push({\r\n      coursesAvailable: course._id,\r\n      isComplete: false,\r\n    });\r\n    await student.save();\r\n    res\r\n      .status(200)\r\n      .json({ Message: \"Course enrolled successfuly\", Student: student });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst showEnrolled = async (req,res)=>{\r\n  const userId = req.user\r\n  try {\r\n    const student = await Student.findById({_id:userId.id}).populate('enrolled.coursesAvailable')\r\n    if(!student) return res.status(404).json({message:\"Student not found\"})\r\n    res.status(200).json({message:\"Found\", List:student.enrolled})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", error:error.message})\r\n  }\r\n}\r\nconst topRanks = async (req, res) => {\r\n  try {\r\n    const students = await Student.aggregate([\r\n      {\r\n        $match: {\r\n          \"enrolled.isComplete\": true,\r\n        },\r\n      },\r\n      {\r\n        $addFields: {\r\n          Count: {\r\n            $size: {\r\n              $filter: {\r\n                input: \"$enrolled\",\r\n                as: \"enrolled\",\r\n                cond: { $eq: [\"$$enrolled.isComplete\", true] },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      {\r\n        $sort: { _id: -1 },\r\n      },\r\n\r\n      {\r\n        $project: {\r\n          firstname: 1,\r\n          lastname: 1,\r\n          Count:1\r\n        },\r\n      },\r\n    ]);\r\n    res.status(200).json({ rankings: students });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst markVideoAsComplete = async(req,res)=>{\r\n  try {\r\n    const {courseId, videoId} = req.params\r\n    const userId = req.user.id\r\n    const course = await courseModel.findById(courseId)\r\n    if(!course){\r\n      return res.status(404).json({message:\"Course not found\"});\r\n    }\r\n\r\n    const student = await Student.findById(userId).populate('enrolled.coursesAvailable')\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const enrolledCourses = student.enrolled\r\n    console.log(enrolledCourses)\r\n    // const enrolledCourse = student.enrolled.find(enroll => enroll.coursesAvailable.equals(courseId))\r\n    // console.log(enrolledCourse)\r\n    // if (!enrolledCourse) {\r\n    //   return res.status(404).json({ message: \"Course not enrolled by the student\" });\r\n    // }\r\n\r\n    // const alreadyCompleted = enrolledCourse.completedVideos.find(cv => cv.courseId.equals(courseId) && cv.videos.includes(videoId))\r\n    // if (alreadyCompleted) {\r\n    //   return res.json({ message: \"Video already marked as complete\" });\r\n    // }\r\n\r\n    // let courseCompletion = enrolledCourse.completedVideos.find( cv=> cv.courseId.equals(courseId))\r\n    // if(!courseCompletion){\r\n    //   courseCompletion = { courseId, videos:[videoId]}\r\n    //   enrolledCourse.completedVideos.push(courseCompletion)\r\n    // }\r\n    // else {\r\n    //   courseCompletion.videos.push(videoId);\r\n    // }\r\n    await student.save()\r\n\r\n    const totalVideos = course.section.reduce((acc, section)=> acc+ section.videos.length, 0)\r\n    const completedVideos = courseCompletion.videos.length\r\n\r\n    res.json({\r\n      message:\"Videos marked as complete\",\r\n      completedVideos,\r\n      totalVideos,\r\n      allCompleted:completedVideos === totalVideos\r\n    })\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\", error: error.message});\r\n  }\r\n}\r\n\r\nconst completedCourses = async(req,res)=>{\r\n try {\r\n  const {courseId} = req.params\r\n  const userId = req.user.id\r\n\r\n  const student = await Student.findById(userId).populate('enrolled.coursesAvailable')\r\n  if (!student) {\r\n    return res.status(404).json({ message: \"Student not found\" });\r\n  }\r\n  const enrolledCourse = student.enrolled.find(enroll => enroll.coursesAvailable.equals(courseId));\r\n  if (!enrolledCourse) {\r\n      return res.status(404).json({ message: \"Course not enrolled by the student\" });\r\n  }\r\n  const courseCompletion = enrolledCourse.completedVideos.find(cv => cv.courseId.equals(courseId)) || { videos: [] };\r\n\r\n  const course = await courseModel.findById(courseId);\r\n    const totalVideos = course.sections.reduce((acc, section) => acc + section.videos.length, 0);\r\n    res.json({\r\n      completedVideos: courseCompletion.videos,\r\n      totalVideos,\r\n      allCompleted: courseCompletion.videos.length === totalVideos\r\n    });\r\n } catch (error) {\r\n  res.status(500).json({ message: \"Internal server error\", error: error.message });\r\n }\r\n}\r\n\r\nconst progressController = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const student = await Student.findById(userId);\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const totalCourses = student.enrolled.length;\r\n    const completedCourses = student.enrolled.filter(\r\n      (course) => course.isComplete\r\n    ).length;\r\n    const coursesPercentage = (completedCourses / totalCourses) * 100;\r\n\r\n    const coursesData = {\r\n      totalCourses,\r\n      completedCourses,\r\n      coursesPercentage,\r\n    };\r\n\r\n    res.status(200).json({ message: \"Progress report\", Progress: coursesData });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst courseProgress = async (req, res) => {\r\n  try {\r\n    const studentId = req.user.id;\r\n    const student = await Student.findById(studentId).populate(\"enrolled\");\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const results = await Promise.all(\r\n        student.enrolled.map(async (course) => {\r\n        const result = await courseModel.aggregate([\r\n          { $match: { _id: course.coursesAvailable } },\r\n          { $unwind: \"$section\" },\r\n          { $unwind: \"$section.videos\" },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              totalVideos: { $sum: 1 },\r\n              completedVideos: {\r\n                $sum: { $cond: [\"$section.videos.completed\", 1, 0] },\r\n              },\r\n            },\r\n          },\r\n          {\r\n            $project: {\r\n              _id: 0,\r\n              totalVideos: 1,\r\n              completedVideos: 1,\r\n              completedPercentage: {\r\n                $cond: [\r\n                    { $eq: ['$totalVideos', 0] },\r\n                    0,\r\n                    { \r\n                      $multiply: [\r\n                        { $divide: ['$completedVideos', '$totalVideos'] },\r\n                        100\r\n                      ]\r\n                    }\r\n                  ]\r\n              },\r\n            },\r\n          },\r\n        ]);\r\n        return {\r\n            course:course,\r\n            progress:result[0]\r\n        }\r\n      })\r\n    )\r\n    res.json(results)\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n\r\n//filtering Records \r\n\r\nconst filter = async(req,res)=>{\r\n  try {\r\n    const query = req.query.f\r\n    console.log(query)\r\n    if(query.toLowerCase() === 'paid'){\r\n      const paidCourses = await courseModel.find().where('price').gt(0);\r\n      return res.status(200).json({message:\"Paid courses\", paidCourses:paidCourses})\r\n    }else if(query.toLowerCase() === 'free'){\r\n      const freeCourses = await courseModel.find().where('price').eq(0)\r\n      return res.status(200).json({message:\"free courses\", freeCourses:freeCourses})\r\n    }\r\n    res.json({message:\"No courses available based on Query\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst sorting = async(req,res)=>{\r\n  try {\r\n    const query = req.query.sort\r\n    if(query.toLowerCase() === \"asc\"){\r\n      const courses = await courseModel.find().sort({title:1})\r\n      return res.json({message:\"Ascending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"desc\"){\r\n      const courses = await courseModel.find().sort({title:-1})\r\n      return res.json({message:\"Descending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"rating\"){\r\n      const courses = await courseModel.find().sort({rating:-1})\r\n      return res.json({message:\"Rating order\", course:courses})\r\n    }\r\n    res.json({message:\"No Sorting chosen\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  getProfile,\r\n  enrollCourse,\r\n  showEnrolled,\r\n  topRanks,\r\n\r\n  completedCourses,\r\n  progressController,\r\n  courseProgress,\r\n  filter,\r\n  sorting,\r\n  markVideoAsComplete,\r\n  editProfile,\r\n  editPassword\r\n};\r\n"]}