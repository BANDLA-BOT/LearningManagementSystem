{"version":3,"sources":["dashboardcontroller.js"],"names":["Student","require","courseModel","req","res","id","user","findById","_id","select","student","find","limit","courses","json","message","porfileStatus","status","Message","Error","_context","t0","editProfile","_req$body","email","firstname","lastname","userId","regeneratorRuntime","async","_context2","prev","next","body","awrap","updateOne","$set","sent","stop","editPassword","_req$body2","currentPassword","newPassword","reEnterNewPassword","_context3","password","abrupt","Profile","enrollCourse","courseId","course","Course","_context4","params","coursesAvailable","equals","save","showEnrolled","_context5","populate","List","enrolled","error","topRanks","students","_context6","$match","enrolled.isComplete","$addFields","$size","$filter","input","as","cond","$eq","$sort","$project","Count","rankings","markVideoAsComplete","_req$params","videoId","enrolledCourses","enrolledCourse","courseCompletion","totalVideos","completedVideos","_context7","enroll","console","log","cv","videos","includes","push","section","reduce","acc","length","allCompleted","completedCourses","_context8","available","some","sections","isComplete","progressController","totalCourses","_completedCourses","coursesData","_context9","filter","coursesPercentage","Progress","courseProgress","studentId","results","_context11","all","map","result","_context10","aggregate","$unwind","$group","$sum","$cond","$multiply","$divide","progress","query","paidCourses","freeCourses","_context12","f","toLowerCase","where","gt","eq","sort","title","rating","_context13","_context14","send","r","ratedBy","toString","rate","Number","askQuestion","_req$params2","question","askedBy","_context15","discussions","topDiscussions","_context16","getProfile","sorting","ratingController"],"mappings":"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","file":"dashboardcontroller.min.js","sourcesContent":["const Student = require(\"../../models/users/studentModel.js\");\r\nconst courseModel = require(\"../../models/course/courseModel.js\");\r\n\r\n//Dashboard\r\nconst getProfile = async (req, res) => {\r\n  const id = req.user;\r\n  // console.log(id);\r\n  try {\r\n    const student = await Student.findById({ _id: id.id }).select(\"-password\");\r\n    const courses = await courseModel.find().limit(61);\r\n    if (!student) {\r\n      return res.json({ message: \"No student found \" });\r\n    }\r\n    if (!courses) {\r\n      return res.json({ message: \"No courses available currently\" });\r\n    }\r\n    res.json({\r\n      message: \"Students Profile\",\r\n      Profile: student,\r\n      courses: courses,\r\n      porfileStatus: true,\r\n    });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst editProfile = async (req, res) => {\r\n  try {\r\n    const { email, firstname, lastname } = req.body;\r\n    const userId = req.user.id;\r\n    const student = await Student.updateOne(\r\n      { _id: userId },\r\n      { $set: { firstname: firstname, lastname: lastname, email: email } }\r\n    );\r\n    res.status(200).json({ message: \"Profile updated successfuly\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst editPassword = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const { currentPassword, newPassword, reEnterNewPassword } = req.body;\r\n    const student = await Student.findById(userId);\r\n    if (currentPassword !== student.password) {\r\n      return res.json({ message: \"You have entered wrong current password\" });\r\n    }\r\n    if (newPassword === student.password) {\r\n      return res.json({\r\n        message: \"New password should be different from Old password\",\r\n      });\r\n    }\r\n    if (newPassword !== reEnterNewPassword) {\r\n      return res.json({\r\n        message: \"Confirm password should same as New password\",\r\n      });\r\n    }\r\n    student.password = newPassword;\r\n    await student.save();\r\n    res.json({ message: \"Password changed successfully\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst enrollCourse = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const userId = req.user;\r\n  const course = await courseModel.findById({ _id: courseId });\r\n  const student = await Student.findById({ _id: userId.id });\r\n  try {\r\n    if (!student) {\r\n      return res.status(400).json({ message: \"Student not found\" });\r\n    }\r\n    if (!course) {\r\n      return res.status(400).json({ message: \"Course not found\" });\r\n    }\r\n    const Course = student.enrolled;\r\n    const available = Course.some((course) =>\r\n      course.coursesAvailable.equals(courseId)\r\n    );\r\n    if (available) {\r\n      return res.json({ Message: \"You have already enrolled this course\" });\r\n    }\r\n    student.enrolled.push({\r\n      coursesAvailable: course._id,\r\n      isComplete: false,\r\n    });\r\n    await student.save();\r\n    res\r\n      .status(200)\r\n      .json({ Message: \"Course enrolled successfuly\", Student: student });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst showEnrolled = async (req, res) => {\r\n  const userId = req.user;\r\n  try {\r\n    const student = await Student.findById({ _id: userId.id }).populate(\r\n      \"enrolled.coursesAvailable\"\r\n    );\r\n    if (!student) return res.status(404).json({ message: \"Student not found\" });\r\n    res.status(200).json({ message: \"Found\", List: student.enrolled });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\nconst topRanks = async (req, res) => {\r\n  try {\r\n    const students = await Student.aggregate([\r\n      {\r\n        $match: {\r\n          \"enrolled.isComplete\": true,\r\n        },\r\n      },\r\n      {\r\n        $addFields: {\r\n          Count: {\r\n            $size: {\r\n              $filter: {\r\n                input: \"$enrolled\",\r\n                as: \"enrolled\",\r\n                cond: { $eq: [\"$$enrolled.isComplete\", true] },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      {\r\n        $sort: { _id: -1 },\r\n      },\r\n\r\n      {\r\n        $project: {\r\n          firstname: 1,\r\n          lastname: 1,\r\n          Count: 1,\r\n        },\r\n      },\r\n    ]);\r\n    res.status(200).json({ rankings: students });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\nconst markVideoAsComplete = async (req, res) => {\r\n  try {\r\n    const { courseId, videoId } = req.params;\r\n    const userId = req.user.id;\r\n    const course = await courseModel.findById(courseId);\r\n    if (!course) {\r\n      return res.status(404).json({ message: \"Course not found\" });\r\n    }\r\n\r\n    const student = await Student.findById(userId).populate(\r\n      \"enrolled.coursesAvailable\"\r\n    );\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const enrolledCourses = student.enrolled;\r\n    console.log(enrolledCourses);\r\n    const enrolledCourse = student.enrolled.find((enroll) =>\r\n      enroll.coursesAvailable.equals(courseId)\r\n    );\r\n    console.log(enrolledCourse);\r\n    if (!enrolledCourse) {\r\n      return res\r\n        .status(404)\r\n        .json({ message: \"Course not enrolled by the student\" });\r\n    }\r\n\r\n    const alreadyCompleted = enrolledCourse.completedVideos.find(\r\n      (cv) => cv.courseId.equals(courseId) && cv.videos.includes(videoId)\r\n    );\r\n    if (alreadyCompleted) {\r\n      return res.json({ message: \"Video already marked as complete\" });\r\n    }\r\n\r\n    let courseCompletion = enrolledCourse.completedVideos.find((cv) =>\r\n      cv.courseId.equals(courseId)\r\n    );\r\n    if (!courseCompletion) {\r\n      courseCompletion = { courseId, videos: [videoId] };\r\n      enrolledCourse.completedVideos.push(courseCompletion);\r\n    } else {\r\n      courseCompletion.videos.push(videoId);\r\n    }\r\n    await student.save();\r\n\r\n    const totalVideos = course.section.reduce(\r\n      (acc, section) => acc + section.videos.length,\r\n      0\r\n    );\r\n    const completedVideos = courseCompletion.videos.length;\r\n\r\n    res.json({\r\n      message: \"Videos marked as complete\",\r\n      completedVideos,\r\n      totalVideos,\r\n      allCompleted: completedVideos === totalVideos,\r\n    });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\nconst completedCourses = async (req, res) => {\r\n  try {\r\n    const { courseId } = req.params;\r\n    const userId = req.user.id;\r\n\r\n    const student = await Student.findById(userId).populate(\r\n      \"enrolled.coursesAvailable\"\r\n    );\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const enrolledCourse = student.enrolled.find((enroll) =>\r\n      enroll.coursesAvailable.equals(courseId)\r\n    );\r\n    if (!enrolledCourse) {\r\n      return res\r\n        .status(404)\r\n        .json({ message: \"Course not enrolled by the student\" });\r\n    }\r\n    const courseCompletion = enrolledCourse.completedVideos.find((cv) =>\r\n      cv.courseId.equals(courseId)\r\n    ) || { videos: [] };\r\n\r\n    const course = await courseModel.findById(courseId);\r\n    const totalVideos = course.sections.reduce(\r\n      (acc, section) => acc + section.videos.length,\r\n      0\r\n    );\r\n    res.json({\r\n      completedVideos: courseCompletion.videos,\r\n      totalVideos,\r\n      allCompleted: courseCompletion.videos.length === totalVideos,\r\n    });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\nconst progressController = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const student = await Student.findById(userId);\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const totalCourses = student.enrolled.length;\r\n    const completedCourses = student.enrolled.filter(\r\n      (course) => course.isComplete\r\n    ).length;\r\n    const coursesPercentage = (completedCourses / totalCourses) * 100;\r\n\r\n    const coursesData = {\r\n      totalCourses,\r\n      completedCourses,\r\n      coursesPercentage,\r\n    };\r\n\r\n    res.status(200).json({ message: \"Progress report\", Progress: coursesData });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\nconst courseProgress = async (req, res) => {\r\n  try {\r\n    const studentId = req.user.id;\r\n    const student = await Student.findById(studentId).populate(\"enrolled\");\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const results = await Promise.all(\r\n      student.enrolled.map(async (course) => {\r\n        const result = await courseModel.aggregate([\r\n          { $match: { _id: course.coursesAvailable } },\r\n          { $unwind: \"$section\" },\r\n          { $unwind: \"$section.videos\" },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              totalVideos: { $sum: 1 },\r\n              completedVideos: {\r\n                $sum: { $cond: [\"$section.videos.completed\", 1, 0] },\r\n              },\r\n            },\r\n          },\r\n          {\r\n            $project: {\r\n              _id: 0,\r\n              totalVideos: 1,\r\n              completedVideos: 1,\r\n              completedPercentage: {\r\n                $cond: [\r\n                  { $eq: [\"$totalVideos\", 0] },\r\n                  0,\r\n                  {\r\n                    $multiply: [\r\n                      { $divide: [\"$completedVideos\", \"$totalVideos\"] },\r\n                      100,\r\n                    ],\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n          },\r\n        ]);\r\n        return {\r\n          course: course,\r\n          progress: result[0],\r\n        };\r\n      })\r\n    );\r\n    res.json(results);\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n//filtering Records\r\nconst filter = async (req, res) => {\r\n  try {\r\n    const query = req.query.f;\r\n    console.log(query);\r\n    if (query.toLowerCase() === \"paid\") {\r\n      const paidCourses = await courseModel.find().where(\"price\").gt(0);\r\n      return res\r\n        .status(200)\r\n        .json({ message: \"Paid courses\", paidCourses: paidCourses });\r\n    } else if (query.toLowerCase() === \"free\") {\r\n      const freeCourses = await courseModel.find().where(\"price\").eq(0);\r\n      return res\r\n        .status(200)\r\n        .json({ message: \"free courses\", freeCourses: freeCourses });\r\n    }\r\n    res.json({ message: \"No courses available based on Query\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst sorting = async (req, res) => {\r\n  try {\r\n    const query = req.query.sort;\r\n    if (query.toLowerCase() === \"asc\") {\r\n      const courses = await courseModel.find().sort({ title: 1 });\r\n      return res.json({ message: \"Ascending order\", course: courses });\r\n    } else if (query.toLowerCase() === \"desc\") {\r\n      const courses = await courseModel.find().sort({ title: -1 });\r\n      return res.json({ message: \"Descending order\", course: courses });\r\n    } else if (query.toLowerCase() === \"rating\") {\r\n      const courses = await courseModel.find().sort({ rating: -1 });\r\n      return res.json({ message: \"Rating order\", course: courses });\r\n    }\r\n    res.json({ message: \"No Sorting chosen\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n//Rating controller\r\nconst ratingController = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const { rating } = req.query;\r\n  const userId = req.user.id;\r\n  console.log(userId);\r\n  if (!rating || rating < 1 || rating > 5) {\r\n    return res.status(400).send(\"Invalid rating. Must be between 1 and 5\");\r\n  }\r\n  try {\r\n    const course = await courseModel.findById(courseId);\r\n    if (!course) {\r\n      return res.status(404).json(\"Course not found.\");\r\n    }\r\n\r\n    const existingRating = course.rating.find(\r\n      (r) => r.ratedBy.toString() === userId\r\n    );\r\n    if (existingRating) {\r\n      return res\r\n        .status(400)\r\n        .json({ message: \"You have already rated this course\" });\r\n    }\r\n\r\n    course.rating.push({\r\n      rate: Number(rating),\r\n      ratedBy: userId,\r\n    });\r\n    await course.save();\r\n    res.json({ message: \"Thank you for rating the course\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n//Discussions[ ASK QUESTION ]\r\nconst askQuestion = async (req, res) => {\r\n  const { videoId, courseId } = req.params;\r\n  const { question } = req.body;\r\n  const askedBy = req.user.id;\r\n  try {\r\n    const course = await courseModel.findById(courseId);\r\n    const discussion = course.discussions;\r\n    discussion.push({\r\n      videoId: videoId,\r\n      courseId: courseId,\r\n      askedBy: askedBy,\r\n      question: question,\r\n    });\r\n    await course.save();\r\n    res.json({\r\n      message:\r\n        \"We have got your question, you will get answer back from our instructor\",\r\n    });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n//Discussions List\r\nconst topDiscussions = async (req, res) => {\r\n  try {\r\n    const { courseId, videoId } = req.params;\r\n    const course = await courseModel.aggregate([\r\n      {\r\n        $match:{'_id':courseId},\r\n      },\r\n      \r\n    ]);\r\n    console.log(course)\r\n    // const discussion = course.discussions;\r\n\r\n    // let data = [];\r\n    // discussion.map((item) => {\r\n    //   if (!item) {\r\n    //     return res.json({ Message: \"There are discussions on this video\" });\r\n    //   }\r\n    //   if (item.videoId.toString() === videoId) {\r\n    //     console.log(\"Matched\");\r\n    //     data.push({\r\n    //       question: item.question,\r\n    //       answer: item.answer || \"waiting for answer\",\r\n    //       answeredBy: item.answeredBy || \"Instructor busy in Writing answer\",\r\n    //       createdAt: item.createdAt,\r\n    //     });\r\n    //     return data;\r\n    //   } else {\r\n    //     console.log(\"There are discussions on this video\");\r\n    //   }\r\n    // });\r\n    // if (data.length <= 10) {\r\n    //   res.json({\r\n    //     message: `Top ${data.length} discussions on this video`,\r\n    //     Data: data,\r\n    //   });\r\n    // }\r\n  } catch (error) {\r\n    res.json({ Message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n  getProfile,\r\n  enrollCourse,\r\n  showEnrolled,\r\n  topRanks,\r\n  completedCourses,\r\n  progressController,\r\n  courseProgress,\r\n  filter,\r\n  sorting,\r\n  markVideoAsComplete,\r\n  editProfile,\r\n  editPassword,\r\n  ratingController,\r\n  askQuestion,\r\n  topDiscussions,\r\n};\r\n"]}