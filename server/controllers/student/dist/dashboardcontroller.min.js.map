{"version":3,"sources":["dashboardcontroller.js"],"names":["Student","require","courseModel","getProfile","req","res","id","student","courses","regeneratorRuntime","async","_context","prev","next","user","console","log","awrap","findById","_id","select","sent","find","limit","abrupt","json","message","status","t0","stop","editProfile","_req$body","email","firstname","lastname","userId","_context2","body","updateOne","$set","Error","editPassword","_req$body2","currentPassword","newPassword","reEnterNewPassword","_context3","Profile","password","save","enrollCourse","courseId","course","Course","_context4","params","enrolled","some","coursesAvailable","equals","Message","push","showEnrolled","_context5","populate","List","topRanks","students","_context6","aggregate","$match","enrolled.isComplete","$addFields","Count","$size","$filter","input","as","cond","$eq","$project","rankings","markVideoAsComplete","_req$params","videoId","enrolledCourses","enrolledCourse","courseCompletion","totalVideos","completedVideos","_context7","enroll","cv","videos","includes","section","reduce","acc","length","allCompleted","error","completedCourses","_context8","sections","progressController","totalCourses","_completedCourses","coursesData","_context9","filter","available","coursesPercentage","Progress","studentId","all","map","result","_context10","$unwind","$group","$sum","$cond","completedPercentage","$multiply","$divide","results","_context11","query","f","toLowerCase","where","gt","paidCourses","eq","freeCourses","_context12","sorting","_courses","_courses2","_context13","sort","title","rating","_context14","send","r","ratedBy","toString","rate","Number","_req$params2","question","askedBy","_context15","discussions","topDiscussions","_req$params3","discussion","data","_context16","item","answer","answeredBy","createdAt","concat","Data","module","exports","courseProgress","askQuestion"],"mappings":"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","file":"dashboardcontroller.min.js","sourcesContent":["const Student = require('../../models/users/studentModel.js')\r\nconst courseModel = require('../../models/course/courseModel.js');\r\n\r\n\r\n\r\nconst getProfile = async (req, res) => {\r\n  const id = req.user;\r\n  console.log(id);\r\n  try {\r\n    const student = await Student.findById({ _id: id.id }).select(\"-password\");\r\n    const courses = await courseModel.find().limit(61\r\n\r\n    );\r\n    if (!student) {\r\n      return res.json({ message: \"No student found \" });\r\n    }\r\n    if (!courses) {\r\n      return res.json({ message: \"No courses available currently\" });\r\n    }\r\n    res.json({\r\n      message: \"Students Profile\",\r\n      Profile: student,\r\n      courses: courses,\r\n      status:true\r\n    });\r\n    console.log(student);\r\n  } catch (error) {}\r\n};\r\n\r\nconst editProfile = async(req,res)=>{\r\n  try {\r\n    const {email, firstname, lastname} = req.body\r\n    const userId = req.user.id\r\n    console.log(userId)\r\n    const student = await Student.updateOne(\r\n      {_id:userId},\r\n      {$set:{firstname:firstname, lastname:lastname, email:email}}\r\n    );\r\n    res.status(200).json({message:\"Profile updated successfuly\",})\r\n    \r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst editPassword = async(req,res)=>{\r\n  try {\r\n    const userId = req.user.id\r\n    const {currentPassword, newPassword, reEnterNewPassword} = req.body\r\n    const student = await Student.findById(userId)\r\n    if(currentPassword !== student.password){\r\n      return res.json({message:\"You have entered wrong current password\"})\r\n    }\r\n    if(newPassword === student.password){\r\n      return res.json({message:\"New password should be different from Old password\"})\r\n    }\r\n    if(newPassword !== reEnterNewPassword){\r\n      return res.json({message:\"Confirm password should same as New password\"})\r\n    }\r\n    student.password = newPassword\r\n    await student.save()\r\n    res.json({message:\"Password changed successfully\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst enrollCourse = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const userId = req.user;\r\n  const course = await courseModel.findById({ _id: courseId });\r\n  const student = await Student.findById({ _id: userId.id });\r\n  try {\r\n    if (!student) {\r\n      return res.status(400).json({ message: \"Student not found\" });\r\n    }\r\n    if (!course) {\r\n      return res.status(400).json({ message: \"Course not found\" });\r\n    }\r\n    const Course = student.enrolled\r\n    const available = Course.some(course => course.coursesAvailable.equals(courseId))\r\n    if(available){\r\n      return res.json({Message:\"You have already enrolled this course\"})\r\n    }\r\n    student.enrolled.push({\r\n      coursesAvailable: course._id,\r\n      isComplete: false,\r\n    });\r\n    await student.save();\r\n    res\r\n      .status(200)\r\n      .json({ Message: \"Course enrolled successfuly\", Student: student });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst showEnrolled = async (req,res)=>{\r\n  const userId = req.user\r\n  try {\r\n    const student = await Student.findById({_id:userId.id}).populate('enrolled.coursesAvailable')\r\n    if(!student) return res.status(404).json({message:\"Student not found\"})\r\n    res.status(200).json({message:\"Found\", List:student.enrolled})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", error:error.message})\r\n  }\r\n}\r\nconst topRanks = async (req, res) => {\r\n  try {\r\n    const students = await Student.aggregate([\r\n      {\r\n        $match: {\r\n          \"enrolled.isComplete\": true,\r\n        },\r\n      },\r\n      {\r\n        $addFields: {\r\n          Count: {\r\n            $size: {\r\n              $filter: {\r\n                input: \"$enrolled\",\r\n                as: \"enrolled\",\r\n                cond: { $eq: [\"$$enrolled.isComplete\", true] },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      {\r\n        $sort: { _id: -1 },\r\n      },\r\n\r\n      {\r\n        $project: {\r\n          firstname: 1,\r\n          lastname: 1,\r\n          Count:1\r\n        },\r\n      },\r\n    ]);\r\n    res.status(200).json({ rankings: students });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst markVideoAsComplete = async(req,res)=>{\r\n  try {\r\n    const {courseId, videoId} = req.params\r\n    const userId = req.user.id\r\n    const course = await courseModel.findById(courseId)\r\n    if(!course){\r\n      return res.status(404).json({message:\"Course not found\"});\r\n    }\r\n\r\n    const student = await Student.findById(userId).populate('enrolled.coursesAvailable')\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const enrolledCourses = student.enrolled\r\n    console.log(enrolledCourses)\r\n    const enrolledCourse = student.enrolled.find(enroll => enroll.coursesAvailable.equals(courseId))\r\n    console.log(enrolledCourse)\r\n    if (!enrolledCourse) {\r\n      return res.status(404).json({ message: \"Course not enrolled by the student\" });\r\n    }\r\n\r\n    const alreadyCompleted = enrolledCourse.completedVideos.find(cv => cv.courseId.equals(courseId) && cv.videos.includes(videoId))\r\n    if (alreadyCompleted) {\r\n      return res.json({ message: \"Video already marked as complete\" });\r\n    }\r\n\r\n    let courseCompletion = enrolledCourse.completedVideos.find( cv=> cv.courseId.equals(courseId))\r\n    if(!courseCompletion){\r\n      courseCompletion = { courseId, videos:[videoId]}\r\n      enrolledCourse.completedVideos.push(courseCompletion)\r\n    }\r\n    else {\r\n      courseCompletion.videos.push(videoId);\r\n    }\r\n    await student.save()\r\n\r\n    const totalVideos = course.section.reduce((acc, section)=> acc+ section.videos.length, 0)\r\n    const completedVideos = courseCompletion.videos.length\r\n\r\n    res.json({\r\n      message:\"Videos marked as complete\",\r\n      completedVideos,\r\n      totalVideos,\r\n      allCompleted:completedVideos === totalVideos\r\n    })\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\", error: error.message});\r\n  }\r\n}\r\n\r\nconst completedCourses = async(req,res)=>{\r\n try {\r\n  const {courseId} = req.params\r\n  const userId = req.user.id\r\n\r\n  const student = await Student.findById(userId).populate('enrolled.coursesAvailable')\r\n  if (!student) {\r\n    return res.status(404).json({ message: \"Student not found\" });\r\n  }\r\n  const enrolledCourse = student.enrolled.find(enroll => enroll.coursesAvailable.equals(courseId));\r\n  if (!enrolledCourse) {\r\n      return res.status(404).json({ message: \"Course not enrolled by the student\" });\r\n  }\r\n  const courseCompletion = enrolledCourse.completedVideos.find(cv => cv.courseId.equals(courseId)) || { videos: [] };\r\n\r\n  const course = await courseModel.findById(courseId);\r\n    const totalVideos = course.sections.reduce((acc, section) => acc + section.videos.length, 0);\r\n    res.json({\r\n      completedVideos: courseCompletion.videos,\r\n      totalVideos,\r\n      allCompleted: courseCompletion.videos.length === totalVideos\r\n    });\r\n } catch (error) {\r\n  res.status(500).json({ message: \"Internal server error\", error: error.message });\r\n }\r\n}\r\n\r\nconst progressController = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const student = await Student.findById(userId);\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const totalCourses = student.enrolled.length;\r\n    const completedCourses = student.enrolled.filter(\r\n      (course) => course.isComplete\r\n    ).length;\r\n    const coursesPercentage = (completedCourses / totalCourses) * 100;\r\n\r\n    const coursesData = {\r\n      totalCourses,\r\n      completedCourses,\r\n      coursesPercentage,\r\n    };\r\n\r\n    res.status(200).json({ message: \"Progress report\", Progress: coursesData });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst courseProgress = async (req, res) => {\r\n  try {\r\n    const studentId = req.user.id;\r\n    const student = await Student.findById(studentId).populate(\"enrolled\");\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const results = await Promise.all(\r\n        student.enrolled.map(async (course) => {\r\n        const result = await courseModel.aggregate([\r\n          { $match: { _id: course.coursesAvailable } },\r\n          { $unwind: \"$section\" },\r\n          { $unwind: \"$section.videos\" },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              totalVideos: { $sum: 1 },\r\n              completedVideos: {\r\n                $sum: { $cond: [\"$section.videos.completed\", 1, 0] },\r\n              },\r\n            },\r\n          },\r\n          {\r\n            $project: {\r\n              _id: 0,\r\n              totalVideos: 1,\r\n              completedVideos: 1,\r\n              completedPercentage: {\r\n                $cond: [\r\n                    { $eq: ['$totalVideos', 0] },\r\n                    0,\r\n                    { \r\n                      $multiply: [\r\n                        { $divide: ['$completedVideos', '$totalVideos'] },\r\n                        100\r\n                      ]\r\n                    }\r\n                  ]\r\n              },\r\n            },\r\n          },\r\n        ]);\r\n        return {\r\n            course:course,\r\n            progress:result[0]\r\n        }\r\n      })\r\n    )\r\n    res.json(results)\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n\r\n//filtering Records \r\n\r\nconst filter = async(req,res)=>{\r\n  try {\r\n    const query = req.query.f\r\n    console.log(query)\r\n    if(query.toLowerCase() === 'paid'){\r\n      const paidCourses = await courseModel.find().where('price').gt(0);\r\n      return res.status(200).json({message:\"Paid courses\", paidCourses:paidCourses})\r\n    }else if(query.toLowerCase() === 'free'){\r\n      const freeCourses = await courseModel.find().where('price').eq(0)\r\n      return res.status(200).json({message:\"free courses\", freeCourses:freeCourses})\r\n    }\r\n    res.json({message:\"No courses available based on Query\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst sorting = async(req,res)=>{\r\n  try {\r\n    const query = req.query.sort\r\n    if(query.toLowerCase() === \"asc\"){\r\n      const courses = await courseModel.find().sort({title:1})\r\n      return res.json({message:\"Ascending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"desc\"){\r\n      const courses = await courseModel.find().sort({title:-1})\r\n      return res.json({message:\"Descending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"rating\"){\r\n      const courses = await courseModel.find().sort({rating:-1})\r\n      return res.json({message:\"Rating order\", course:courses})\r\n    }\r\n    res.json({message:\"No Sorting chosen\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst ratingController = async(req,res)=>{\r\n  const { courseId } = req.params\r\n  const { rating } = req.query\r\n  const userId = req.user.id\r\n  console.log(userId)\r\n  if(!rating || rating < 1 || rating > 5){\r\n    return res.status(400).send('Invalid rating. Must be between 1 and 5')\r\n  }\r\n  try {\r\n    const course = await courseModel.findById(courseId);\r\n    if(!course){\r\n      return res.status(404).json('Course not found.')\r\n    }\r\n\r\n    const existingRating = course.rating.find(r => r.ratedBy.toString() === userId)\r\n    if(existingRating){\r\n      return res.status(400).json({message:\"You have already rated this course\"})\r\n    }\r\n    \r\n    course.rating.push({\r\n      rate:Number(rating),\r\n      ratedBy:userId\r\n    })\r\n    await course.save()\r\n    res.json({message:\"Thank you for rating the course\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", error:error.message})\r\n  }\r\n}\r\n\r\n\r\n\r\nconst askQuestion = async(req,res)=>{\r\n  const {videoId, courseId} = req.params\r\n  const { question } = req.body\r\n  const askedBy = req.user.id\r\n  try {\r\n    const course = await courseModel.findById(courseId)\r\n    const discussion = course.discussions\r\n    discussion.push({\r\n      videoId:videoId,\r\n      courseId:courseId,\r\n      askedBy:askedBy,\r\n      question:question\r\n    })\r\n    await course.save()\r\n    res.json({message:\"We have got your question, you will get answer back from our instructor\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", error:error.message})\r\n  }\r\n}\r\n\r\nconst topDiscussions = async(req,res)=>{\r\n  try {\r\n    const {courseId, videoId} = req.params\r\n    const course = await courseModel.findById(courseId)\r\n    const discussion = course.discussions\r\n    let data=[]\r\n    discussion.map((item)=>{\r\n      if(!item){\r\n        return res.json({Message:\"There are discussions on this video\"})\r\n      }\r\n      if(item.videoId.toString() === videoId){\r\n        console.log('Matched')\r\n        data.push({question:item.question,answer:item.answer || 'waiting for answer', answeredBy:item.answeredBy || 'Instructor busy in Writing answer', createdAt:item.createdAt})\r\n        return data\r\n      }\r\n      else{\r\n        console.log(\"No\")\r\n      }\r\n    })\r\n    if(data.length<=10){\r\n      res.json({message:`Top ${data.length} discussions on this video`, Data:data})\r\n    }\r\n  } catch (error) {\r\n    \r\n  }\r\n}\r\nmodule.exports = {\r\n  getProfile,\r\n  enrollCourse,\r\n  showEnrolled,\r\n  topRanks,\r\n  completedCourses,\r\n  progressController,\r\n  courseProgress,\r\n  filter,\r\n  sorting,\r\n  markVideoAsComplete,\r\n  editProfile,\r\n  editPassword,\r\n  ratingController,\r\n  askQuestion,\r\n  topDiscussions\r\n};\r\n"]}