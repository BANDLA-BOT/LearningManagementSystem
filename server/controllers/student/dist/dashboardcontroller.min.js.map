{"version":3,"sources":["dashboardcontroller.js"],"names":["Student","require","courseModel","getProfile","req","res","id","student","courses","regeneratorRuntime","async","_context","prev","next","user","console","log","awrap","findById","_id","select","sent","find","limit","abrupt","message","json","Profile","t0","stop","courseId","userId","course","_context2","params","status","enrolled","push","coursesAvailable","isComplete","save","Message","Error","result","_context3","updateOne","$pull","nModified","send","EnrollUpdated","error","enrollCourse","students","_context4","aggregate","$match","enrolled.isComplete","$addFields","$size","$filter","input","as","cond","$eq","$sort","$project","firstname","lastname","Count","rankings","markAsComplete","_context5","findOneAndUpdate","$addToSet","completedCourses","new","progressController","totalCourses","coursesData","_context6","length","filter","deleteEnroll","coursesPercentage","Progress","studentId","results","_context8","populate","Promise","all","map","_context7","$unwind","totalVideos","$sum","completedVideos","$cond","$multiply","$divide","progress","query","f","toLowerCase","where","gt","paidCourses","eq","freeCourses","_context9","sorting","_courses","_courses2","_context10","sort","title","rating","module","exports","topRanks","courseProgress"],"mappings":"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","file":"dashboardcontroller.min.js","sourcesContent":["const Student = require('../../models/users/studentModel.js')\r\nconst courseModel = require('../../models/course/courseModel.js')\r\n\r\nconst getProfile = async (req, res) => {\r\n  const id = req.user;\r\n  console.log(id);\r\n  try {\r\n    const student = await Student.findById({ _id: id.id }).select(\"-password\");\r\n    const courses = await courseModel.find().limit(61\r\n\r\n    );\r\n    if (!student) {\r\n      return res.json({ message: \"No student found \" });\r\n    }\r\n    if (!courses) {\r\n      return res.json({ message: \"No courses available currently\" });\r\n    }\r\n    res.json({\r\n      message: \"Students Profile\",\r\n      Profile: student,\r\n      courses: courses,\r\n    });\r\n    console.log(student);\r\n  } catch (error) {}\r\n};\r\n\r\nconst enrollCourse = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const userId = req.user;\r\n  const course = await courseModel.findById({ _id: courseId });\r\n  const student = await Student.findById({ _id: userId.id });\r\n  try {\r\n    if (!student) {\r\n      return res.status(400).json({ message: \"Student not found\" });\r\n    }\r\n    if (!course) {\r\n      return res.status(400).json({ message: \"Course not found\" });\r\n    }\r\n    student.enrolled.push({\r\n      coursesAvailable: course._id,\r\n      isComplete: false,\r\n    });\r\n    await student.save();\r\n    res\r\n      .status(200)\r\n      .json({ Message: \"Course enrolled successfuly\", Student: student });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n\r\nconst deleteEnroll = async (req, res) => {\r\n  try {\r\n    const userId = req.user;\r\n    const { courseId } = req.params;\r\n    const result = await Student.updateOne(\r\n      { _id: userId.id },\r\n      { $pull: { enrolled: { _id: courseId } } }\r\n    );\r\n    if (result.nModified > 0) {\r\n      res.status(200).send({ message: \"Enrolls Updated\" });\r\n    }\r\n    res.json({ EnrollUpdated: result });\r\n  } catch (error) {\r\n    res.status(500).send({ message: \"Server error\", error });\r\n  }\r\n};\r\nconst topRanks = async (req, res) => {\r\n  try {\r\n    const students = await Student.aggregate([\r\n      {\r\n        $match: {\r\n          \"enrolled.isComplete\": true,\r\n        },\r\n      },\r\n      {\r\n        $addFields: {\r\n          Count: {\r\n            $size: {\r\n              $filter: {\r\n                input: \"$enrolled\",\r\n                as: \"enrolled\",\r\n                cond: { $eq: [\"$$enrolled.isComplete\", true] },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      {\r\n        $sort: { _id: -1 },\r\n      },\r\n\r\n      {\r\n        $project: {\r\n          firstname: 1,\r\n          lastname: 1,\r\n          Count:1\r\n        },\r\n      },\r\n    ]);\r\n    res.status(200).json({ rankings: students });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst markAsComplete = async (req, res) => {\r\n  try {\r\n    const { courseId } = req.params;\r\n    const userId = req.user;\r\n    const student = await Student.findOneAndUpdate(\r\n      { _id: userId.id, \"enrolled.coursesAvailable\": courseId },\r\n      {\r\n        $set: { \"enrolled.$.isComplete\": true },\r\n        $addToSet: { completedCourses: { courses: courseId } },\r\n      },\r\n      { new: true }\r\n    );\r\n    if (!student) {\r\n      return res.json({ error: \"student not found\" });\r\n    }\r\n    res.json({ message: student });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst progressController = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const student = await Student.findById(userId);\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n\r\n    const totalCourses = student.enrolled.length;\r\n    const completedCourses = student.enrolled.filter(\r\n      (course) => course.isComplete\r\n    ).length;\r\n    const coursesPercentage = (completedCourses / totalCourses) * 100;\r\n\r\n    const coursesData = {\r\n      totalCourses,\r\n      completedCourses,\r\n      coursesPercentage,\r\n    };\r\n\r\n    res.status(200).json({ message: \"Progress report\", Progress: coursesData });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst courseProgress = async (req, res) => {\r\n  try {\r\n    const studentId = req.user.id;\r\n    const student = await Student.findById(studentId).populate(\"enrolled\");\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const results = await Promise.all(\r\n        student.enrolled.map(async (course) => {\r\n        const result = await courseModel.aggregate([\r\n          { $match: { _id: course.coursesAvailable } },\r\n          { $unwind: \"$section\" },\r\n          { $unwind: \"$section.videos\" },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              totalVideos: { $sum: 1 },\r\n              completedVideos: {\r\n                $sum: { $cond: [\"$section.videos.completed\", 1, 0] },\r\n              },\r\n            },\r\n          },\r\n          {\r\n            $project: {\r\n              _id: 0,\r\n              totalVideos: 1,\r\n              completedVideos: 1,\r\n              completedPercentage: {\r\n                $cond: [\r\n                    { $eq: ['$totalVideos', 0] },\r\n                    0,\r\n                    { \r\n                      $multiply: [\r\n                        { $divide: ['$completedVideos', '$totalVideos'] },\r\n                        100\r\n                      ]\r\n                    }\r\n                  ]\r\n              },\r\n            },\r\n          },\r\n        ]);\r\n        return {\r\n            course:course,\r\n            progress:result[0]\r\n        }\r\n      })\r\n    )\r\n    res.json(results)\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n\r\n\r\n//filtering Records \r\n\r\nconst filter = async(req,res)=>{\r\n  try {\r\n    const query = req.query.f\r\n    console.log(query)\r\n    if(query.toLowerCase() === 'paid'){\r\n      const paidCourses = await courseModel.find().where('price').gt(0);\r\n      return res.status(200).json({message:\"Paid courses\", paidCourses:paidCourses})\r\n    }else if(query.toLowerCase() === 'free'){\r\n      const freeCourses = await courseModel.find().where('price').eq(0)\r\n      return res.status(200).json({message:\"free courses\", freeCourses:freeCourses})\r\n    }\r\n    res.json({message:\"No courses available based on Query\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst sorting = async(req,res)=>{\r\n  try {\r\n    const query = req.query.sort\r\n    if(query.toLowerCase() === \"asc\"){\r\n      const courses = await courseModel.find().sort({title:1})\r\n      return res.json({message:\"Ascending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"desc\"){\r\n      const courses = await courseModel.find().sort({title:-1})\r\n      return res.json({message:\"Descending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"rating\"){\r\n      const courses = await courseModel.find().sort({rating:-1})\r\n      return res.json({message:\"Rating order\", course:courses})\r\n    }\r\n    res.json({message:\"No Sorting chosen\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  getProfile,\r\n  enrollCourse,\r\n  deleteEnroll,\r\n  topRanks,\r\n  markAsComplete,\r\n  progressController,\r\n  courseProgress,\r\n  filter,\r\n  sorting\r\n};\r\n"]}