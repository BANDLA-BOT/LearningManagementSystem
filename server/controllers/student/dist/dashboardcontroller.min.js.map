{"version":3,"sources":["dashboardcontroller.js"],"names":["Student","require","courseModel","adminModel","getProfile","req","res","id","student","courses","regeneratorRuntime","async","_context","prev","next","user","awrap","findById","_id","select","sent","find","limit","abrupt","json","message","Profile","porfileStatus","t0","status","Message","Error","stop","editProfile","_req$body","email","firstname","lastname","userId","_context2","body","updateOne","$set","editPassword","_req$body2","currentPassword","newPassword","reEnterNewPassword","_context3","password","courseId","course","admin","Course","_context4","params","findOne","some","coursesAvailable","equals","courseRequests","push","paid","save","showEnrolled","_context5","populate","List","enrolled","error","topRanks","students","_context6","aggregate","$match","enrolled.isComplete","$addFields","Count","$size","$filter","input","as","cond","$sort","$project","rankings","_req$params","videoId","enrolledCourses","enrolledCourse","courseCompletion","totalVideos","completedVideos","_context7","console","log","enroll","cv","videos","includes","enrollCourse","section","reduce","acc","length","sections","available","allCompleted","_context8","progressController","totalCourses","_completedCourses","coursesData","_context9","studentId","completedCourses","filter","isComplete","coursesPercentage","Progress","courseProgress","results","_context11","Promise","all","map","result","_context10","$unwind","$group","$sum","$cond","completedPercentage","$eq","$multiply","$divide","progress","query","paidCourses","freeCourses","_context12","f","toLowerCase","where","gt","eq","sort","title","rating","_context13","_context14","send","r","ratedBy","toString","rate","Number","askQuestion","_req$params2","question","askedBy","_context15","discussions","topDiscussions","_req$params3","questionCounts","sortedQuestions","data","_context16","d","forEach","alreadyCompleted","entries","_ref","_ref2","_slicedToArray","count","b","a","slice","q","answer","firstDiscussion","answeredBy","createdAt","module","exports","sorting","ratingController"],"mappings":"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","file":"dashboardcontroller.min.js","sourcesContent":["const Student = require(\"../../models/users/studentModel.js\");\r\nconst courseModel = require(\"../../models/course/courseModel.js\");\r\nconst adminModel = require(\"../../models/users/adminModel.js\");\r\n\r\n//Dashboard\r\nconst getProfile = async (req, res) => {\r\n  const id = req.user;\r\n  try {\r\n    const student = await Student.findById({ _id: id.id }).select(\"-password\");\r\n    const courses = await courseModel.find().limit(61);\r\n    if (!student) {\r\n      return res.json({ message: \"No student found \" });\r\n    }\r\n    if (!courses) {\r\n      return res.json({ message: \"No courses available currently\" });\r\n    }\r\n    res.json({\r\n      message: \"Students Profile\",\r\n      Profile: student,\r\n      courses: courses,\r\n      porfileStatus: true,\r\n    });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst editProfile = async (req, res) => {\r\n  try {\r\n    const { email, firstname, lastname } = req.body;\r\n    const userId = req.user.id;\r\n    const student = await Student.updateOne(\r\n      { _id: userId },\r\n      { $set: { firstname: firstname, lastname: lastname, email: email } }\r\n    );\r\n    res.status(200).json({ message: \"Profile updated successfuly\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst editPassword = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const { currentPassword, newPassword, reEnterNewPassword } = req.body;\r\n    const student = await Student.findById(userId);\r\n    if (currentPassword !== student.password) {\r\n      return res.json({ message: \"You have entered wrong current password\" });\r\n    }\r\n    if (newPassword === student.password) {\r\n      return res.json({\r\n        message: \"New password should be different from Old password\",\r\n      });\r\n    }\r\n    if (newPassword !== reEnterNewPassword) {\r\n      return res.json({\r\n        message: \"Confirm password should same as New password\",\r\n      });\r\n    }\r\n    student.password = newPassword;\r\n    await student.save();\r\n    res.json({ message: \"Password changed successfully\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst enrollCourse = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const userId = req.user;\r\n  const course = await courseModel.findById({ _id: courseId });\r\n  const admin = await adminModel.findOne();\r\n  const student = await Student.findById({ _id: userId.id });\r\n  try {\r\n    if (!student) {\r\n      return res.status(400).json({ message: \"Student not found\" });\r\n    }\r\n    if (!course) {\r\n      return res.status(400).json({ message: \"Course not found\" });\r\n    }\r\n    const Course = student.enrolled;\r\n    const available = Course.some((course) =>\r\n      course.coursesAvailable.equals(courseId)\r\n    );\r\n    if (available) {\r\n      return res.json({ Message: \"You have already enrolled this course\" });\r\n    }\r\n    admin.courseRequests.push({\r\n      courseId: course._id,\r\n      studentId: student._id,\r\n      paid: true,\r\n    });\r\n    await admin.save();\r\n    res\r\n      .status(200)\r\n      .json({\r\n        Message:\r\n          \"Request sent to the Admin, check your EnrolledList after sometime\",\r\n      });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst showEnrolled = async (req, res) => {\r\n  const userId = req.user;\r\n  try {\r\n    const student = await Student.findById({ _id: userId.id }).populate(\r\n      \"enrolled.coursesAvailable\"\r\n    );\r\n    if (!student) return res.status(404).json({ message: \"Student not found\" });\r\n    res.status(200).json({ message: \"Found\", List: student.enrolled });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\nconst topRanks = async (req, res) => {\r\n  try {\r\n    const students = await Student.aggregate([\r\n      {\r\n        $match: {\r\n          \"enrolled.isComplete\": true,\r\n        },\r\n      },\r\n      {\r\n        $addFields: {\r\n          Count: {\r\n            $size: {\r\n              $filter: {\r\n                input: \"$enrolled\",\r\n                as: \"enrolled\",\r\n                cond: { $eq: [\"$$enrolled.isComplete\", true] },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      {\r\n        $sort: { _id: -1 },\r\n      },\r\n\r\n      {\r\n        $project: {\r\n          firstname: 1,\r\n          lastname: 1,\r\n          Count: 1,\r\n        },\r\n      },\r\n    ]);\r\n    res.status(200).json({ rankings: students });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\nconst markVideoAsComplete = async (req, res) => {\r\n  try {\r\n    const { courseId, videoId } = req.params;\r\n    const userId = req.user.id;\r\n    const course = await courseModel.findById(courseId);\r\n    if (!course) {\r\n      return res.status(404).json({ message: \"Course not found\" });\r\n    }\r\n\r\n    const student = await Student.findById(userId).populate(\r\n      \"enrolled.coursesAvailable\"\r\n    );\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const enrolledCourses = student.enrolled;\r\n    console.log(enrolledCourses);\r\n    const enrolledCourse = student.enrolled.find((enroll) =>\r\n      enroll.coursesAvailable.equals(courseId)\r\n    );\r\n    console.log(enrolledCourse);\r\n    if (!enrolledCourse) {\r\n      return res\r\n        .status(404)\r\n        .json({ message: \"Course not enrolled by the student\" });\r\n    }\r\n\r\n    const alreadyCompleted = enrolledCourse.completedVideos.find(\r\n      (cv) => cv.courseId.equals(courseId) && cv.videos.includes(videoId)\r\n    );\r\n    if (alreadyCompleted) {\r\n      return res.json({ message: \"Video already marked as complete\" });\r\n    }\r\n\r\n    let courseCompletion = enrolledCourse.completedVideos.find((cv) =>\r\n      cv.courseId.equals(courseId)\r\n    );\r\n    if (!courseCompletion) {\r\n      courseCompletion = { courseId, videos: [videoId] };\r\n      enrolledCourse.completedVideos.push(courseCompletion);\r\n    } else {\r\n      courseCompletion.videos.push(videoId);\r\n    }\r\n    await student.save();\r\n\r\n    const totalVideos = course.section.reduce(\r\n      (acc, section) => acc + section.videos.length,\r\n      0\r\n    );\r\n    const completedVideos = courseCompletion.videos.length;\r\n\r\n    res.json({\r\n      message: \"Videos marked as complete\",\r\n      completedVideos,\r\n      totalVideos,\r\n      allCompleted: completedVideos === totalVideos,\r\n    });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\nconst completedCourses = async (req, res) => {\r\n  try {\r\n    const { courseId } = req.params;\r\n    const userId = req.user.id;\r\n\r\n    const student = await Student.findById(userId).populate(\r\n      \"enrolled.coursesAvailable\"\r\n    );\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const enrolledCourse = student.enrolled.find((enroll) =>\r\n      enroll.coursesAvailable.equals(courseId)\r\n    );\r\n    if (!enrolledCourse) {\r\n      return res\r\n        .status(404)\r\n        .json({ message: \"Course not enrolled by the student\" });\r\n    }\r\n    const courseCompletion = enrolledCourse.completedVideos.find((cv) =>\r\n      cv.courseId.equals(courseId)\r\n    ) || { videos: [] };\r\n\r\n    const course = await courseModel.findById(courseId);\r\n    const totalVideos = course.sections.reduce(\r\n      (acc, section) => acc + section.videos.length,\r\n      0\r\n    );\r\n    res.json({\r\n      completedVideos: courseCompletion.videos,\r\n      totalVideos,\r\n      allCompleted: courseCompletion.videos.length === totalVideos,\r\n    });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\nconst progressController = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const student = await Student.findById(userId);\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const totalCourses = student.enrolled.length;\r\n    const completedCourses = student.enrolled.filter(\r\n      (course) => course.isComplete\r\n    ).length;\r\n    const coursesPercentage = (completedCourses / totalCourses) * 100;\r\n\r\n    const coursesData = {\r\n      totalCourses,\r\n      completedCourses,\r\n      coursesPercentage,\r\n    };\r\n\r\n    res.status(200).json({ message: \"Progress report\", Progress: coursesData });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\nconst courseProgress = async (req, res) => {\r\n  try {\r\n    const studentId = req.user.id;\r\n    const student = await Student.findById(studentId).populate(\"enrolled\");\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const results = await Promise.all(\r\n      student.enrolled.map(async (course) => {\r\n        const result = await courseModel.aggregate([\r\n          { $match: { _id: course.coursesAvailable } },\r\n          { $unwind: \"$section\" },\r\n          { $unwind: \"$section.videos\" },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              totalVideos: { $sum: 1 },\r\n              completedVideos: {\r\n                $sum: { $cond: [\"$section.videos.completed\", 1, 0] },\r\n              },\r\n            },\r\n          },\r\n          {\r\n            $project: {\r\n              _id: 0,\r\n              totalVideos: 1,\r\n              completedVideos: 1,\r\n              completedPercentage: {\r\n                $cond: [\r\n                  { $eq: [\"$totalVideos\", 0] },\r\n                  0,\r\n                  {\r\n                    $multiply: [\r\n                      { $divide: [\"$completedVideos\", \"$totalVideos\"] },\r\n                      100,\r\n                    ],\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n          },\r\n        ]);\r\n        return {\r\n          course: course,\r\n          progress: result[0],\r\n        };\r\n      })\r\n    );\r\n    res.json(results);\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n//filtering Records\r\nconst filter = async (req, res) => {\r\n  try {\r\n    const query = req.query.f;\r\n    console.log(query);\r\n    if (query.toLowerCase() === \"paid\") {\r\n      const paidCourses = await courseModel.find().where(\"price\").gt(0);\r\n      return res\r\n        .status(200)\r\n        .json({ message: \"Paid courses\", paidCourses: paidCourses });\r\n    } else if (query.toLowerCase() === \"free\") {\r\n      const freeCourses = await courseModel.find().where(\"price\").eq(0);\r\n      return res\r\n        .status(200)\r\n        .json({ message: \"free courses\", freeCourses: freeCourses });\r\n    }\r\n    res.json({ message: \"No courses available based on Query\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\nconst sorting = async (req, res) => {\r\n  try {\r\n    const query = req.query.sort;\r\n    if (query.toLowerCase() === \"asc\") {\r\n      const courses = await courseModel.find().sort({ title: 1 });\r\n      return res.json({ message: \"Ascending order\", course: courses });\r\n    } else if (query.toLowerCase() === \"desc\") {\r\n      const courses = await courseModel.find().sort({ title: -1 });\r\n      return res.json({ message: \"Descending order\", course: courses });\r\n    } else if (query.toLowerCase() === \"rating\") {\r\n      const courses = await courseModel.find().sort({ rating: -1 });\r\n      return res.json({ message: \"Rating order\", course: courses });\r\n    }\r\n    res.json({ message: \"No Sorting chosen\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n//Rating controller\r\nconst ratingController = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const { rating } = req.query;\r\n  const userId = req.user.id;\r\n  console.log(userId);\r\n  if (!rating || rating < 1 || rating > 5) {\r\n    return res.status(400).send(\"Invalid rating. Must be between 1 and 5\");\r\n  }\r\n  try {\r\n    const course = await courseModel.findById(courseId);\r\n    if (!course) {\r\n      return res.status(404).json(\"Course not found.\");\r\n    }\r\n\r\n    const existingRating = course.rating.find(\r\n      (r) => r.ratedBy.toString() === userId\r\n    );\r\n    if (existingRating) {\r\n      return res\r\n        .status(400)\r\n        .json({ message: \"You have already rated this course\" });\r\n    }\r\n\r\n    course.rating.push({\r\n      rate: Number(rating),\r\n      ratedBy: userId,\r\n    });\r\n    await course.save();\r\n    res.json({ message: \"Thank you for rating the course\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n//Discussions[ ASK QUESTION ]\r\nconst askQuestion = async (req, res) => {\r\n  const { videoId, courseId } = req.params;\r\n  const { question } = req.body;\r\n  const askedBy = req.user.id;\r\n  try {\r\n    const course = await courseModel.findById(courseId);\r\n    const discussion = course.discussions;\r\n    discussion.push({\r\n      videoId: videoId,\r\n      courseId: courseId,\r\n      askedBy: askedBy,\r\n      question: question,\r\n    });\r\n    await course.save();\r\n    res.json({\r\n      message:\r\n        \"We have got your question, you will get answer back from our instructor\",\r\n    });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n//Discussions List\r\nconst topDiscussions = async (req, res) => {\r\n  try {\r\n    const { courseId, videoId } = req.params;\r\n    const course = await courseModel.findById(courseId);\r\n    if (!course) {\r\n      return res.status(404).json({ message: \"Course not found\" });\r\n    }\r\n    const discussions = course.discussions.filter(\r\n      (d) => d.videoId.toString() === videoId\r\n    );\r\n    if (discussions.length === 0) {\r\n      return res\r\n        .status(404)\r\n        .json({ message: \"No discussions found for this video\" });\r\n    }\r\n    const questionCounts = {};\r\n\r\n    discussions.forEach((d) => {\r\n      if (d.question) {\r\n        questionCounts[d.question] = (questionCounts[d.question] || 0) + 1;\r\n      }\r\n    });\r\n\r\n    const sortedQuestions = Object.entries(questionCounts)\r\n      .map(([question, count]) => ({\r\n        question,\r\n        count,\r\n        discussions: discussions.filter((d) => d.question === question),\r\n      }))\r\n      .sort((a, b) => b.count - a.count)\r\n      .slice(0, 10);\r\n\r\n    const data = sortedQuestions.map((q) => {\r\n      const firstDiscussion = q.discussions[0];\r\n      return {\r\n        question: q.question,\r\n        answer: firstDiscussion.answer || \"Waiting for answer\",\r\n        answeredBy:\r\n          firstDiscussion.answeredBy || \"Instructor busy in writing answer\",\r\n        createdAt: firstDiscussion.createdAt,\r\n        count: q.count,\r\n      };\r\n    });\r\n    res.json({\r\n      message: `Top ${data.length} discussions on this video`,\r\n      data,\r\n    });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Inernal server error\", Error: error.message });\r\n  }\r\n\r\n  // try {\r\n  //   const { courseId, videoId } = req.params;\r\n  //   const course = await courseModel.aggregate([\r\n  //     {\r\n  //       $match:{_id:courseId},\r\n  //     },\r\n  //     {$unwind:'$discussions'},\r\n  //     {$match:{  \"discussions.videoId\": videoId}},\r\n  //     {\r\n  //       $group:{\r\n  //         _id:'$discussions.question',\r\n  //         count:{ $sum:1 },\r\n  //         question:{$first:'$discussions.question'},\r\n  //         answer: { $first: \"$discussions.answer\" },\r\n  //         answeredBy: { $first: \"$discussions.answeredBy\" },\r\n  //         createdAt: { $first: \"$discussions.createdAt\" },\r\n  //       }\r\n  //     },\r\n  //     { $sort :{ count:-1}},\r\n  //     { $limit:10}\r\n  //   ]);\r\n  //   console.log(course)\r\n  //   const data = course.map(item => ({\r\n  //     question: item.question,\r\n  //     answer: item.answer || \"Waiting for answer\",\r\n  //     answeredBy: item.answeredBy || \"Instructor busy in writing answer\",\r\n  //     createdAt: item.createdAt,\r\n  //     count: item.count\r\n  //   }));\r\n  //   res.json({\r\n  //     message: `Top ${data.length} discussions on this video`,\r\n  //     data\r\n  //   });\r\n  // } catch (error) {\r\n  //   res.json({ Message: \"Internal server error\", error: error.message });\r\n  // }\r\n};\r\n\r\nmodule.exports = {\r\n  getProfile,\r\n  enrollCourse,\r\n  showEnrolled,\r\n  topRanks,\r\n  completedCourses,\r\n  progressController,\r\n  courseProgress,\r\n  filter,\r\n  sorting,\r\n  markVideoAsComplete,\r\n  editProfile,\r\n  editPassword,\r\n  ratingController,\r\n  askQuestion,\r\n  topDiscussions,\r\n};\r\n"]}