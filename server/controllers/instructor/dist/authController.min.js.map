{"version":3,"sources":["authController.js"],"names":["Instructor","require","bcrypt","req","res","_req$body","firstname","lastname","email","password","imgPath","hashedPassword","newInstructor","regeneratorRuntime","async","_context","prev","next","body","concat","file","destination","filename","awrap","registerController","sent","abrupt","status","json","message","hashSync","profilePic","t0","Error","stop","loginController","_req$body2","instructor","token","_context2","findOne","isPasswordValid","compareSync","jwt","id","_id","process","env","JWT_SECRET_KEY_INSTRUCTOR","expiresIn","login","error"],"mappings":"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","file":"authController.min.js","sourcesContent":["const Instructor = require('../../models/users/instructorModel.js')\r\nconst bcrypt = require('bcryptjs')\r\nconst jwt = require('jsonwebtoken')\r\n\r\nconst registerController = async(req,res)=>{\r\n    try {\r\n    const { firstname, lastname, email, password } = req.body\r\n    const imgPath = `${req.file.destination}/${req.file.filename}`\r\n    const instructor = await Instructor.findOne({email:email})\r\n    if(instructor){\r\n        return res.status(400).json ({message:\"User already exist with same Email ID\"})\r\n    }\r\n    const hashedPassword = bcrypt.hashSync(password, 10)\r\n    const newInstructor = new Instructor({\r\n        firstname:firstname,\r\n        lastname:lastname,\r\n        email:email,\r\n        password:hashedPassword,\r\n        profilePic:imgPath\r\n    })\r\n    await newInstructor.save()\r\n    res.status(201).json({message:\"Registered successfully\"})\r\n    } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n    }\r\n}\r\n\r\nconst loginController = async(req,res)=>{\r\n    try {\r\n        const {email, password} = req.body\r\n        const instructor = await Instructor.findOne({email:email})\r\n        if(!instructor){\r\n            return res.status(404).json({message:\"User not found on this email\"})\r\n        }\r\n        isPasswordValid = bcrypt.compareSync(password, instructor.password)\r\n        if(!isPasswordValid){\r\n            return res.status(400).json({message:\"Incorrect password\"})\r\n        }\r\n        const token = jwt.sign({id:instructor._id}, process.env.JWT_SECRET_KEY_INSTRUCTOR, {expiresIn:'15d'})\r\n        res.status(201).json({\r\n            message:\"Logged in successfully\",\r\n            User:instructor,\r\n            Token:token,\r\n            login:true\r\n        })\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nmodule.exports = {\r\n    registerController,\r\n    loginController\r\n}"]}