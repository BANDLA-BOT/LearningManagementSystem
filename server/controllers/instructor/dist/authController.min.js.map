{"version":3,"sources":["authController.js"],"names":["Instructor","require","bcrypt","nodemailer","registerController","req","res","_req$body","firstname","lastname","email","password","imgPath","hashedPassword","newInstructor","regeneratorRuntime","async","_context","prev","next","body","file","abrupt","json","concat","destination","filename","awrap","findOne","sent","status","message","profilePic","save","t0","Error","stop","instructor","isPasswordValid","compareSync","token","jwt","sign","id","_id","JWT_SECRET_KEY_INSTRUCTOR","expiresIn","User","Token","error","_context2","student","Message","process","env","JWT_INSTRUCTOR_PASSWORD_RESET_KEY","transporter","createTestAccount","service","auth","user","EMAIL_USER","pass","EMAIL_PASS","secure","to","subject","text","resetToken","sendEmail","mailOptions","info","send","_context3","instructorResetPassword","newPassword","decoded","userId","_context4","params","verify","findByIdAndUpdate","module","exports","loginController","instructorPasswordResetLink"],"mappings":"aAAA,IAAMA,WAAaC,QAAQ,yCACrBC,OAASD,QAAQ,YADjBD,IAAAA,QAAaC,gBAGbE,WAAaF,QAAQ,cAErBG,mBAAqB,SAAMC,EAAIC,GAAV,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAAF,EAAAC,KAAA,EAAAX,EAE0BF,EAAIe,KAA7CZ,EAFeD,EAEfC,UAAWC,EAFIF,EAEJE,SAAUC,EAFNH,EAEMG,MAAOC,EAFbJ,EAEaI,SAE/BN,EAAIgB,KAJc,CAAAJ,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAK,OAAA,SAArBlB,EAAAA,OAAqB,KAAAmB,KAArBnB,CAAAA,QAAAA,iCAAqB,KAAA,EAAA,OAOjBQ,EAPiB,GAAAY,OAOJnB,EAAIgB,KAAKI,YAPL,KAAAD,OAOoBnB,EAAIgB,KAAKK,UAP7BT,EAAAE,KAAA,EAAAJ,mBAAAY,MAAA3B,WAAA4B,QAAA,CAAAlB,MAAAA,KAAA,KAAA,EAAA,GAAAO,EAAAY,KAAA,OAAAZ,EAAAK,OAAA,SAAAhB,EAAAwB,OAAA,KAAAP,KAAA,CAAAQ,QAAA,2CAAAd,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAN,EAE8BO,OAA7CZ,SAFeG,EAAA,IAcjBG,EAAgB,IAAId,WAAW,CAddQ,UAIda,EAJcZ,SAAAA,EAAAC,MAAAA,EAAAC,SAAAE,EAmBnBmB,WAAWpB,IAnBQK,EAAAE,KAAA,GAAAJ,mBAAAY,MAKWI,EAASE,QALpB,KAAA,GAKS3B,EAAAwB,OALT,KAAAP,KAAA,CAAAQ,QAAA,4BAAAd,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAiB,GAAAjB,EAAA,MAAA,GAAAX,EAAAwB,OAAA,KAAAP,KAAA,CAAAQ,QAAA,wBAAAI,MAAAlB,EAAAiB,GAAAH,UAAA,KAAA,GAAA,IAAA,MAAA,OAAAd,EAAAmB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OASsB1B,gBAAMA,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,EAqBrBL,EAAIe,KAAvBV,EArBwCA,EAqBxCA,MAAOC,EArBiCD,EAqBjCC,SArBiCD,EAAAA,KAAAA,EAAAA,mBAAAA,MAT5BV,WAAA4B,QAAA,CAAAlB,MAAAA,KAS4BA,KAAAA,EAAAA,GAT5B2B,EAS4B3B,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SAwBpCJ,EAAIwB,OAAO,KAAKP,KAAK,CAACQ,QAAQ,kCAxBMrB,KAAAA,EAAAA,GAT5B4B,gBAAApC,OAAAqC,YAAA5B,EAAA0B,EAAA1B,UAAA2B,gBAS4B5B,CAAAA,EAAAA,KAAAA,GAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SAT5BJ,EAAAwB,OAAA,KAAAP,KAAA,CAAAQ,QAAA,wBAS4BrB,KAAAA,GAT5B8B,EAAAC,IAAAC,KAAA,CAAAC,GAAAN,EAWTO,KAACd,QAAYP,IAAMsB,0BAAA,CAAAC,UAAA,QAACf,EAAAA,OAAO,KAACR,KAAA,CAXnBQ,QAAA,yBA0CfgB,KAAKV,EA1CUW,MAAAR,EAajB3B,OAAAA,IAJ6CH,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAO/CD,EAAAA,OAAAA,KAASA,KAAAA,CAFwBsB,QAAA,wBAAAkB,MAAAC,EAAAhB,GAAAH,UALcrB,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OAU/CsB,4BAAWpB,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAnBQF,EAAAL,EAAAe,KAAAV,MAmBRE,EAAAA,KAAAA,EAAAA,mBAAAA,MAnBQZ,WAqBjBc,QAAAA,CAAAA,MAAAA,KAFSF,KAAAA,EAAAA,GAnBQyB,EAmBRzB,EAAAA,KAmCPuC,QAnCOvC,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SAnBQN,EAAAwB,OAAA,KAAAP,KAAA,CAAA6B,QAAA,oBAmBRxC,KAAAA,EAGOmB,EAAQU,IAAAC,KAAA,CAAAC,GAAAN,EAAAO,KAAAS,QAAAC,IAAAC,kCAAA,CAAAT,UAAA,QAA9BU,EAAArD,WAAAsD,kBAAA,CAtBuBC,QAAA,QAAAC,KAAA,CA6DVC,KAAKP,QAAQC,IAAIO,WA7DPC,KAAAT,QAAAC,IAAAS,YAAAC,QAAA,IAwBDjC,EAAQ,CAAyBI,KAAKkB,QAACC,IAAAO,WAA7DI,GAAAvD,EA6CQwD,QAAQ,sBArEOC,KAAA,kHAAA3C,OAAA4C,IAAAZ,EAAAa,UAAAC,EAAA,SAAArB,EAAAsB,GAAA,GAAAtB,EAAA,OAAA3C,EAAAwB,OAAA,KAAA0C,KAAA,6BAA3BlE,EAAAkE,KAAA,+BAmBmB5D,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GA6DXN,EAAIwB,OAAO,KAAKP,KAAK,CAAC6B,QAAQ,wBAAyBjB,MAAMsC,EAAAvC,GAAMH,UA7DxDnB,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OASK8D,wBAAA,SAAArE,EAAAC,GAAA,IAAAkC,EAAAmC,EAAAC,EAAAC,EAAAhE,EAAA,OAAAE,mBAAAC,MAAA,SAAA8D,GAAA,OAAA,OAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,KAAA,EAAA,OAAA2D,EAAA5D,KAAA,EAAAsB,EAAAnC,EAAA0E,OAAAvC,MAAAmC,EAAAtE,EAETK,KAFSiE,YAAAC,EAAAnC,IAAAuC,OAAAxC,EAAAa,QAAAC,IAAAC,mCAAAsB,EAAAD,EAAAjC,GAAAmC,EAAA3D,KAAA,EAAAJ,mBAAAY,MAGmCjB,OAAAA,KAAAA,EAAAA,KAHnC,KAAA,EAAA,OAG6BA,EAH7BoE,EAAAjD,KAAAiD,EAAA3D,KAAA,GAAAJ,mBAAAY,MAAA3B,WAAAiF,kBAAAJ,EAAA,CAAAlE,SAAAE,KAAA,KAAA,GA+DhBP,EAAIiB,KAAK,CAAC6B,QAAQ,kCA/DF0B,EAAA3D,KAAA,GAAA,MAAA,KAAA,GAAA2D,EAAA5D,KAAA,GAAA4D,EAAA5C,GAAA4C,EAAA,MAAA,GAGVzC,EAAAA,OAAAA,KAHUd,KAAA,CAAA6B,QAAA,wBAAAH,MAAA6B,EAAA5C,GAAAH,UAAA,KAAA,GAAA,IAAA,MAAA,OAAA+C,EAAA1C,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAA8C,OAAAC,QAAA,CAAA/E,mBAAAA,mBAAAgF,gBAAAA,gBAuEpBC,4BAAAA,4BAvEoBX,wBAAAA","file":"authController.min.js","sourcesContent":["const Instructor = require('../../models/users/instructorModel.js')\r\nconst bcrypt = require('bcryptjs')\r\nconst jwt = require('jsonwebtoken')\r\nconst nodemailer = require('nodemailer')\r\n\r\nconst registerController = async(req,res)=>{\r\n    try {\r\n    const { firstname, lastname, email, password } = req.body\r\n  \r\n    if (!req.file) {\r\n        return res.status(400).json({ message: \"Profile picture is required\" });\r\n    }\r\n    const imgPath = `${req.file.destination}/${req.file.filename}`\r\n\r\n    const instructor = await Instructor.findOne({email:email})\r\n    if(instructor){\r\n        return res.status(400).json ({message:\"User already exist with same Email ID\"})\r\n    }\r\n    const hashedPassword = bcrypt.hashSync(password, 10)\r\n    const newInstructor = new Instructor({\r\n        firstname:firstname,\r\n        lastname:lastname,\r\n        email:email,\r\n        password:hashedPassword,\r\n        profilePic:imgPath\r\n    })\r\n    await newInstructor.save()\r\n    res.status(201).json({message:\"Registered successfully\"})\r\n    } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n    }\r\n}\r\n\r\nconst loginController = async(req,res)=>{\r\n    try {\r\n        const {email, password} = req.body\r\n        const instructor = await Instructor.findOne({email:email})\r\n        if(!instructor){\r\n            return res.status(404).json({message:\"User not found on this email\"})\r\n        }\r\n        isPasswordValid = bcrypt.compareSync(password, instructor.password)\r\n        if(!isPasswordValid){\r\n            return res.status(400).json({message:\"Incorrect password\"})\r\n        }\r\n        const token = jwt.sign({id:instructor._id}, process.env.JWT_SECRET_KEY_INSTRUCTOR, {expiresIn:'15d'})\r\n        res.status(201).json({\r\n            message:\"Logged in successfully\",\r\n            User:instructor,\r\n            Token:token,\r\n            login:true\r\n        })\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst instructorPasswordResetLink = async(req,res)=>{\r\n    try {\r\n        const {email} = req.body\r\n        const instructor = await Instructor.findOne({email})\r\n        if(!student){\r\n            return res.status(404).json({Message:\"User not found\"})\r\n        }\r\n        const resetToken = jwt.sign({id:instructor._id}, process.env.JWT_INSTRUCTOR_PASSWORD_RESET_KEY, {expiresIn:'10m'})\r\n        const transporter = nodemailer.createTestAccount({\r\n            service:'gmail',\r\n            auth:{\r\n                 user:process.env.EMAIL_USER,\r\n                 pass:process.env.EMAIL_PASS\r\n                },\r\n            secure:true,\r\n        })\r\n        const mailOptions = {\r\n            from:process.env.EMAIL_USER,\r\n            to:email,\r\n            subject:'Password reset link',\r\n            text:`Please use the following link to reset your password: http://localhost:8000/api/instructor/auth/reset-password/${resetToken}`\r\n        }\r\n        transporter.sendEmail(mailOptions   , (error, info)=>{\r\n            if(error){\r\n                return res.status(500).send('Error while sending email')\r\n            }\r\n            res.send('Password reset email sent');\r\n\r\n        })\r\n    } catch (error) {\r\n        res.status(500).json({Message:\"Internal server error\", Error:error.message})\r\n    }\r\n}\r\nconst instructorResetPassword = async(req,res)=>{\r\n    try {\r\n        const {token} = req.params\r\n        const { newPassword } = req.body\r\n        const decoded = jwt.verify(token, process.env.JWT_INSTRUCTOR_PASSWORD_RESET_KEY)\r\n        const userId = decoded.id\r\n        const hashedPassword = await bcrypt.hash(newPassword, 10)\r\n        await Instructor.findByIdAndUpdate(userId, {password:hashedPassword})\r\n        res.json({Message:\"Password updated successfully\"})\r\n    } catch (error) {\r\n        res.status(500).json({Message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nmodule.exports = {\r\n    registerController,\r\n    loginController,\r\n    instructorPasswordResetLink,\r\n    instructorResetPassword\r\n}"]}