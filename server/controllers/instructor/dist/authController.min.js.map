{"version":3,"sources":["authController.js"],"names":["Instructor","require","bcrypt","nodemailer","req","res","_req$body","firstname","lastname","email","password","imgPath","hashedPassword","newInstructor","regeneratorRuntime","async","_context","prev","next","body","concat","file","destination","filename","awrap","findOne","sent","abrupt","registerController","json","hashSync","profilePic","save","status","message","t0","Error","stop","loginController","_req$body2","instructor","token","_context2","compareSync","isPasswordValid","sign","process","env","JWT_SECRET_KEY_INSTRUCTOR","expiresIn","error","instructorPasswordResetLink","resetToken","transporter","mailOptions","_context3","student","Message","jwt","id","_id","JWT_INSTRUCTOR_PASSWORD_RESET_KEY","createTestAccount","service","EMAIL_USER","pass","secure","from","to","subject","text","sendEmail","info","send","instructorResetPassword","newPassword","decoded","userId","_context4","params","verify","hash","findByIdAndUpdate"],"mappings":"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","file":"authController.min.js","sourcesContent":["const Instructor = require('../../models/users/instructorModel.js')\r\nconst bcrypt = require('bcryptjs')\r\nconst jwt = require('jsonwebtoken')\r\nconst nodemailer = require('nodemailer')\r\nconst registerController = async(req,res)=>{\r\n    try {\r\n    const { firstname, lastname, email, password } = req.body\r\n    const imgPath = `${req.file.destination}/${req.file.filename}`\r\n    const instructor = await Instructor.findOne({email:email})\r\n    if(instructor){\r\n        return res.status(400).json ({message:\"User already exist with same Email ID\"})\r\n    }\r\n    const hashedPassword = bcrypt.hashSync(password, 10)\r\n    const newInstructor = new Instructor({\r\n        firstname:firstname,\r\n        lastname:lastname,\r\n        email:email,\r\n        password:hashedPassword,\r\n        profilePic:imgPath\r\n    })\r\n    await newInstructor.save()\r\n    res.status(201).json({message:\"Registered successfully\"})\r\n    } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n    }\r\n}\r\n\r\nconst loginController = async(req,res)=>{\r\n    try {\r\n        const {email, password} = req.body\r\n        const instructor = await Instructor.findOne({email:email})\r\n        if(!instructor){\r\n            return res.status(404).json({message:\"User not found on this email\"})\r\n        }\r\n        isPasswordValid = bcrypt.compareSync(password, instructor.password)\r\n        if(!isPasswordValid){\r\n            return res.status(400).json({message:\"Incorrect password\"})\r\n        }\r\n        const token = jwt.sign({id:instructor._id}, process.env.JWT_SECRET_KEY_INSTRUCTOR, {expiresIn:'15d'})\r\n        res.status(201).json({\r\n            message:\"Logged in successfully\",\r\n            User:instructor,\r\n            Token:token,\r\n            login:true\r\n        })\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst instructorPasswordResetLink = async(req,res)=>{\r\n    try {\r\n        const {email} = req.body\r\n        const instructor = await Instructor.findOne({email})\r\n        if(!student){\r\n            return res.status(404).json({Message:\"User not found\"})\r\n        }\r\n        const resetToken = jwt.sign({id:instructor._id}, process.env.JWT_INSTRUCTOR_PASSWORD_RESET_KEY, {expiresIn:'10m'})\r\n        const transporter = nodemailer.createTestAccount({\r\n            service:'gmail',\r\n            auth:{\r\n                 user:process.env.EMAIL_USER,\r\n                 pass:process.env.EMAIL_PASS\r\n                },\r\n            secure:true,\r\n        })\r\n        const mailOptions = {\r\n            from:process.env.EMAIL_USER,\r\n            to:email,\r\n            subject:'Password reset link',\r\n            text:`Please use the following link to reset your password: http://localhost:8000/api/instructor/auth/reset-password/${resetToken}`\r\n        }\r\n        transporter.sendEmail(mailOptions   , (error, info)=>{\r\n            if(error){\r\n                return res.status(500).send('Error while sending email')\r\n            }\r\n            res.send('Password reset email sent');\r\n\r\n        })\r\n    } catch (error) {\r\n        res.status(500).json({Message:\"Internal server error\", Error:error.message})\r\n    }\r\n}\r\nconst instructorResetPassword = async(req,res)=>{\r\n    try {\r\n        const {token} = req.params\r\n        const { newPassword } = req.body\r\n        const decoded = jwt.verify(token, process.env.JWT_INSTRUCTOR_PASSWORD_RESET_KEY)\r\n        const userId = decoded.id\r\n        const hashedPassword = await bcrypt.hash(newPassword, 10)\r\n        await Instructor.findByIdAndUpdate(userId, {password:hashedPassword})\r\n        res.json({Message:\"Password updated successfully\"})\r\n    } catch (error) {\r\n        res.status(500).json({Message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nmodule.exports = {\r\n    registerController,\r\n    loginController,\r\n    instructorPasswordResetLink,\r\n    instructorResetPassword\r\n}"]}