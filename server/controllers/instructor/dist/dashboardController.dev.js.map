{"version":3,"sources":["dashboardController.js"],"names":["Instructor","require","CourseModel","bcrypt","mentorsController","req","res","userId","user","id","find","mentors","courses","details","map","item","price","title","description","profile","_id","toString","status","json","message","CoursesList","Error","editInstructorProfile","body","firstname","lastname","about","filePath","file","destination","filename","findOne","profilePic","save","editPassword","currentPassword","newPassword","confirmPassword","findById","comparePassword","compareSync","password","hashedPassword","hashSync","User","module","exports"],"mappings":"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","sourcesContent":["const Instructor = require('../../models/users/instructorModel.js')\r\nconst CourseModel = require('../../models/course/courseModel.js')\r\nconst bcrypt = require('bcryptjs')\r\n\r\nconst mentorsController = async(req,res)=>{\r\n    try {\r\n        const userId = req.user.id\r\n        const mentors = await Instructor.find()\r\n        const courses = await CourseModel.find()\r\n        const details = courses.map((item)=>{\r\n            if(item.price){\r\n                return [item.title,item.description, item.price]\r\n            }\r\n            if(item.price <=0 ){\r\n                return [item.title,item.description, 'FREE']\r\n            }\r\n        })\r\n        let profile = {}\r\n        mentors.map((item)=>{\r\n            if(item._id.toString()=== userId){\r\n                profile = item\r\n            }\r\n        })\r\n        res.status(200).json({message:\"Data found\", mentors:mentors, profile:profile, CoursesList:details})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n    }\r\n}\r\nconst editInstructorProfile = async(req,res)=>{\r\n    try {\r\n        const userId = req.user.id\r\n        const { firstname, lastname, about} = req.body\r\n        const filePath = `${req.file.destination}/${req.file.filename}`\r\n        const user = await Instructor.findOne({_id:userId})\r\n        user.about= about\r\n        user.firstname = firstname\r\n        user.lastname = lastname\r\n        user.profilePic = filePath\r\n        await user.save()\r\n        res.json (user)\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n    }\r\n}\r\nconst editPassword = async(req,res)=>{\r\n    try {\r\n        const userId = req.user.id\r\n        const { currentPassword, newPassword, confirmPassword } =req.body\r\n        const user = await Instructor.findById(userId)\r\n        const comparePassword = bcrypt.compareSync(currentPassword, user.password)\r\n        if(!comparePassword){\r\n            return res.status(400).json({message:\"Incorrect current password\"})\r\n        }\r\n        if(currentPassword === newPassword){\r\n            return res.status(400).json({message:\"New password should be different than old password\"})\r\n        }\r\n        if(newPassword !== confirmPassword){\r\n            return res.status(400).json({message:\"Passwords did not match\"})\r\n        }\r\n        const hashedPassword = bcrypt.hashSync(newPassword, 10)\r\n        user.password = hashedPassword\r\n        await user.save()\r\n        res.status(200).json({message:\"Password changed successfully\", User:user})\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nmodule.exports = {mentorsController, editInstructorProfile, editPassword}"],"file":"dashboardController.dev.js"}