{"version":3,"sources":["dashboardController.js"],"names":["Instructor","require","CourseModel","req","res","userId","mentors","courses","details","profile","regeneratorRuntime","async","_context","prev","next","user","id","awrap","find","sent","mentorsController","map","item","price","title","description","_id","toString","status","json","message","CoursesList","t0","Error","stop","editInstructorProfile","body","lastname","about","filePath","file","filename","findOne","firstname","profilePic","_context2","currentPassword","newPassword","confirmPassword","findById","bcrypt","compareSync","password","hashedPassword","hashSync","save","User","module","exports","editPassword"],"mappings":"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","file":"dashboardController.min.js","sourcesContent":["const Instructor = require('../../models/users/instructorModel.js')\r\nconst CourseModel = require('../../models/course/courseModel.js')\r\nconst bcrypt = require('bcryptjs')\r\n\r\nconst mentorsController = async(req,res)=>{\r\n    try {\r\n        const userId = req.user.id\r\n        const mentors = await Instructor.find()\r\n        const courses = await CourseModel.find()\r\n        const details = courses.map((item)=>{\r\n            if(item.price){\r\n                return [item.title,item.description, item.price]\r\n            }\r\n            if(item.price <=0 ){\r\n                return [item.title,item.description, 'FREE']\r\n            }\r\n        })\r\n        let profile = {}\r\n        mentors.map((item)=>{\r\n            if(item._id.toString()=== userId){\r\n                profile = item\r\n            }\r\n        })\r\n        res.status(200).json({message:\"Data found\", mentors:mentors, profile:profile, CoursesList:details})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n    }\r\n}\r\nconst editInstructorProfile = async(req,res)=>{\r\n    try {\r\n        const userId = req.user.id\r\n        const { firstname, lastname, about} = req.body\r\n        const filePath = `${req.file.destination}/${req.file.filename}`\r\n        const user = await Instructor.findOne({_id:userId})\r\n        user.about= about\r\n        user.firstname = firstname\r\n        user.lastname = lastname\r\n        user.profilePic = filePath\r\n        await user.save()\r\n        res.json (user)\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n    }\r\n}\r\nconst editPassword = async(req,res)=>{\r\n    try {\r\n        const userId = req.user.id\r\n        const { currentPassword, newPassword, confirmPassword } =req.body\r\n        const user = await Instructor.findById(userId)\r\n        const comparePassword = bcrypt.compareSync(currentPassword, user.password)\r\n        if(!comparePassword){\r\n            return res.status(400).json({message:\"Incorrect current password\"})\r\n        }\r\n        if(currentPassword === newPassword){\r\n            return res.status(400).json({message:\"New password should be different than old password\"})\r\n        }\r\n        if(newPassword !== confirmPassword){\r\n            return res.status(400).json({message:\"Passwords did not match\"})\r\n        }\r\n        const hashedPassword = bcrypt.hashSync(newPassword, 10)\r\n        user.password = hashedPassword\r\n        await user.save()\r\n        res.status(200).json({message:\"Password changed successfully\", User:user})\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nmodule.exports = {mentorsController, editInstructorProfile, editPassword}"]}