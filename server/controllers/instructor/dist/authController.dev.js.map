{"version":3,"sources":["authController.js"],"names":["Instructor","require","bcrypt","jwt","registerController","req","res","body","firstname","lastname","email","password","imgPath","file","destination","filename","findOne","instructor","status","json","message","hashedPassword","hashSync","newInstructor","profilePic","save","Error","loginController","isPasswordValid","compareSync","token","sign","id","_id","process","env","JWT_SECRET_KEY_INSTRUCTOR","expiresIn","User","Token","login","error","module","exports"],"mappings":"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","sourcesContent":["const Instructor = require('../../models/users/instructorModel.js')\r\nconst bcrypt = require('bcryptjs')\r\nconst jwt = require('jsonwebtoken')\r\n\r\nconst registerController = async(req,res)=>{\r\n    try {\r\n    const { firstname, lastname, email, password } = req.body\r\n    const imgPath = `${req.file.destination}/${req.file.filename}`\r\n    const instructor = await Instructor.findOne({email:email})\r\n    if(instructor){\r\n        return res.status(400).json ({message:\"User already exist with same Email ID\"})\r\n    }\r\n    const hashedPassword = bcrypt.hashSync(password, 10)\r\n    const newInstructor = new Instructor({\r\n        firstname:firstname,\r\n        lastname:lastname,\r\n        email:email,\r\n        password:hashedPassword,\r\n        profilePic:imgPath\r\n    })\r\n    await newInstructor.save()\r\n    res.status(201).json({message:\"Registered successfully\"})\r\n    } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n    }\r\n}\r\n\r\nconst loginController = async(req,res)=>{\r\n    try {\r\n        const {email, password} = req.body\r\n        const instructor = await Instructor.findOne({email:email})\r\n        if(!instructor){\r\n            return res.status(404).json({message:\"User not found on this email\"})\r\n        }\r\n        isPasswordValid = bcrypt.compareSync(password, instructor.password)\r\n        if(!isPasswordValid){\r\n            return res.status(400).json({message:\"Incorrect password\"})\r\n        }\r\n        const token = jwt.sign({id:instructor._id}, process.env.JWT_SECRET_KEY_INSTRUCTOR, {expiresIn:'15d'})\r\n        res.status(201).json({\r\n            message:\"Logged in successfully\",\r\n            User:instructor,\r\n            Token:token,\r\n            login:true\r\n        })\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nmodule.exports = {\r\n    registerController,\r\n    loginController\r\n}"],"file":"authController.dev.js"}