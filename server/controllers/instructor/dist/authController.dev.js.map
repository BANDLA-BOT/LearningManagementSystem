{"version":3,"sources":["authController.js"],"names":["Instructor","require","bcrypt","jwt","nodemailer","registerController","req","res","body","firstname","lastname","email","password","file","status","json","message","imgPath","destination","filename","findOne","instructor","hashedPassword","hashSync","newInstructor","profilePic","save","Error","loginController","isPasswordValid","compareSync","token","sign","id","_id","process","env","JWT_SECRET_KEY_INSTRUCTOR","expiresIn","User","Token","login","error","instructorPasswordResetLink","student","Message","resetToken","JWT_INSTRUCTOR_PASSWORD_RESET_KEY","transporter","createTestAccount","service","auth","user","EMAIL_USER","pass","EMAIL_PASS","secure","mailOptions","from","to","subject","text","sendEmail","info","send","instructorResetPassword","params","newPassword","decoded","verify","userId","hash","findByIdAndUpdate","module","exports"],"mappings":";;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,uCAAD,CAA1B;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAME,GAAG,GAAGF,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAMG,UAAU,GAAGH,OAAO,CAAC,YAAD,CAA1B;;AAEA,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,CAAMC,GAAN,EAAUC,GAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAE0BD,GAAG,CAACE,IAF9B,EAEfC,SAFe,aAEfA,SAFe,EAEJC,QAFI,aAEJA,QAFI,EAEMC,KAFN,aAEMA,KAFN,EAEaC,QAFb,aAEaA,QAFb;;AAAA,cAIlBN,GAAG,CAACO,IAJc;AAAA;AAAA;AAAA;;AAAA,2CAKZN,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CALY;;AAAA;AAOjBC,UAAAA,OAPiB,aAOJX,GAAG,CAACO,IAAJ,CAASK,WAPL,cAOoBZ,GAAG,CAACO,IAAJ,CAASM,QAP7B;AAAA;AAAA,0CASEnB,UAAU,CAACoB,OAAX,CAAmB;AAACT,YAAAA,KAAK,EAACA;AAAP,WAAnB,CATF;;AAAA;AASjBU,UAAAA,UATiB;;AAAA,eAUpBA,UAVoB;AAAA;AAAA;AAAA;;AAAA,2CAWZd,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB;AAACC,YAAAA,OAAO,EAAC;AAAT,WAAtB,CAXY;;AAAA;AAajBM,UAAAA,cAbiB,GAaApB,MAAM,CAACqB,QAAP,CAAgBX,QAAhB,EAA0B,EAA1B,CAbA;AAcjBY,UAAAA,aAdiB,GAcD,IAAIxB,UAAJ,CAAe;AACjCS,YAAAA,SAAS,EAACA,SADuB;AAEjCC,YAAAA,QAAQ,EAACA,QAFwB;AAGjCC,YAAAA,KAAK,EAACA,KAH2B;AAIjCC,YAAAA,QAAQ,EAACU,cAJwB;AAKjCG,YAAAA,UAAU,EAACR;AALsB,WAAf,CAdC;AAAA;AAAA,0CAqBjBO,aAAa,CAACE,IAAd,EArBiB;;AAAA;AAsBvBnB,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAC;AAAT,WAArB;AAtBuB;AAAA;;AAAA;AAAA;AAAA;AAwBvBT,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAC,uBAAT;AAAkCW,YAAAA,KAAK,EAAC,YAAMX;AAA9C,WAArB;;AAxBuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AA4BA,IAAMY,eAAe,GAAG,SAAlBA,eAAkB,CAAMtB,GAAN,EAAUC,GAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEUD,GAAG,CAACE,IAFd,EAETG,KAFS,cAETA,KAFS,EAEFC,QAFE,cAEFA,QAFE;AAAA;AAAA,0CAGSZ,UAAU,CAACoB,OAAX,CAAmB;AAACT,YAAAA,KAAK,EAACA;AAAP,WAAnB,CAHT;;AAAA;AAGVU,UAAAA,UAHU;;AAAA,cAIZA,UAJY;AAAA;AAAA;AAAA;;AAAA,4CAKLd,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAC;AAAT,WAArB,CALK;;AAAA;AAOhBa,UAAAA,eAAe,GAAG3B,MAAM,CAAC4B,WAAP,CAAmBlB,QAAnB,EAA6BS,UAAU,CAACT,QAAxC,CAAlB;;AAPgB,cAQZiB,eARY;AAAA;AAAA;AAAA;;AAAA,4CASLtB,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAC;AAAT,WAArB,CATK;;AAAA;AAWVe,UAAAA,KAXU,GAWF5B,GAAG,CAAC6B,IAAJ,CAAS;AAACC,YAAAA,EAAE,EAACZ,UAAU,CAACa;AAAf,WAAT,EAA8BC,OAAO,CAACC,GAAR,CAAYC,yBAA1C,EAAqE;AAACC,YAAAA,SAAS,EAAC;AAAX,WAArE,CAXE;AAYhB/B,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,YAAAA,OAAO,EAAC,wBADS;AAEjBuB,YAAAA,IAAI,EAAClB,UAFY;AAGjBmB,YAAAA,KAAK,EAACT,KAHW;AAIjBU,YAAAA,KAAK,EAAC;AAJW,WAArB;AAZgB;AAAA;;AAAA;AAAA;AAAA;AAmBhBlC,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAC,uBAAT;AAAkC0B,YAAAA,KAAK,EAAC,aAAM1B;AAA9C,WAArB;;AAnBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAsBA,IAAM2B,2BAA2B,GAAG,SAA9BA,2BAA8B,CAAMrC,GAAN,EAAUC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAErBI,UAAAA,KAFqB,GAEZL,GAAG,CAACE,IAFQ,CAErBG,KAFqB;AAAA;AAAA,0CAGHX,UAAU,CAACoB,OAAX,CAAmB;AAACT,YAAAA,KAAK,EAALA;AAAD,WAAnB,CAHG;;AAAA;AAGtBU,UAAAA,UAHsB;;AAAA,cAIxBuB,OAJwB;AAAA;AAAA;AAAA;;AAAA,4CAKjBrC,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC8B,YAAAA,OAAO,EAAC;AAAT,WAArB,CALiB;;AAAA;AAOtBC,UAAAA,UAPsB,GAOT3C,GAAG,CAAC6B,IAAJ,CAAS;AAACC,YAAAA,EAAE,EAACZ,UAAU,CAACa;AAAf,WAAT,EAA8BC,OAAO,CAACC,GAAR,CAAYW,iCAA1C,EAA6E;AAACT,YAAAA,SAAS,EAAC;AAAX,WAA7E,CAPS;AAQtBU,UAAAA,WARsB,GAQR5C,UAAU,CAAC6C,iBAAX,CAA6B;AAC7CC,YAAAA,OAAO,EAAC,OADqC;AAE7CC,YAAAA,IAAI,EAAC;AACAC,cAAAA,IAAI,EAACjB,OAAO,CAACC,GAAR,CAAYiB,UADjB;AAEAC,cAAAA,IAAI,EAACnB,OAAO,CAACC,GAAR,CAAYmB;AAFjB,aAFwC;AAM7CC,YAAAA,MAAM,EAAC;AANsC,WAA7B,CARQ;AAgBtBC,UAAAA,WAhBsB,GAgBR;AAChBC,YAAAA,IAAI,EAACvB,OAAO,CAACC,GAAR,CAAYiB,UADD;AAEhBM,YAAAA,EAAE,EAAChD,KAFa;AAGhBiD,YAAAA,OAAO,EAAC,qBAHQ;AAIhBC,YAAAA,IAAI,2HAAmHf,UAAnH;AAJY,WAhBQ;AAsB5BE,UAAAA,WAAW,CAACc,SAAZ,CAAsBL,WAAtB,EAAsC,UAACf,KAAD,EAAQqB,IAAR,EAAe;AACjD,gBAAGrB,KAAH,EAAS;AACL,qBAAOnC,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBkD,IAAhB,CAAqB,2BAArB,CAAP;AACH;;AACDzD,YAAAA,GAAG,CAACyD,IAAJ,CAAS,2BAAT;AAEH,WAND;AAtB4B;AAAA;;AAAA;AAAA;AAAA;AA8B5BzD,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC8B,YAAAA,OAAO,EAAC,uBAAT;AAAkClB,YAAAA,KAAK,EAAC,aAAMX;AAA9C,WAArB;;AA9B4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApC;;AAiCA,IAAMiD,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAM3D,GAAN,EAAUC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEjBwB,UAAAA,KAFiB,GAERzB,GAAG,CAAC4D,MAFI,CAEjBnC,KAFiB;AAGhBoC,UAAAA,WAHgB,GAGA7D,GAAG,CAACE,IAHJ,CAGhB2D,WAHgB;AAIlBC,UAAAA,OAJkB,GAIRjE,GAAG,CAACkE,MAAJ,CAAWtC,KAAX,EAAkBI,OAAO,CAACC,GAAR,CAAYW,iCAA9B,CAJQ;AAKlBuB,UAAAA,MALkB,GAKTF,OAAO,CAACnC,EALC;AAAA;AAAA,0CAMK/B,MAAM,CAACqE,IAAP,CAAYJ,WAAZ,EAAyB,EAAzB,CANL;;AAAA;AAMlB7C,UAAAA,cANkB;AAAA;AAAA,0CAOlBtB,UAAU,CAACwE,iBAAX,CAA6BF,MAA7B,EAAqC;AAAC1D,YAAAA,QAAQ,EAACU;AAAV,WAArC,CAPkB;;AAAA;AAQxBf,UAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAC8B,YAAAA,OAAO,EAAC;AAAT,WAAT;AARwB;AAAA;;AAAA;AAAA;AAAA;AAUxBtC,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC8B,YAAAA,OAAO,EAAC,uBAAT;AAAkCH,YAAAA,KAAK,EAAC,aAAM1B;AAA9C,WAArB;;AAVwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhC;;AAaAyD,MAAM,CAACC,OAAP,GAAiB;AACbrE,EAAAA,kBAAkB,EAAlBA,kBADa;AAEbuB,EAAAA,eAAe,EAAfA,eAFa;AAGbe,EAAAA,2BAA2B,EAA3BA,2BAHa;AAIbsB,EAAAA,uBAAuB,EAAvBA;AAJa,CAAjB","sourcesContent":["const Instructor = require('../../models/users/instructorModel.js')\r\nconst bcrypt = require('bcryptjs')\r\nconst jwt = require('jsonwebtoken')\r\nconst nodemailer = require('nodemailer')\r\n\r\nconst registerController = async(req,res)=>{\r\n    try {\r\n    const { firstname, lastname, email, password } = req.body\r\n  \r\n    if (!req.file) {\r\n        return res.status(400).json({ message: \"Profile picture is required\" });\r\n    }\r\n    const imgPath = `${req.file.destination}/${req.file.filename}`\r\n\r\n    const instructor = await Instructor.findOne({email:email})\r\n    if(instructor){\r\n        return res.status(400).json ({message:\"User already exist with same Email ID\"})\r\n    }\r\n    const hashedPassword = bcrypt.hashSync(password, 10)\r\n    const newInstructor = new Instructor({\r\n        firstname:firstname,\r\n        lastname:lastname,\r\n        email:email,\r\n        password:hashedPassword,\r\n        profilePic:imgPath\r\n    })\r\n    await newInstructor.save()\r\n    res.status(201).json({message:\"Registered successfully\"})\r\n    } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n    }\r\n}\r\n\r\nconst loginController = async(req,res)=>{\r\n    try {\r\n        const {email, password} = req.body\r\n        const instructor = await Instructor.findOne({email:email})\r\n        if(!instructor){\r\n            return res.status(404).json({message:\"User not found on this email\"})\r\n        }\r\n        isPasswordValid = bcrypt.compareSync(password, instructor.password)\r\n        if(!isPasswordValid){\r\n            return res.status(400).json({message:\"Incorrect password\"})\r\n        }\r\n        const token = jwt.sign({id:instructor._id}, process.env.JWT_SECRET_KEY_INSTRUCTOR, {expiresIn:'15d'})\r\n        res.status(201).json({\r\n            message:\"Logged in successfully\",\r\n            User:instructor,\r\n            Token:token,\r\n            login:true\r\n        })\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nconst instructorPasswordResetLink = async(req,res)=>{\r\n    try {\r\n        const {email} = req.body\r\n        const instructor = await Instructor.findOne({email})\r\n        if(!student){\r\n            return res.status(404).json({Message:\"User not found\"})\r\n        }\r\n        const resetToken = jwt.sign({id:instructor._id}, process.env.JWT_INSTRUCTOR_PASSWORD_RESET_KEY, {expiresIn:'10m'})\r\n        const transporter = nodemailer.createTestAccount({\r\n            service:'gmail',\r\n            auth:{\r\n                 user:process.env.EMAIL_USER,\r\n                 pass:process.env.EMAIL_PASS\r\n                },\r\n            secure:true,\r\n        })\r\n        const mailOptions = {\r\n            from:process.env.EMAIL_USER,\r\n            to:email,\r\n            subject:'Password reset link',\r\n            text:`Please use the following link to reset your password: http://localhost:8000/api/instructor/auth/reset-password/${resetToken}`\r\n        }\r\n        transporter.sendEmail(mailOptions   , (error, info)=>{\r\n            if(error){\r\n                return res.status(500).send('Error while sending email')\r\n            }\r\n            res.send('Password reset email sent');\r\n\r\n        })\r\n    } catch (error) {\r\n        res.status(500).json({Message:\"Internal server error\", Error:error.message})\r\n    }\r\n}\r\nconst instructorResetPassword = async(req,res)=>{\r\n    try {\r\n        const {token} = req.params\r\n        const { newPassword } = req.body\r\n        const decoded = jwt.verify(token, process.env.JWT_INSTRUCTOR_PASSWORD_RESET_KEY)\r\n        const userId = decoded.id\r\n        const hashedPassword = await bcrypt.hash(newPassword, 10)\r\n        await Instructor.findByIdAndUpdate(userId, {password:hashedPassword})\r\n        res.json({Message:\"Password updated successfully\"})\r\n    } catch (error) {\r\n        res.status(500).json({Message:\"Internal server error\", error:error.message})\r\n    }\r\n}\r\nmodule.exports = {\r\n    registerController,\r\n    loginController,\r\n    instructorPasswordResetLink,\r\n    instructorResetPassword\r\n}"],"file":"authController.dev.js"}