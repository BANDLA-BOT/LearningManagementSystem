{"version":3,"sources":["CreateCourseController.js"],"names":["CourseModel","require","multer","v2","path","createCourse","req","res","_req$body","title","price","description","newCourse","regeneratorRuntime","async","_context","prev","next","body","awrap","create","sent","json","t0","message","stop","uploadVideos","courseId","_req$body2","videoTitle","course","section","_context3","params","findById","file","buffer","abrupt","status","cloudinary","uploader","upload_stream","resource_type","err","result","_context2","error","push","videos","url","secure_url","save","end","resourceController","filePath","_context4","user","concat","filename","courseModel","populate","resources","module","exports"],"mappings":"aAAA,IAAMA,YAAcC,QAAQ,sCACtBC,OAASD,QAAQ,UADjBD,WAAcC,QAAQ,cAAAE,GAGtBC,KAAOH,QAAQ,QAEfI,aAAe,SAAOC,EAAIC,GAAX,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAR,EAEmBF,EAAIY,KAAjCT,EAFUD,EAEVC,MAAOC,EAFGF,EAEHE,MAAOC,EAFJH,EAEIG,YAFJI,EAAAE,KAAA,EAAAJ,mBAAAM,MAFrBnB,YAAAoB,OAAA,CAMQX,MAAAA,EAAMC,MAAAA,EAAOC,YAAAA,KAJA,KAAA,EAFXC,EAEWG,EAAAM,KAAAd,EAAAe,KAAAV,GAAAG,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,MAAA,GAAAR,EAAAe,KAAAP,EAAAQ,GAAAC,SAAA,KAAA,GAAA,IAAA,MAAA,OAAAT,EAAAU,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAAAC,aAAA,SAAApB,EAAAC,GAAA,IAAAoB,EAAAC,EAAAnB,EAAAoB,EAAAC,EAAAC,EAAA,OAAAlB,mBAAAC,MAAA,SAAAkB,GAAA,OAAA,OAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,KAAA,EAAA,OAAAe,EAAAhB,KAAA,EAAAW,EAEuBT,EAFvBe,OAAAN,SAAAC,EAAAtB,EAAAY,KAAAT,EAAAmB,EAAAnB,MAAAoB,EAAAD,EAAAC,WAAAG,EAAAf,KAAA,EAAAJ,mBAAAM,MAAAnB,YAAAkC,SAGOlC,IAHP,KAAA,EAAA,GAAA8B,EAAAE,EAAAX,KAIbZ,EADuCqB,EAAAC,QACjCrB,EAAAA,MADiCJ,EAAA6B,KAAAC,OAH1B,CAAAJ,EAAAf,KAAA,EAAA,MAAA,OAAAe,EAAAK,OAAA,SAIA1B,EAAW2B,OAAX3B,KAAAA,KAAAA,CAAAA,MAAAA,qCAJA,KAAA,EAoBE4B,WAAWC,SAASC,cAAc,CAACC,cAAc,SAAU,SAAMC,EAAKC,GAAX,OAAA/B,mBAAAC,MAAA,SAAA+B,GAAA,OAAA,OAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,KAAA,EAAA,GApB7D0B,EAoB6D,OAjBxE/B,QAHWkC,MAAA,iCAAAH,GAoB6DE,EAAAR,OAAA,SAdrEzB,EAAAA,OAAT,KAAAU,KAAA,CAAAwB,MAAA,mCAc8ED,EAAA5B,KAAA,EAAA,MAAA,KAAA,EAAA,OApB7Dc,EAAAgB,KAAA,CAAAtC,MAAAA,EAAAuC,OAAA,CAAA,CAAAvC,MAAAoB,EAAAoB,IAAAL,EAAAM,eAoB6DL,EAAA5B,KAAA,EAAAJ,mBAAAM,MAM9DW,EAAOqB,QANuD,KAAA,EApB7D5C,EAAA+B,OAAA,KAAAhB,KAAA,CAAAE,QAAA,8BAAAO,QAAAD,EAAAC,UAoB6D,KAAA,EAAA,IAAA,MAAA,OAAAc,EAAApB,YApB7D2B,IAAA9C,EAAA6B,KAAAC,QAAAJ,EAAAf,KAAA,GAAA,MAAA,KAAA,GAAAe,EAAAhB,KAAA,GAAAgB,EAAAT,GAAAS,EAAA,MAAA,GAQjBzB,QAAIe,MAAK,yBAATf,EAAAA,IAuBIA,EAAI+B,OAAO,KAAKhB,KAAK,CAAEwB,MAAO,0BA/BjB,KAAA,GAAA,IAAA,MAAA,OAAAd,EAAAP,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAA4B,mBAAA,SAAA/C,EAAAC,GAAA,IAAAoB,EAAAlB,EAAA6C,EAAAxB,EAAA,OAAAjB,mBAAAC,MAAA,SAAAyC,GAAA,OAAA,OAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,KAAA,EAAA,OAAAsC,EAAAvC,KAAA,EAAAW,EAAArB,EAAA2B,OAAAN,SAArBlB,EAAAH,EAAAY,KAAAT,MAuCuBH,EAAIkD,KA5BrB9B,EAXe,GAAA+B,OAWf/B,EAAAA,KAAAA,YAXe,KAAA+B,OAWAnD,EAAA6B,KAAAuB,UAXAH,EAAAtC,KAAA,EAAAJ,mBAAAM,MAWAwC,YAAAzB,SAAAP,GAAAiC,SAAA,cAXA,KAAA,EAAA,OAWA9B,EAXAyB,EAAAlC,MA0CNwC,UAAUd,KAAK,CAACtC,MAAMA,EAAOwC,IAAIK,IA1C3BC,EAAAtC,KAAA,GAAAJ,mBAAAM,MAWAW,EAAAqB,QAXA,KAAA,GAWA5C,EAAAe,KAAAQ,GAXAyB,EAAAtC,KAAA,GAAA,MAAA,KAAA,GAAAsC,EAAAvC,KAAA,GAAAuC,EAAAhC,GAAAgC,EAAA,MAAA,GAWAhD,EAAAe,KAAAiC,EAAAhC,GAAAC,SAXA,KAAA,GAAA,IAAA,MAAA,OAAA+B,EAAA9B,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAWAqC,OAAAC,QAAA,CAAA1D,aAAAA,aAAAqB,aAAAA,aAAA2B,mBAAAA","file":"CreateCourseController.min.js","sourcesContent":["const CourseModel = require('../../models/course/courseModel.js')\r\nconst multer = require('multer')\r\nconst cloudinary = require('cloudinary').v2\r\nconst path = require('path')\r\n\r\nconst createCourse = async (req,res)=>{\r\n   try {\r\n    const {title, price, description} = req.body\r\n    const newCourse = await CourseModel.create({\r\n        title,price, description\r\n    })\r\n    res.json(newCourse)\r\n   } catch (error) {\r\n    res.json(error.message)\r\n   }\r\n}\r\nconst uploadVideos = async (req,res)=>{\r\n    try {\r\n        const {courseId} = req.params\r\n        const {title,videoTitle} = req.body\r\n        const course = await CourseModel.findById(courseId)\r\n        const section = course.section\r\n        if(!req.file && !req.file.buffer){\r\n            return res.status(400).json({ error: 'No file provided in the request' });\r\n        }\r\n        const result = cloudinary.uploader.upload_stream({resource_type:'video'}, async(err, result)=>{\r\n            if (err) {\r\n                console.error('Error uploading to Cloudinary:', err);\r\n                return res.status(500).json({ error: 'Error uploading to Cloudinary' });\r\n              }\r\n              section.push({title:title, videos:[{title:videoTitle, url:result.secure_url}]})\r\n              await course.save()\r\n              res.status(201).json({ message: 'Video uploaded successfully', section:course.section})\r\n        }).end(req.file.buffer)\r\n    } catch (error) {\r\n        console.error('Error uploading video:', error);\r\n        res.status(500).json({ error: 'Error uploading video' });\r\n    }\r\n}\r\n\r\nconst resourceController = async(req,res)=>{\r\n    try {\r\n        const { courseId } = req.params\r\n        const {title} = req.body\r\n        const userId = req.user\r\n        const filePath = `${req.file.destination}/${req.file.filename}`\r\n        const course = await courseModel.findById(courseId).populate('resources')\r\n        course.resources.push({title:title, url:filePath})\r\n        await course.save()\r\n      res.json(course)\r\n    } catch (error) {\r\n      res.json(error.message)\r\n    }\r\n  }\r\n\r\nmodule.exports = {createCourse, uploadVideos, resourceController}"]}