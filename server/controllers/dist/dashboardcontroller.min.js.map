{"version":3,"sources":["dashboardcontroller.js"],"names":["Student","require","courseModel","getProfile","req","res","id","student","courses","regeneratorRuntime","async","_context","prev","next","user","console","log","awrap","findById","_id","select","sent","find","limit","abrupt","json","message","t0","stop","enrollCourse","courseId","userId","course","_context2","params","status","enrolled","push","coursesAvailable","isComplete","save","Message","Error","updateOne","$pull","result","nModified","send","EnrollUpdated","error","_context3","topRanks","students","_context4","$match","enrolled.isComplete","Count","$size","input","as","cond","$eq","$sort","$project","firstname","lastname","rankings","markAsComplete","_context5","findOneAndUpdate","enrolled.coursesAvailable","new","progressController","totalCourses","completedCourses","coursesData","_context6","length","filter","deleteEnroll","Progress","courseProgress","studentId","results","_context8","populate","Promise","all","map","_context7","aggregate","$unwind","$group","$sum","completedVideos","$cond","totalVideos","completedPercentage","$multiply","$divide","progress","$filter"],"mappings":"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","file":"dashboardcontroller.min.js","sourcesContent":["const Student = require(\"../models/users/studentModel.js\");\r\nconst courseModel = require(\"../models/course/courseModel.js\");\r\n\r\nconst getProfile = async (req, res) => {\r\n  const id = req.user;\r\n  console.log(id);\r\n  try {\r\n    const student = await Student.findById({ _id: id.id }).select(\"-password\");\r\n    const courses = await courseModel.find().limit(4);\r\n    if (!student) {\r\n      return res.json({ message: \"No student found \" });\r\n    }\r\n    if (!courses) {\r\n      return res.json({ message: \"No courses available currently\" });\r\n    }\r\n    res.json({\r\n      message: \"Students Profile\",\r\n      Profile: student,\r\n      courses: courses,\r\n    });\r\n    console.log(student);\r\n  } catch (error) {}\r\n};\r\n\r\nconst enrollCourse = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const userId = req.user;\r\n  const course = await courseModel.findById({ _id: courseId });\r\n  const student = await Student.findById({ _id: userId.id });\r\n  try {\r\n    if (!student) {\r\n      return res.status(400).json({ message: \"Student not found\" });\r\n    }\r\n    if (!course) {\r\n      return res.status(400).json({ message: \"Course not found\" });\r\n    }\r\n    student.enrolled.push({\r\n      coursesAvailable: course._id,\r\n      isComplete: false,\r\n    });\r\n    await student.save();\r\n    res\r\n      .status(200)\r\n      .json({ Message: \"Course enrolled successfuly\", Student: student });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n\r\nconst deleteEnroll = async (req, res) => {\r\n  try {\r\n    const userId = req.user;\r\n    const { courseId } = req.params;\r\n    const result = await Student.updateOne(\r\n      { _id: userId.id },\r\n      { $pull: { enrolled: { _id: courseId } } }\r\n    );\r\n    if (result.nModified > 0) {\r\n      res.status(200).send({ message: \"Enrolls Updated\" });\r\n    }\r\n    res.json({ EnrollUpdated: result });\r\n  } catch (error) {\r\n    res.status(500).send({ message: \"Server error\", error });\r\n  }\r\n};\r\nconst topRanks = async (req, res) => {\r\n  try {\r\n    const students = await Student.aggregate([\r\n      {\r\n        $match: {\r\n          \"enrolled.isComplete\": true,\r\n        },\r\n      },\r\n      {\r\n        $addFields: {\r\n          Count: {\r\n            $size: {\r\n              $filter: {\r\n                input: \"$enrolled\",\r\n                as: \"enrolled\",\r\n                cond: { $eq: [\"$$enrolled.isComplete\", true] },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      {\r\n        $sort: { _id: -1 },\r\n      },\r\n\r\n      {\r\n        $project: {\r\n          firstname: 1,\r\n          lastname: 1,\r\n          Count:1\r\n        },\r\n      },\r\n    ]);\r\n    res.status(200).json({ rankings: students });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst markAsComplete = async (req, res) => {\r\n  try {\r\n    const { courseId } = req.params;\r\n    const userId = req.user;\r\n    const student = await Student.findOneAndUpdate(\r\n      { _id: userId.id, \"enrolled.coursesAvailable\": courseId },\r\n      {\r\n        $set: { \"enrolled.$.isComplete\": true },\r\n        $addToSet: { completedCourses: { courses: courseId } },\r\n      },\r\n      { new: true }\r\n    );\r\n    if (!student) {\r\n      return res.json({ error: \"student not found\" });\r\n    }\r\n    res.json({ message: student });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst progressController = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const student = await Student.findById(userId);\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n\r\n    const totalCourses = student.enrolled.length;\r\n    const completedCourses = student.enrolled.filter(\r\n      (course) => course.isComplete\r\n    ).length;\r\n    const coursesPercentage = (completedCourses / totalCourses) * 100;\r\n\r\n    const coursesData = {\r\n      totalCourses,\r\n      completedCourses,\r\n      coursesPercentage,\r\n    };\r\n\r\n    res.status(200).json({ message: \"Progress report\", Progress: coursesData });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst courseProgress = async (req, res) => {\r\n  try {\r\n    const studentId = req.user.id;\r\n    const student = await Student.findById(studentId).populate(\"enrolled\");\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const results = await Promise.all(\r\n        student.enrolled.map(async (course) => {\r\n        const result = await courseModel.aggregate([\r\n          { $match: { _id: course.coursesAvailable } },\r\n          { $unwind: \"$section\" },\r\n          { $unwind: \"$section.videos\" },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              totalVideos: { $sum: 1 },\r\n              completedVideos: {\r\n                $sum: { $cond: [\"$section.videos.completed\", 1, 0] },\r\n              },\r\n            },\r\n          },\r\n          {\r\n            $project: {\r\n              _id: 0,\r\n              totalVideos: 1,\r\n              completedVideos: 1,\r\n              completedPercentage: {\r\n                $cond: [\r\n                    { $eq: ['$totalVideos', 0] },\r\n                    0,\r\n                    { \r\n                      $multiply: [\r\n                        { $divide: ['$completedVideos', '$totalVideos'] },\r\n                        100\r\n                      ]\r\n                    }\r\n                  ]\r\n              },\r\n            },\r\n          },\r\n        ]);\r\n        return {\r\n            course:course,\r\n            progress:result[0]\r\n        }\r\n      })\r\n    )\r\n    res.json(results)\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  getProfile,\r\n  enrollCourse,\r\n  deleteEnroll,\r\n\r\n  topRanks,\r\n  markAsComplete,\r\n  progressController,\r\n  courseProgress,\r\n};\r\n"]}