{"version":3,"sources":["dashboardController.js"],"names":["Student","require","courseModel","getProfile","req","res","id","student","courses","regeneratorRuntime","async","_context","prev","next","console","log","awrap","findById","_id","select","sent","find","limit","abrupt","json","message","Profile","t0","stop","enrollCourse","courseId","userId","course","_context2","params","user","status","push","coursesAvailable","isComplete","save","Message","Error","deleteEnroll","result","_context3","updateOne","enrolled","send","EnrollUpdated","error","completedCourses","_completedCourses","_context4","filter","map","$each","topRanks","students","_context5","aggregate","$match","$addFields","Count","$size","$filter","input","as","cond","$eq","$sort","$project","firstname","lastname","rankings","_context6","findOneAndUpdate","enrolled.coursesAvailable","$set","enrolled.$.isComplete","$addToSet","module","exports","markAsComplete"],"mappings":"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","file":"dashboardController.min.js","sourcesContent":["const Student = require('../models/users/studentModel.js')\r\nconst courseModel = require('../models/course/courseModel.js')\r\n\r\nconst getProfile = async (req,res)=>{\r\n    const id = req.user\r\n    console.log(id)\r\n    try {\r\n        const student = await Student.findById({_id:id.id}).select('-password')\r\n        const courses = await courseModel.find().limit(4)\r\n        if(!student){\r\n            return res.json({message:\"No student found \"})\r\n        }\r\n        if(!courses){\r\n            return res.json({message:\"No courses available currently\"})\r\n        }\r\n        res.json({message:\"Students Profile\", Profile:student, courses:courses})\r\n        console.log(student)\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nconst enrollCourse = async(req,res)=>{\r\n    const { courseId } = req.params\r\n    const userId = req.user\r\n    const course = await courseModel.findById({_id:courseId})\r\n    const student = await Student.findById({_id:userId.id})\r\n    try {\r\n        if(!student){\r\n            return res.status(400).json({message:\"Student not found\"})\r\n        }\r\n        if(!course){\r\n            return res.status(400).json({message:\"Course not found\"})\r\n        }\r\n        student.enrolled.push({\r\n            coursesAvailable:course._id,\r\n            isComplete:false,\r\n        })\r\n        await student.save()\r\n        res.status(200).json({Message:\"Course enrolled successfuly\", Student:student})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n    }\r\n}\r\n\r\nconst deleteEnroll = async(req,res)=>{\r\n    try {\r\n        const userId = req.user\r\n        const {courseId} = req.params\r\n        const result = await Student.updateOne(\r\n            {_id:userId.id},\r\n            {$pull:{enrolled:{_id:courseId}}}\r\n        )\r\n        if(result.nModified > 0){\r\n            res.status(200).send({message:\"Enrolls Updated\"})\r\n        }\r\n        res.json({EnrollUpdated:result})\r\n    } catch (error) {\r\n        res.status(500).send({ message: 'Server error', error });\r\n    }\r\n}\r\n\r\nconst completedCourses = async(req,res)=>{\r\n    try {\r\n        const userId = req.user\r\n        const student = await Student.findById({_id:userId.id})\r\n        \r\n        if(!student){\r\n            return res.status(404).send({ message: 'Student not found' });\r\n        }\r\n        const completedCourses = student.enrolled\r\n        .filter(course => course.isComplete)\r\n        .map(course => ({courses:course.coursesAvailable}))\r\n\r\n        await Student.updateOne(\r\n            {_id:userId.id},\r\n            {$addToSet:{completedCourses:{$each:completedCourses}}}\r\n        )\r\n        res.status(200).json({ message: 'Completed courses updated successfully' });\r\n      } catch (error) {\r\n        res.status(500).json({ message: 'Server error', error });\r\n      }\r\n}\r\n\r\n\r\nconst topRanks = async(req,res)=>{\r\n    try {\r\n        \r\n        const students = await Student.aggregate([\r\n        {$match:{\r\n            'enrolled.isComplete':true\r\n        }},\r\n        {\r\n            $addFields:{\r\n                Count:{\r\n                    $size:{\r\n                        $filter:{\r\n                            input:'$enrolled',\r\n                            as:'enrolled',\r\n                            cond:{$eq:['$$enrolled.isComplete', true]}\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        {\r\n            $sort:{_id:-1}\r\n        },\r\n        \r\n        {\r\n            $project:{\r\n                firstname:1,\r\n                lastname:1\r\n            }\r\n        }\r\n    ])\r\n    res.status(200).json({rankings:students})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\"})\r\n    }\r\n}  \r\n\r\nconst markAsComplete = async(req,res)=>{\r\n    try {\r\n        const {courseId} = req.params\r\n        const userId = req.user\r\n        const student = await Student.findOneAndUpdate(\r\n            {_id:userId.id, 'enrolled.coursesAvailable':courseId},\r\n            {\r\n                $set: {'enrolled.$.isComplete':true},\r\n                $addToSet:{completedCourses:{courses:courseId}}\r\n            },\r\n            {new:true}\r\n        )\r\n        if(!student){\r\n            return res.json({error:\"student not found\"})\r\n        }\r\n        res.json({message:student})\r\n    } catch (error) {\r\n        res.json({message:error.message})\r\n    }\r\n}\r\n\r\nmodule.exports ={ getProfile, enrollCourse, deleteEnroll, completedCourses,topRanks, markAsComplete }"]}