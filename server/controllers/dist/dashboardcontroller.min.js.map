{"version":3,"sources":["dashboardcontroller.js"],"names":["Student","require","courseModel","req","res","id","user","getProfile","_id","select","student","find","limit","courses","json","message","Profile","console","log","enrollCourse","courseId","userId","course","regeneratorRuntime","async","_context2","prev","next","params","awrap","findById","sent","abrupt","status","enrolled","push","populate","save","Message","t0","Error","stop","module","exports"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,mCAClBC,YAAcD,QAAQ,mCADtBD,WAAUC,SAAQE,EAAAC,GAARH,IAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAGNI,EAAKF,EAAIG,KAFbJ,QAAAA,IAAWG,GADDJ,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAEVM,QAAoBJ,SAAP,CAAAK,IAAAH,EAAAA,KAAAI,OAAA,cAFHR,KAAAA,EAAAA,OAEAS,EAFAT,EAAAA,KAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAEGC,YAAAS,OAAAC,MAAA,IAFHX,KAAAA,EAAAA,GAEGY,EAFHZ,EAAAA,KAEGS,EAFHT,CAAAA,EAAAA,KAAAA,GAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SAEGG,EAAAU,KAAA,CAAAC,QAAA,uBAFHd,KAAAA,GAAAA,GAEGY,EAFHZ,CAAAA,EAAAA,KAAAA,GAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SAGGK,EADAQ,KAAA,CAAAC,QAAA,oCAFHd,KAAAA,GAEGG,EAAAU,KAAA,CAAAC,QAAA,mBAAAC,QAAAN,EAAAG,QAAAA,IAAAI,QAAAC,IAAAR,GAFHT,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAAAA,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OAEGkB,aAAA,SAAAhB,EAAAC,GAAA,IAAAgB,EAAAC,EAAAC,EAAAZ,EAAAJ,EAAA,OAAAiB,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAILjB,EAJKP,EAAAyB,OAILlB,SAJKW,EAAAlB,EAAAG,KAAAmB,EAAAE,KAAA,EAAAJ,mBAAAM,MAAA3B,YAAA4B,SAKW5B,CAAAA,IAAAA,KALX,KAAA,EAAA,OAAAoB,EAAAG,EAAAM,KAAAN,EAAAE,KAAA,EAAAJ,mBAAAM,MAsBO7B,QAAQ8B,SAAS,CAACtB,IAAIa,EAAOhB,MAtBpC,KAAA,EAAA,GAsBTK,EAtBSe,EAAAM,KAAAN,EAAAC,KAAA,EAKLb,EALK,CAAAY,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAO,OAAA,SAyBA5B,EAAI6B,OAAO,KAAKnB,KAAK,CAACC,QAAQ,uBAzB9B,KAAA,GAAA,GAAAO,EAAA,CAAAG,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAO,OAAA,SAAA5B,EAAA6B,OAAA,KAAAnB,KAAA,CAAAC,QAAA,sBAAA,KAAA,GAAA,OA8BXL,EAAQwB,SAASC,KAAKb,GA9BXG,EAAAE,KAAA,GAAAJ,mBAAAM,MAAA7B,QAAA8B,SAOA1B,CAAAA,IAAIU,EAAKT,KAAA+B,SAAA,aAPT,KAAA,GAAA,OAAA9B,EAAAmB,EAAAM,KAAAN,EAAAE,KAAA,GAAAJ,mBAAAM,MAOUd,EAAQsB,QAPlB,KAAA,GAOSjC,EAPT6B,OAAA,KAAAnB,KAAA,CAAAwB,QAAA,8BAAAtC,QAAAM,IAAAmB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAc,GAAAd,EAAA,MAAA,GAAArB,EAAA6B,OAAA,KAAAnB,KAAA,CAAAC,QAAA,wBAAAyB,MAAAf,EAAAc,GAAAxB,UAAA,KAAA,GAAA,IAAA,MAAA,OAAAU,EAAAgB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAC,OAAAC,QAAA,CAAApC,WAAAA,WAAAY,aAAAA","file":"dashboardcontroller.min.js","sourcesContent":["const Student = require('../models/users/studentModel.js')\r\nconst courseModel = require('../models/course/courseModel.js')\r\nconst getProfile = async (req,res)=>{\r\n    const id = req.user\r\n    console.log(id)\r\n    try {\r\n        const student = await Student.findById({_id:id.id}).select('-password')\r\n        const courses = await courseModel.find().limit(4)\r\n        if(!student){\r\n            return res.json({message:\"No student found \"})\r\n        }\r\n        if(!courses){\r\n            return res.json({message:\"No courses available currently\"})\r\n        }\r\n        res.json({message:\"Students Profile\", Profile:student, courses:courses})\r\n        console.log(student)\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\nconst enrollCourse = async(req,res)=>{\r\n    const { courseId } = req.params\r\n    const userId = req.user\r\n    const course = await courseModel.findById({_id:courseId})\r\n    const student = await Student.findById({_id:userId.id})\r\n    try {\r\n        if(!student){\r\n            return res.status(400).json({message:\"Student not found\"})\r\n        }\r\n        if(!course){\r\n            return res.status(400).json({message:\"Course not found\"})\r\n        }\r\n        student.enrolled.push(course)\r\n        const user = await Student.findById({_id:userId.id}).populate('enrolled')\r\n        await student.save()\r\n        res.status(200).json({Message:\"Course enrolled successfuly\", Student:user})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n    }\r\n}\r\n\r\nmodule.exports ={ getProfile, enrollCourse }"]}