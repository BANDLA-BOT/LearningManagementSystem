"use strict";var Student=require("../models/users/studentModel.js"),courseModel=require("../models/course/courseModel.js"),getProfile=function(r,t){var n,s,o;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return n=r.user,console.log(n),e.prev=2,e.next=5,regeneratorRuntime.awrap(Student.findById({_id:n.id}).select("-password"));case 5:return s=e.sent,e.next=8,regeneratorRuntime.awrap(courseModel.find().limit(4));case 8:if(o=e.sent,s){e.next=11;break}return e.abrupt("return",t.json({message:"No student found "}));case 11:if(o){e.next=13;break}return e.abrupt("return",t.json({message:"No courses available currently"}));case 13:t.json({message:"Students Profile",Profile:s,courses:o}),console.log(s),e.next=19;break;case 17:e.prev=17,e.t0=e.catch(2);case 19:case"end":return e.stop()}},null,null,[[2,17]])},enrollCourse=function(r,t){var n,s,o,a;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return n=r.params.courseId,s=r.user,e.next=4,regeneratorRuntime.awrap(courseModel.findById({_id:n}));case 4:return o=e.sent,e.next=7,regeneratorRuntime.awrap(Student.findById({_id:s.id}));case 7:if(a=e.sent,e.prev=8,a){e.next=11;break}return e.abrupt("return",t.status(400).json({message:"Student not found"}));case 11:if(o){e.next=13;break}return e.abrupt("return",t.status(400).json({message:"Course not found"}));case 13:return a.enrolled.push({coursesAvailable:o._id,isComplete:!1}),e.next=16,regeneratorRuntime.awrap(a.save());case 16:t.status(200).json({Message:"Course enrolled successfuly",Student:a}),e.next=22;break;case 19:e.prev=19,e.t0=e.catch(8),t.status(500).json({message:"Internal server error",Error:e.t0.message});case 22:case"end":return e.stop()}},null,null,[[8,19]])},deleteEnroll=function(r,t){var n,s,o;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,n=r.user,s=r.params.courseId,e.next=5,regeneratorRuntime.awrap(Student.updateOne({_id:n.id},{$pull:{enrolled:{_id:s}}}));case 5:0<(o=e.sent).nModified&&t.status(200).send({message:"Enrolls Updated"}),t.json({EnrollUpdated:o}),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),t.status(500).send({message:"Server error",error:e.t0});case 13:case"end":return e.stop()}},null,null,[[0,10]])},topRanks=function(e,r){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(Student.aggregate([{$match:{"enrolled.isComplete":!0}},{$addFields:{Count:{$size:{$filter:{input:"$enrolled",as:"enrolled",cond:{$eq:["$$enrolled.isComplete",!0]}}}}}},{$sort:{_id:-1}},{$project:{firstname:1,lastname:1,Count:1}}]));case 3:t=e.sent,r.status(200).json({rankings:t}),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),r.status(500).json({message:"Internal server error"});case 10:case"end":return e.stop()}},null,null,[[0,7]])},markAsComplete=function(r,t){var n,s,o;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,n=r.params.courseId,s=r.user,e.next=5,regeneratorRuntime.awrap(Student.findOneAndUpdate({_id:s.id,"enrolled.coursesAvailable":n},{$set:{"enrolled.$.isComplete":!0},$addToSet:{completedCourses:{courses:n}}},{new:!0}));case 5:if(o=e.sent){e.next=8;break}return e.abrupt("return",t.json({error:"student not found"}));case 8:t.json({message:o}),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(0),t.json({message:e.t0.message});case 14:case"end":return e.stop()}},null,null,[[0,11]])},progressController=function(r,t){var n,s,o,a,u;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,n=r.user.id,e.next=4,regeneratorRuntime.awrap(Student.findById(n));case 4:if(s=e.sent){e.next=7;break}return e.abrupt("return",t.status(404).json({message:"Student not found"}));case 7:o=s.enrolled.length,a=s.enrolled.filter(function(e){return e.isComplete}).length,u={totalCourses:o,completedCourses:a,coursesPercentage:a/o*100},t.status(200).json({message:"Progress report",Progress:u}),e.next=17;break;case 14:e.prev=14,e.t0=e.catch(0),t.json({message:e.t0.message});case 17:case"end":return e.stop()}},null,null,[[0,14]])},courseProgress=function(r,t){var n,s,o;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,n=r.user.id,e.next=4,regeneratorRuntime.awrap(Student.findById(n).populate("enrolled"));case 4:if(s=e.sent){e.next=7;break}return e.abrupt("return",t.status(404).json({message:"Student not found"}));case 7:return e.next=9,regeneratorRuntime.awrap(Promise.all(s.enrolled.map(function(r){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(courseModel.aggregate([{$match:{_id:r.coursesAvailable}},{$unwind:"$section"},{$unwind:"$section.videos"},{$group:{_id:null,totalVideos:{$sum:1},completedVideos:{$sum:{$cond:["$section.videos.completed",1,0]}}}},{$project:{_id:0,totalVideos:1,completedVideos:1,completedPercentage:{$cond:[{$eq:["$totalVideos",0]},0,{$multiply:[{$divide:["$completedVideos","$totalVideos"]},100]}]}}}]));case 2:return t=e.sent,e.abrupt("return",{course:r,progress:t[0]});case 4:case"end":return e.stop()}})})));case 9:o=e.sent,t.json(o),e.next=16;break;case 13:e.prev=13,e.t0=e.catch(0),t.status(500).json({message:"Internal server error",error:e.t0.message});case 16:case"end":return e.stop()}},null,null,[[0,13]])};module.exports={getProfile:getProfile,enrollCourse:enrollCourse,deleteEnroll:deleteEnroll,topRanks:topRanks,markAsComplete:markAsComplete,progressController:progressController,courseProgress:courseProgress};
//# sourceMappingURL=dashboardcontroller.min.js.map
