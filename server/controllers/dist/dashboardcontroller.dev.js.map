{"version":3,"sources":["dashboardController.js"],"names":["Student","require","courseModel","getProfile","req","res","id","user","console","log","findById","_id","select","student","find","limit","courses","json","message","Profile","enrollCourse","courseId","params","userId","course","status","enrolled","push","coursesAvailable","isComplete","save","Message","Error","deleteEnroll","updateOne","$pull","result","nModified","send","EnrollUpdated","error","topRanks","aggregate","$match","$addFields","Count","$size","$filter","input","as","cond","$eq","$sort","$project","firstname","lastname","students","rankings","markAsComplete","findOneAndUpdate","$set","$addToSet","completedCourses","progressController","totalCourses","length","filter","coursesPercentage","coursesData","Progress","courseProgress","studentId","populate","Promise","all","map","$unwind","$group","totalVideos","$sum","completedVideos","$cond","completedPercentage","$multiply","$divide","progress","results","query","f","toLowerCase","where","gt","paidCourses","eq","freeCourses","sorting","sort","title","rating","module","exports"],"mappings":"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","sourcesContent":["const Student = require(\"../models/users/studentModel.js\");\r\nconst courseModel = require(\"../models/course/courseModel.js\");\r\n\r\nconst getProfile = async (req, res) => {\r\n  const id = req.user;\r\n  console.log(id);\r\n  try {\r\n    const student = await Student.findById({ _id: id.id }).select(\"-password\");\r\n    const courses = await courseModel.find().limit(61\r\n\r\n    );\r\n    if (!student) {\r\n      return res.json({ message: \"No student found \" });\r\n    }\r\n    if (!courses) {\r\n      return res.json({ message: \"No courses available currently\" });\r\n    }\r\n    res.json({\r\n      message: \"Students Profile\",\r\n      Profile: student,\r\n      courses: courses,\r\n    });\r\n    console.log(student);\r\n  } catch (error) {}\r\n};\r\n\r\nconst enrollCourse = async (req, res) => {\r\n  const { courseId } = req.params;\r\n  const userId = req.user;\r\n  const course = await courseModel.findById({ _id: courseId });\r\n  const student = await Student.findById({ _id: userId.id });\r\n  try {\r\n    if (!student) {\r\n      return res.status(400).json({ message: \"Student not found\" });\r\n    }\r\n    if (!course) {\r\n      return res.status(400).json({ message: \"Course not found\" });\r\n    }\r\n    student.enrolled.push({\r\n      coursesAvailable: course._id,\r\n      isComplete: false,\r\n    });\r\n    await student.save();\r\n    res\r\n      .status(200)\r\n      .json({ Message: \"Course enrolled successfuly\", Student: student });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n\r\nconst deleteEnroll = async (req, res) => {\r\n  try {\r\n    const userId = req.user;\r\n    const { courseId } = req.params;\r\n    const result = await Student.updateOne(\r\n      { _id: userId.id },\r\n      { $pull: { enrolled: { _id: courseId } } }\r\n    );\r\n    if (result.nModified > 0) {\r\n      res.status(200).send({ message: \"Enrolls Updated\" });\r\n    }\r\n    res.json({ EnrollUpdated: result });\r\n  } catch (error) {\r\n    res.status(500).send({ message: \"Server error\", error });\r\n  }\r\n};\r\nconst topRanks = async (req, res) => {\r\n  try {\r\n    const students = await Student.aggregate([\r\n      {\r\n        $match: {\r\n          \"enrolled.isComplete\": true,\r\n        },\r\n      },\r\n      {\r\n        $addFields: {\r\n          Count: {\r\n            $size: {\r\n              $filter: {\r\n                input: \"$enrolled\",\r\n                as: \"enrolled\",\r\n                cond: { $eq: [\"$$enrolled.isComplete\", true] },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      {\r\n        $sort: { _id: -1 },\r\n      },\r\n\r\n      {\r\n        $project: {\r\n          firstname: 1,\r\n          lastname: 1,\r\n          Count:1\r\n        },\r\n      },\r\n    ]);\r\n    res.status(200).json({ rankings: students });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst markAsComplete = async (req, res) => {\r\n  try {\r\n    const { courseId } = req.params;\r\n    const userId = req.user;\r\n    const student = await Student.findOneAndUpdate(\r\n      { _id: userId.id, \"enrolled.coursesAvailable\": courseId },\r\n      {\r\n        $set: { \"enrolled.$.isComplete\": true },\r\n        $addToSet: { completedCourses: { courses: courseId } },\r\n      },\r\n      { new: true }\r\n    );\r\n    if (!student) {\r\n      return res.json({ error: \"student not found\" });\r\n    }\r\n    res.json({ message: student });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst progressController = async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const student = await Student.findById(userId);\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n\r\n    const totalCourses = student.enrolled.length;\r\n    const completedCourses = student.enrolled.filter(\r\n      (course) => course.isComplete\r\n    ).length;\r\n    const coursesPercentage = (completedCourses / totalCourses) * 100;\r\n\r\n    const coursesData = {\r\n      totalCourses,\r\n      completedCourses,\r\n      coursesPercentage,\r\n    };\r\n\r\n    res.status(200).json({ message: \"Progress report\", Progress: coursesData });\r\n  } catch (error) {\r\n    res.json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst courseProgress = async (req, res) => {\r\n  try {\r\n    const studentId = req.user.id;\r\n    const student = await Student.findById(studentId).populate(\"enrolled\");\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n    const results = await Promise.all(\r\n        student.enrolled.map(async (course) => {\r\n        const result = await courseModel.aggregate([\r\n          { $match: { _id: course.coursesAvailable } },\r\n          { $unwind: \"$section\" },\r\n          { $unwind: \"$section.videos\" },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              totalVideos: { $sum: 1 },\r\n              completedVideos: {\r\n                $sum: { $cond: [\"$section.videos.completed\", 1, 0] },\r\n              },\r\n            },\r\n          },\r\n          {\r\n            $project: {\r\n              _id: 0,\r\n              totalVideos: 1,\r\n              completedVideos: 1,\r\n              completedPercentage: {\r\n                $cond: [\r\n                    { $eq: ['$totalVideos', 0] },\r\n                    0,\r\n                    { \r\n                      $multiply: [\r\n                        { $divide: ['$completedVideos', '$totalVideos'] },\r\n                        100\r\n                      ]\r\n                    }\r\n                  ]\r\n              },\r\n            },\r\n          },\r\n        ]);\r\n        return {\r\n            course:course,\r\n            progress:result[0]\r\n        }\r\n      })\r\n    )\r\n    res.json(results)\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n\r\n\r\n//filtering Records \r\n\r\nconst filter = async(req,res)=>{\r\n  try {\r\n    const query = req.query.f\r\n    console.log(query)\r\n    if(query.toLowerCase() === 'paid'){\r\n      const paidCourses = await courseModel.find().where('price').gt(0);\r\n      return res.status(200).json({message:\"Paid courses\", paidCourses:paidCourses})\r\n    }else if(query.toLowerCase() === 'free'){\r\n      const freeCourses = await courseModel.find().where('price').eq(0)\r\n      return res.status(200).json({message:\"free courses\", freeCourses:freeCourses})\r\n    }\r\n    res.json({message:\"No courses available based on Query\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nconst sorting = async(req,res)=>{\r\n  try {\r\n    const query = req.query.sort\r\n    if(query.toLowerCase() === \"asc\"){\r\n      const courses = await courseModel.find().sort({title:1})\r\n      return res.json({message:\"Ascending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"desc\"){\r\n      const courses = await courseModel.find().sort({title:-1})\r\n      return res.json({message:\"Descending order\", course:courses})\r\n    }\r\n    else if(query.toLowerCase() === \"rating\"){\r\n      const courses = await courseModel.find().sort({rating:-1})\r\n      return res.json({message:\"Rating order\", course:courses})\r\n    }\r\n    res.json({message:\"No Sorting chosen\"})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  getProfile,\r\n  enrollCourse,\r\n  deleteEnroll,\r\n  topRanks,\r\n  markAsComplete,\r\n  progressController,\r\n  courseProgress,\r\n  //filters and sortings\r\n  filter,\r\n  sorting\r\n};\r\n"],"file":"dashboardController.dev.js"}