{"version":3,"sources":["dashboardcontroller.js"],"names":["Student","require","courseModel","getProfile","req","res","id","user","console","log","findById","_id","select","student","find","limit","courses","json","message","Profile","enrollCourse","courseId","params","userId","course","status","enrolled","push","populate","save","Message","Error","module","exports"],"mappings":"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","sourcesContent":["const Student = require('../models/users/studentModel.js')\r\nconst courseModel = require('../models/course/courseModel.js')\r\nconst getProfile = async (req,res)=>{\r\n    const id = req.user\r\n    console.log(id)\r\n    try {\r\n        const student = await Student.findById({_id:id.id}).select('-password')\r\n        const courses = await courseModel.find().limit(4)\r\n        if(!student){\r\n            return res.json({message:\"No student found \"})\r\n        }\r\n        if(!courses){\r\n            return res.json({message:\"No courses available currently\"})\r\n        }\r\n        res.json({message:\"Students Profile\", Profile:student, courses:courses})\r\n        console.log(student)\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\nconst enrollCourse = async(req,res)=>{\r\n    const { courseId } = req.params\r\n    const userId = req.user\r\n    const course = await courseModel.findById({_id:courseId})\r\n    const student = await Student.findById({_id:userId.id})\r\n    try {\r\n        if(!student){\r\n            return res.status(400).json({message:\"Student not found\"})\r\n        }\r\n        if(!course){\r\n            return res.status(400).json({message:\"Course not found\"})\r\n        }\r\n        student.enrolled.push(course)\r\n        const user = await Student.findById({_id:userId.id}).populate('enrolled')\r\n        await student.save()\r\n        res.status(200).json({Message:\"Course enrolled successfuly\", Student:user})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n    }\r\n}\r\n\r\nmodule.exports ={ getProfile, enrollCourse }"],"file":"dashboardcontroller.dev.js"}