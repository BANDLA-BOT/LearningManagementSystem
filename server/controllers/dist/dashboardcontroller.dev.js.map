{"version":3,"sources":["dashboardController.js"],"names":["Student","require","courseModel","getProfile","req","res","id","user","console","log","findById","_id","select","student","find","limit","courses","json","message","Profile","enrollCourse","courseId","params","userId","course","status","enrolled","push","coursesAvailable","isComplete","save","Message","Error","deleteEnroll","updateOne","$pull","result","nModified","send","EnrollUpdated","error","completedCourses","filter","map","$addToSet","$each","topRanks","aggregate","$match","$addFields","Count","$size","$filter","input","as","cond","$eq","$sort","$project","firstname","lastname","students","rankings","markAsComplete","findOneAndUpdate","$set","module","exports"],"mappings":"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","sourcesContent":["const Student = require('../models/users/studentModel.js')\r\nconst courseModel = require('../models/course/courseModel.js')\r\n\r\nconst getProfile = async (req,res)=>{\r\n    const id = req.user\r\n    console.log(id)\r\n    try {\r\n        const student = await Student.findById({_id:id.id}).select('-password')\r\n        const courses = await courseModel.find().limit(4)\r\n        if(!student){\r\n            return res.json({message:\"No student found \"})\r\n        }\r\n        if(!courses){\r\n            return res.json({message:\"No courses available currently\"})\r\n        }\r\n        res.json({message:\"Students Profile\", Profile:student, courses:courses})\r\n        console.log(student)\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nconst enrollCourse = async(req,res)=>{\r\n    const { courseId } = req.params\r\n    const userId = req.user\r\n    const course = await courseModel.findById({_id:courseId})\r\n    const student = await Student.findById({_id:userId.id})\r\n    try {\r\n        if(!student){\r\n            return res.status(400).json({message:\"Student not found\"})\r\n        }\r\n        if(!course){\r\n            return res.status(400).json({message:\"Course not found\"})\r\n        }\r\n        student.enrolled.push({\r\n            coursesAvailable:course._id,\r\n            isComplete:false,\r\n        })\r\n        await student.save()\r\n        res.status(200).json({Message:\"Course enrolled successfuly\", Student:student})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", Error:error.message})\r\n    }\r\n}\r\n\r\nconst deleteEnroll = async(req,res)=>{\r\n    try {\r\n        const userId = req.user\r\n        const {courseId} = req.params\r\n        const result = await Student.updateOne(\r\n            {_id:userId.id},\r\n            {$pull:{enrolled:{_id:courseId}}}\r\n        )\r\n        if(result.nModified > 0){\r\n            res.status(200).send({message:\"Enrolls Updated\"})\r\n        }\r\n        res.json({EnrollUpdated:result})\r\n    } catch (error) {\r\n        res.status(500).send({ message: 'Server error', error });\r\n    }\r\n}\r\n\r\nconst completedCourses = async(req,res)=>{\r\n    try {\r\n        const userId = req.user\r\n        const student = await Student.findById({_id:userId.id})\r\n        \r\n        if(!student){\r\n            return res.status(404).send({ message: 'Student not found' });\r\n        }\r\n        const completedCourses = student.enrolled\r\n        .filter(course => course.isComplete)\r\n        .map(course => ({courses:course.coursesAvailable}))\r\n\r\n        await Student.updateOne(\r\n            {_id:userId.id},\r\n            {$addToSet:{completedCourses:{$each:completedCourses}}}\r\n        )\r\n        res.status(200).json({ message: 'Completed courses updated successfully' });\r\n      } catch (error) {\r\n        res.status(500).json({ message: 'Server error', error });\r\n      }\r\n}\r\n\r\n\r\nconst topRanks = async(req,res)=>{\r\n    try {\r\n        \r\n        const students = await Student.aggregate([\r\n        {$match:{\r\n            'enrolled.isComplete':true\r\n        }},\r\n        {\r\n            $addFields:{\r\n                Count:{\r\n                    $size:{\r\n                        $filter:{\r\n                            input:'$enrolled',\r\n                            as:'enrolled',\r\n                            cond:{$eq:['$$enrolled.isComplete', true]}\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        {\r\n            $sort:{_id:-1}\r\n        },\r\n        \r\n        {\r\n            $project:{\r\n                firstname:1,\r\n                lastname:1\r\n            }\r\n        }\r\n    ])\r\n    res.status(200).json({rankings:students})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\"})\r\n    }\r\n}  \r\n\r\nconst markAsComplete = async(req,res)=>{\r\n    try {\r\n        const {courseId} = req.params\r\n        const userId = req.user\r\n        const student = await Student.findOneAndUpdate(\r\n            {_id:userId.id, 'enrolled.coursesAvailable':courseId},\r\n            {\r\n                $set: {'enrolled.$.isComplete':true},\r\n                $addToSet:{completedCourses:{courses:courseId}}\r\n            },\r\n            {new:true}\r\n        )\r\n        if(!student){\r\n            return res.json({error:\"student not found\"})\r\n        }\r\n        res.json({message:student})\r\n    } catch (error) {\r\n        res.json({message:error.message})\r\n    }\r\n}\r\n\r\nmodule.exports ={ getProfile, enrollCourse, deleteEnroll, completedCourses,topRanks, markAsComplete }"],"file":"dashboardController.dev.js"}